<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>roki.log - math</title><link href="https://falgon.github.io/roki.log/" rel="alternate"></link><link href="https://falgon.github.io/roki.log/feeds/math.rss.xml" rel="self"></link><id>https://falgon.github.io/roki.log/</id><updated>2019-05-29T00:00:00+09:00</updated><entry><title>ブール代数</title><link href="https://falgon.github.io/roki.log/posts/2019/%205%E6%9C%88/29/BooleanAlgebra/" rel="alternate"></link><published>2019-05-29T00:00:00+09:00</published><updated>2019-05-29T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2019-05-29:/roki.log/posts/2019/ 5月/29/BooleanAlgebra/</id><summary type="html">&lt;p&gt;ブール代数に関するまとめと &lt;span class="caps"&gt;QM&lt;/span&gt; 法,&amp;nbsp;ペトリック法の実装&lt;/p&gt;</summary><content type="html">&lt;p&gt;ブール代数は古典論理における命題論理と密接に関連している.
結論からいえば, 両者の違いは歴史的な背景ぐらいであり, 殆どの場合は同等の理論であるということができる&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
ブール代数はその応用として論理回路の構築に直接役立つことから, 計算機科学, とくにハードウェアの分野において重宝される代数系の 1&amp;nbsp;つである.&lt;/p&gt;
&lt;h3&gt;ブール代数の公理とその定理&lt;/h3&gt;
&lt;p&gt;次に示すのはブール代数の公理系である. 公理系に関する詳細は証明理論 (&lt;span class="caps"&gt;TODO&lt;/span&gt;)&amp;nbsp;の冒頭を参照のこと.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="boolean_algebra" class="disabled"&gt;ブール代数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
半順序集合 &amp;#92;(\left(B,\lor,\land,&amp;#8217;,0,1\right)&amp;#92;) が可補分配&lt;a href="https://falgon.github.io/roki.log/posts/2019/%203%E6%9C%88/15/Relation/#lattice_def"&gt;束&lt;/a&gt;ならば, 
&amp;#92;(\left(B,\lor,\land,&amp;#8217;,0,1\right)&amp;#92;) はブール代数である.
すなわち, &amp;#92;(x,y,z\in B&amp;#92;) に対して, 次のすべての公理を満たした &amp;#92;(\left(B,\lor,\land,&amp;#8217;,0,1\right)&amp;#92;) はブール代数である.

&lt;ol&gt;
&lt;li&gt;&lt;a name="boolean_algebra1" class="disabled"&gt;可換律&lt;/a&gt;: &amp;#92;(x\land y=y\land x,x\lor y=y\lor&amp;nbsp;x&amp;#92;)&lt;/li&gt;
&lt;li&gt;&lt;a name="boolean_algebra2" class="disabled"&gt;分配律&lt;/a&gt;: &amp;#92;(\left(x\lor y\right)\land z=\left(x\land z\right)\lor\left(y\land z\right),\left(x\land y\right)\lor z=\left(x\lor z\right)\land\left(y\lor&amp;nbsp;z\right)&amp;#92;)&lt;/li&gt;
&lt;li&gt;&lt;a name="boolean_algebra3" class="disabled"&gt;同一律&lt;/a&gt;: &amp;#92;(^\forall x\in L&amp;#92;) に対して &amp;#92;(x\land 1=x,x\lor 0=x&amp;#92;). ここで &amp;#92;(1&amp;#92;) は最大限, 単位元である. &amp;#92;(0&amp;#92;) は最小限,&amp;nbsp;零元である.&lt;/li&gt;
&lt;li&gt;&lt;a name="boolean_algebra4" class="disabled"&gt;補元律&lt;/a&gt;: &amp;#92;(^\exists x&amp;#8217;\in L\ {\rm s.t.}\ ^\forall x\in L, x\lor x&amp;#8217;=1, x\land&amp;nbsp;x&amp;#8217;=0&amp;#92;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;また, この \(1,0\) からのみ成る集合をブール領域, ブール代数の下に書かれた式をブール式,
\(n\in\mathbb{N}\) 個のブール領域の引数をとり, 1 個のブール領域の値となる関数 \(f:B^n\to B\) をブール関数という.
例えば, 2 変数ブール関数 \(f\left(x_1,x_2\right)\) では \(x_1,x_2\) がそれぞれ \(1,0\) のいずれかとなるので, 
\(2^4=16\) 通りの 2 変数ブール式が存在することとなる.
以下, 演算の優先順序は左結合性で \(&amp;#8216;,\land,\lor\) の順とする. ただし,&amp;nbsp;括弧内の演算はより優先される.&lt;/p&gt;
&lt;p&gt;さてブール代数の公理における乗法 \(\land\) と加法 \(\lor \), および \(1, 0\) をそれぞれ入れ替えると, 再びブール代数の公理である. 
これは&lt;a href="#dual_def"&gt;双対&lt;/a&gt;の原理という公理である.
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="dual_principle" class="disabled"&gt;双対の原理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  ブール代数で成立する文/式は, そこに現れるすべての \(\lor ,\land,0,1\) をそれぞれ \(\land,\lor ,1,0\) で置き換えても成立する.
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;これらの公理から&lt;a href="#complement_unique"&gt;補元の一意性&lt;/a&gt;, &lt;a href="#idempotence"&gt;べき等律&lt;/a&gt;, 
&lt;a href="#bounded"&gt;有界律&lt;/a&gt;, &lt;a href="#absorption"&gt;吸収律&lt;/a&gt;, &lt;a href="#associative"&gt;結合律&lt;/a&gt;, &lt;a href="#involution"&gt;対合律&lt;/a&gt;, &lt;a href="#de_morgan"&gt;ド・モルガンの法則&lt;/a&gt;, &lt;a href="#chanon_theorem"&gt;シャノンの展開定理&lt;/a&gt;が導出可能である. 
\(x,y,z\in B\)&amp;nbsp;のとき&lt;/p&gt;
&lt;p&gt;&lt;a name="complement_unique" class="disabled"&gt;&lt;h4&gt;補元の一意性&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 つの \(x\) の補元 \(x&amp;#8217;_1,x&amp;#8217;_2\)&amp;nbsp;を仮定する.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x'_1&amp;amp;=&amp;amp;x'_1\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;x'_1\land\left(x\lor x'_2\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;\left(x'_1\land x\right)\lor \left(x'_1\land x'_2\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;0\lor \left(x'_1\land x'_2\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;\left(x\land x'_2\right)\lor \left(x'_1\land x'_2\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x'_2\land\left(x\lor x'_1\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;x'_2\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x'_2&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;より \(x\) の補元が一意であることは明らか.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="idempotence" class="disabled"&gt;&lt;h4&gt;べき等律&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://falgon.github.io/roki.log/posts/2019/%203%E6%9C%88/15/Relation/#proof1"&gt;束の定理&lt;/a&gt;より自明.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="bounded" class="disabled"&gt;&lt;h4&gt;有界律&lt;/h4&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x\lor 1&amp;amp;=&amp;amp;\left(x\lor 1\right)\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;\left(x\lor 1\right)\left(x\lor x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x\lor \left(1\land x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;x\lor x'&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}, \href{#boolean_algebra3}{公理3}:可換律, 同一律}\right)\\
&amp;amp;=&amp;amp;1\\
x\land0&amp;amp;=&amp;amp;x\land x\land x'&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x\land x'&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)\\
&amp;amp;=&amp;amp;0&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="absorption" class="disabled"&gt;&lt;h4&gt;吸収律&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x\lor x\land y&amp;amp;=&amp;amp;\left(x\land1\right)\lor \left(x\land y\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)\\
&amp;amp;=&amp;amp;x\land\left(1\lor y\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}:分配律}\right)\\
&amp;amp;=&amp;amp;x\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理 1}: 可換律, 定理: \href{#bounded}{有界律}} \right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because {\rm\href{#boolean_algebra3}{公理 3}: 同一律}\right)\\
x\land\left(x\lor y\right)&amp;amp;=&amp;amp;\left(x\lor 0\right)\left(x\lor y\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)\\
&amp;amp;=&amp;amp;\left(0\land y\right)\lor x&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;x\lor 0&amp;amp;\left(\because \rm{\href{#boolean_algebra1}{公理1}: 可換律,定理: \href{#bounded}{有界律}}\right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because \rm{\href{#boolean_algebra3}{公理3}: 同一律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="associative" class="disabled"&gt;&lt;h4&gt;結合律&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\(A=x\lor \left(y\lor z\right), B=\left(x\lor y\right)\lor z\) とおく.&amp;nbsp;このとき,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x\land A&amp;amp;=&amp;amp;x\land\left(x\lor \left(y\lor z\right)\right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because {\rm 定理: \href{#absorption}{吸収律}}\right)\\
x\land B&amp;amp;=&amp;amp;x\land\left(\left(x\lor y\right)\lor z\right)\\
&amp;amp;=&amp;amp;x\land\left(x\lor y\right)\lor x\land z&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;x\lor x\land z&amp;amp;\left(\because {\rm 定理: \href{#absorption}{吸収律}}\right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because {\rm 定理: \href{#absorption}{吸収律}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ゆえに \[x\land A=x\land B=x\label{eq:assl1}\tag{L1}\]&amp;nbsp;また,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x'\land A&amp;amp;=&amp;amp;x'\land\left(x\lor \left(y\lor z\right)\right)\\
&amp;amp;=&amp;amp;x'\land x\lor x'\land\left(y\lor z\right)&amp;amp;\left(\because  {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;x'\land\left(y\lor z\right)\lor 0&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}, \href{#boolean_algebra4}{公理 4}: 可換律, 補元律}\right)\\
&amp;amp;=&amp;amp;x'\land\left(y\lor z\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)\\
x'\land B&amp;amp;=&amp;amp;x'\land\left(\left(x\lor y\right)\lor z\right)\\
&amp;amp;=&amp;amp;x'\land\left(x\lor y\right)\lor x'\land z&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;\left(x'\land x\lor x'\land y\right)\lor x'\land z&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;\left(0\lor x'\land y\right)\lor x'\land z&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x'\land y\lor x'\land z&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)\\
&amp;amp;=&amp;amp;x'\land\left(y\lor z\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ゆえに \[x&amp;#8217;\land A=x&amp;#8217;\land B=x&amp;#8217;\land\left(y\lor z\right)\label{eq:assl2}\tag{L2}\]&amp;nbsp;従って,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
A&amp;amp;=&amp;amp;A\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)\\
&amp;amp;=&amp;amp;A\land\left(x\lor x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;A\land x\lor A\land x'&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;x\land A\lor x'\land A&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}: 可換律}\right)\\
&amp;amp;=&amp;amp;x\land B\lor x'\land B&amp;amp;\left(\because\eqref{eq:assl1},\eqref{eq:assl2}\ {\rm より}\right)\\
&amp;amp;=&amp;amp;B\left(x\lor x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}: 分配律}\right)\\
&amp;amp;=&amp;amp;B\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;B&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;また, 双対の原理より \(x\left(y\land z\right)=\left(x\land y\right)\land&amp;nbsp;z\).&lt;/p&gt;
&lt;p&gt;\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="involution" class="disabled"&gt;&lt;h4&gt;対合律&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(x'\right)'&amp;amp;=&amp;amp;\left(x'\right)'\lor 0&amp;amp;\left(\because \rm{\href{#boolean_algebra3}{公理3}: 同一律}\right)\\
&amp;amp;=&amp;amp;\left(x'\right)'\lor x\land x'&amp;amp;\left(\because {\href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;\left(\left(x'\right)'\lor x\right)\left(\left(x'\right)'\lor x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(x\lor \left(x'\right)'\right)\land1&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}, \href{#boolean_algebra4}{公理 4}:可換律, 補元律}\right)\\
&amp;amp;=&amp;amp;\left(x\lor \left(x'\right)'\right)\left(x\lor x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}: 補元律}\right)\\
&amp;amp;=&amp;amp;x\lor \left(\left(x'\right)'\land x'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}:分配律}\right)\\
&amp;amp;=&amp;amp;x\lor 0&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理3}: 同一律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="de_morgan" class="disabled"&gt;&lt;h4&gt;ド・モルガンの法則&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\(\left(x\lor y\right)&amp;#8217;=x&amp;#8217;\land y&amp;#8217;\) を示す.
これが成り立つためには, 式の通り, \(x&amp;#8217;\land y&amp;#8217;\) が \(\left(x\lor y\right)\) の補元でなければならない.
すなわち, &lt;a href="#boolean_algebra4"&gt;公理4&lt;/a&gt;: 補元律より \(\left(x\lor y\right)\lor \left(x&amp;#8217;\land y&amp;#8217;\right)=1\) および \(\left(x\lor y\right)\land\left(x&amp;#8217;\land y&amp;#8217;\right)=0\)&amp;nbsp;が同時に成り立つことを示せばよい.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(x\lor y\right)\lor \left(x'\land y'\right)&amp;amp;=&amp;amp;\left(\left(x\lor y\right)\lor x'\right)\left(\left(x\lor y\right)\lor y'\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(y\lor \left(x\lor x'\right)\right)\left(x\lor \left(y\lor y'\right)\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}: 可換律, 定理: \href{#associative}{結合律}}\right)\\
&amp;amp;=&amp;amp;\left(y\lor 1\right)\left(x\lor 1\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;1\land1&amp;amp;\left(\because {\rm 定理: \href{#bounded}{有界律}} \right)\\
&amp;amp;=&amp;amp;1&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)\\
\left(x\lor y\right)\land\left(x'\land y'\right)&amp;amp;=&amp;amp;\left(x'\land y'\right)\land\left(x\lor y\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}: 可換律}\right)\\
&amp;amp;=&amp;amp;\left(\left(x'\land y'\right)\land x\right)\lor \left(\left(x'\land y'\right)\land y\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(y'\land\left(x\land x'\right)\right)\lor \left(x'\land\left(y\land y'\right)\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}: 可換律, 定理: \href{#associative}{結合律}}\right)\\
&amp;amp;=&amp;amp;\left(y'\lor 0\right)\lor \left(x'\land1\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}: 補元律}\right)\\
&amp;amp;=&amp;amp;0\lor 0&amp;amp;\left(\because {\rm 定理: \href{#bounded}{有界律}} \right)\\
&amp;amp;=&amp;amp;0&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;また, &lt;a href="#dual_def"&gt;双対の原理&lt;/a&gt;より \(\left(x\land y\right)&amp;#8217;=x&amp;#8217;\lor y&amp;#8217;\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;a name="chanon_theorem" class="disabled"&gt;&lt;h4&gt;シャノンの展開定理&lt;/h4&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;任意の \(n\) 変数ブール関数 \(f\left(x_1,x_2,\cdots,x_n\right)\) を \(x_1\) について,&amp;nbsp;次のように展開できる.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;\left(x'_1\lor x_1\right)\land f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}, \href{#boolean_algebra3}{公理 3} :補元律, 同一律}\right)\\
&amp;amp;=&amp;amp;x'_1\land f\left(x_1,x_2,\cdots,x_n\right)\lor x_1\land f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;x'_1\land f\left(0,x_2,\cdots,x_n\right)\lor x_1\land f\left(1,x_2,\cdots,x_n\right)&amp;amp;\left(\because \href{#chanon_theorem_proof}{以下に証明}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この展開をシャノン展開という.&lt;/p&gt;
&lt;p&gt;&lt;a name="chanon_theorem_proof" class="disabled"&gt;&lt;strong&gt;証明&lt;/strong&gt;&lt;/a&gt;:&lt;br&gt;
\(x_1=0\) のとき, \[f\left(0,x_2,\cdots,x_n\right)=1\land f\left(0,x_2,\cdots,x_n\right)\lor 0\land f\left(1,x_2,\cdots,x_n\right)=f\left(0,x_2,\cdots,x_n\right)\]
\(x_1=1\) のとき, \[f\left(1,x_2,\cdots,x_n\right)=0\land f\left(0,x_2,\cdots,x_n\right)\lor 1\land f\left(1,x_2,\cdots,x_n\right)=f\left(1,x_2,\cdots,x_n\right)\]&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;例として, \(f\left(x_1,x_2,x_3\right)=x_1\land x_2\lor x_2\land x_3\lor x_1\land x_3\) を \(x_1\)&amp;nbsp;について展開すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,x_3\right)&amp;amp;=&amp;amp;x_1\land x_2\lor x_2\land x_3\lor x_1\land x_3\\
&amp;amp;=&amp;amp;\left(x'_1\lor x_1\right)\land f\left(x_1,x_2,x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}, \href{#boolean_algebra3}{公理 3} :補元律, 同一律}\right)\\
&amp;amp;=&amp;amp;x'_1\land f\left(x_1,x_2,x_3\right)\lor x_1\land f\left(x_1,x_2,x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;x'_1\land f\left(0,x_2,x_3\right)\lor x_1\land f\left(1,x_2,x_3\right)&amp;amp;\left(\because {\rm 定理: \href{#chanon_theorem}{シャノンの展開定理}}\right)\\
&amp;amp;=&amp;amp;x'_1\land x_2\land x_3\lor x_1\land x_2\lor x_2\land x_3\lor x_3&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;x'_1\land x_2\land x_3\lor x_1\land x_2\lor x_3&amp;amp;\left(\because {\rm \href{#boolean_algebra1}{公理1}: 可換律, 定理: \href{#absorption}{吸収律}}\right)\\
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる. また&lt;a href="dual_def"&gt;双対の原理&lt;/a&gt;より, &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;\left(x_1\land x'_1\right)\lor f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}, \href{#boolean_algebra3}{公理 3} :補元律, 同一律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor f\left(x_1,x_2,\cdots,x_n\right)\right)\land\left(x'_1\lor f\left(x_1,x_2,\cdots,x_n\right)\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor f\left(0,x_2,\cdots,x_n\right)\right)\land\left(x'_1\lor f\left(1,x_2,\cdots,x_n\right)\right)&amp;amp;\left(\because {\rm \href{#chanon_theorem_proof}{上記証明}の\href{#dual_def}{双対}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この展開をシャノン双対展開という.&lt;/p&gt;
&lt;h3&gt;標準形&lt;/h3&gt;
&lt;p&gt;異なる表現のなされたブール式が同値であるかを即座に断定することは, 一般的に困難であることが多い&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
ここで, ブール式を一意に表す方法が決まっていれば, 即座に同値であるか判断がしやすく, 便利である. 
ブール代数では主に 2 つの形式が決められており, その形式への変形を標準化, また正規化という.
以下, \(n\) 変数ブール関数 \(f\left(x_1,x_2,\cdots,x_n\right)\) において, \(x_1,x_2,\cdots,x_n\) を入力変数, また入力変数およびその否定をリテラルという.
さらに \(n\) 個の入力変数に対し, \(k\) 番目のリテラル \(x_k^{e_k}\ \left(1\leq k\leq n\right)\)&amp;nbsp;を次のように表す.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x^{e_k}_k=\begin{cases}
x_k&amp;amp;\left(=x^1_k\right)&amp;amp;e_k=1{\rm\ のとき}\\
x'_k&amp;amp;\left(=x^0_k\right)&amp;amp;e_k=0{\rm\ のとき}
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;h4&gt;加法標準形,&amp;nbsp;主加法標準形&lt;/h4&gt;
&lt;p&gt;\(f\left(x_1,x_2,\cdots,x_n\right)\) を \(x_1,x_2\) について&lt;a href="#chanon_theorem"&gt;シャノン展開&lt;/a&gt;すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;x'_1\land x'_2\land f\left(0,0,\cdots,x_n\right)\\
&amp;amp;&amp;amp;\lor x'_1\land x_2\land f\left(0,1,\cdots,x_n\right)\\
&amp;amp;&amp;amp;\lor x_1\land x'_2\land f\left(1,0,\cdots,x_n\right)\\
&amp;amp;&amp;amp;\lor x_1\land x_2\land f\left(1,1,\cdots,x_n\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる. 従って, 全入力変数 \(x_1,x_2,\cdots,x_n\) について&lt;a href="#chanon_theorem"&gt;シャノン展開&lt;/a&gt;すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;x'_1\land x'_2\land\cdots\land x'_n\land f\left(0,0,\cdots,0\right)\\
&amp;amp;&amp;amp;\lor x'_1\land x'_2\land\cdots\land x_n\land f\left(0,0,\cdots, 1\right)\\
&amp;amp;&amp;amp;\lor\cdots\\ 
&amp;amp;&amp;amp;\lor x_1\land x_2\land\cdots\land x'_n\land f\left(1,1,\cdots,0\right)\\
&amp;amp;&amp;amp;\lor x_1\land x_2\land\cdots\land x_n\land f\left(1,1,\cdots,1\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる (&lt;a href="#chanon_theorem"&gt;シャノンの定理&lt;/a&gt;より数学的帰納法により証明できるが, 省略). 
形式的に書けば,&amp;nbsp;すなわち&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="minimum_term_expansion" class="disabled"&gt;最小項展開&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(n&amp;#92;) 変数ブール関数 &amp;#92;(f\left(x_1,x_2,\cdots,x_n\right)&amp;#92;) のすべての入力変数 &amp;#92;(x_1,x_2,\cdots,x_n&amp;#92;) について, &lt;a href="#chanon_theorem"&gt;シャノン展開&lt;/a&gt;した形式
&amp;#92;[f\left(x_1,x_2,\cdots,x_n\right)=\bigvee_{\left(e_1,e_2,\cdots,e_n\right)\in B^n}f\left(e_1,e_2,\cdots,e_n\right)\land\bigwedge_{i=1}^{n}x_i^{e_i}\label{eq:first}\tag{1}&amp;#92;]
は &amp;#92;(f\left(x_1,x_2,\cdots,x_n\right)&amp;#92;) の最小項展開である&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;. なお, このときの項数は &amp;#92;(2^n&amp;#92;) となる.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これを踏まえ,&amp;nbsp;加法標準形および主加法標準形を導入する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="DNF_PDNF" class="disabled"&gt;加法標準形, 主加法標準形&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
加法標準形 (以下 &lt;span class="caps"&gt;DNF&lt;/span&gt;) は, ブール式のリテラル, または 2 つ以上のリテラルの積の和のことをいう.
ここで, 2 つ以上のリテラルの積で同じ入力変数を 2 度以上含まない論理式を基本積, また標準項という. 
基本積のうち, すべての入力変数を含むブール式を最小項という. すなわち, 式 &amp;#92;(\eqref{eq:first}&amp;#92;) における &amp;#92;(\displaystyle\bigwedge_{i=1}^nx^{e_i}_i&amp;#92;) は最小項である.
&lt;hr /&gt;
主加法標準形 (principal disjunctive normal form: &lt;span class="caps"&gt;PDNF&lt;/span&gt;) は, ブール関数を&lt;a href="#minimum_term_expansion"&gt;最小項展開&lt;/a&gt;した形式, すなわち式 &amp;#92;(\eqref{eq:first}&amp;#92;) の形式である.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 否定論理積 \(\mid\) を &lt;span class="caps"&gt;PDNF&lt;/span&gt; で表すとしよう.
否定論理和は 2 項演算子なので, その &lt;span class="caps"&gt;PDNF&lt;/span&gt; は 2&amp;nbsp;変数ブール関数を最小項展開した形となる.&lt;/p&gt;
&lt;p&gt;\[f\left(x_1,x_2\right)=f\left(0,0\right)\land x&amp;#8217;_1\land x&amp;#8217;_2\lor f\left(0,1\right)x&amp;#8217;_1\land x_2\lor f\left(1,0\right)\land x_1\land x&amp;#8217;_2\lor f\left(1,1\right)\land x_1\land&amp;nbsp;x_2\]&lt;/p&gt;
&lt;p&gt;便宜上, 2 項演算子 \(\mid\) を最小項展開した形を \(f_\mid\left(x_1,x_2\right)\) で表すこととする.
あとは&lt;a href="#truthtable2"&gt;真理値表 2&lt;/a&gt; の \(\mid\) の列のとおりに \(f_\mid\left(x_1,x_2\right)\)&amp;nbsp;の値を決めてやればよいので&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f_\mid\left(x_1,x_2\right)&amp;amp;=&amp;amp;1\land x'_1\land x'_2\lor 1\land x'_1\land x_2\lor 1\land x_1\land x'_2\lor 0\land x_1\land x_2\\
&amp;amp;=&amp;amp;x'_1\land x'_2\lor x'_1\land x_2\lor x_1\land x'_2
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って, 否定論理積の &lt;span class="caps"&gt;PDNF&lt;/span&gt; は \(x&amp;#8217;_1\land x&amp;#8217;_2\lor x&amp;#8217;_1\land x_2\lor x_1\land x&amp;#8217;_2\) となる.
この操作を振り返ると, 真理値表から &lt;span class="caps"&gt;PDNF&lt;/span&gt; を書くためには, 結果が \(1\) となっている入力変数の全パターンに対して, 元の入力変数の値が \(1\) ならそのまま, \(0\) ならその補元をとり,
それらすべての和を取ればよいことがわかる. 
何故ならば, 結果が \(0\) となる部分は, &lt;a href="#chanon_theorem_proof"&gt;シャノンの展開定理の証明&lt;/a&gt;でも示したように消えてしまうからである.
同じようにして, 否定論理和, 排他的論理和も&lt;a href="#truthtable2"&gt;真理値表 2&lt;/a&gt; の \(\downarrow,\oplus\) の列をみると, \(1\)&amp;nbsp;となる入力のパターンから
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f_{\downarrow}\left(x_1,x_2\right)&amp;amp;=&amp;amp;x'_1\land x'_2\\
f_{\oplus}\left(x_1,x_2\right)&amp;amp;=&amp;amp;x_1\land x'_2\lor x'_1\land x_2\\
\end{eqnarray}&lt;/div&gt;
&lt;p&gt; 
となる.
すなわち, 真理値表で表現できるブール式は &lt;span class="caps"&gt;PDNF&lt;/span&gt; で表せるということである&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;次に, 任意の論理式から &lt;span class="caps"&gt;PDNF&lt;/span&gt; に変換することを考える.
結論からいうと, 次の手順に従えば &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;へ機械的に変換できることが知られている.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ブール式全体を基本項による積の和の形にする&amp;nbsp;(分配律等を利用)&lt;/li&gt;
&lt;li&gt;最小項でない基本項に対し, その基本項に含まれないすべてのリテラル \(x_i\) について \(\left(x_i\land x&amp;#8217;_i\right)\)&amp;nbsp;を乗ずる&lt;/li&gt;
&lt;li&gt;分配律等に従い展開して,&amp;nbsp;冗長な項を除去する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下, &lt;span class="caps"&gt;PDNF&lt;/span&gt; で表されたブール式を \(f\left(x_1,x_2,\cdots,x_n\right)_{\rm P D N F}\) と書くこととする.
例えば, ブール式 \(f\left(x_1,x_2\right)=x_1\land x_2\land x_1\lor x_2\) を &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;で表すとすると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2\right)&amp;amp;=&amp;amp;x_1\land x_2\land x_1\lor x_2\\
&amp;amp;=&amp;amp;x_1\land x_1\land x_2\lor x_2&amp;amp;\left(\because {\rm\href{#boolean_algebra1}{公理1}: 可換律}\right)\\
&amp;amp;=&amp;amp;x_1\land x_2\lor x_2&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)\\
&amp;amp;=&amp;amp;x_1\land x_2\lor 1\land x_2&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;x_1\land x_2\lor \left(x_1\lor x_1'\right)\land x_2&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;x_1\land x_2\lor x_1\land x_2\lor x_1'\land x_2&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\ 
&amp;amp;=&amp;amp;x_1\land x_2\lor x_1'\land x_2&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って \[f\left(x_1,x_2\right)_{\rm P D N F}=x_1\land x_2\lor x_1&amp;#8217;\land x_2\] となる.
例としてもう 1 つ, \(f\left(x_1,x_2,x_3\right)=x_1\land x_2&amp;#8217;\land x_3\lor x_1\land x&amp;#8217;_3\lor x_2\land x&amp;#8217;_3\) としたときの &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;は&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,x_3\right)&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\lor x\land x'_3\lor x_2\land x'_3\\
&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\lor x_1\land\left(x_2\lor x'_2\right)\land x'_3\lor \left(x_1\lor x_1'\right)\land x_2\land x'_3&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}, \href{#boolean_algebra4}{公理 4}: 同一律, 補元律} \right)\\
&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\lor x_1\land x_2\land x'_3\lor x_1\land x'_2\land x'_3\lor x_1\land x_2\land x'_3\lor x'_1\land x_2\land x'_3&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\lor x_1\land x_2\land x'_3\lor x_1\land x'_2\land x'_3\lor x'_1\land x_2\land x'_3&amp;amp;\left(\because {\rm 定理: \href{#idempotence}{べき等律}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って \[f\left(x_1,x_2,x_3\right)_{\rm P D N F}=x_1\land x&amp;#8217;_2\land x_3\lor x_1\land x_2\land x&amp;#8217;_3\lor x_1\land x&amp;#8217;_2\land x&amp;#8217;_3\lor x&amp;#8217;_1\land x_2\land x&amp;#8217;_3\]&amp;nbsp;となる.&lt;/p&gt;
&lt;h4&gt;乗法標準形,&amp;nbsp;主乗法標準形&lt;/h4&gt;
&lt;p&gt;\(f\left(x_1,x_2,\cdots,x_n\right)\) を \(x_1,x_2\) について&lt;a href="#chanon_theorem"&gt;シャノン双対展開&lt;/a&gt;すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor f\left(0,0,\cdots,x_n\right)\right)\\
&amp;amp;&amp;amp;\land \left(x_1\lor x'_2\lor f\left(0,1,\cdots,x_n\right)\right)\\
&amp;amp;&amp;amp;\land \left(x'_1\lor x_2\lor f\left(1,0,\cdots,x_n\right)\right)\\
&amp;amp;&amp;amp;\land \left(x'_1\lor x'_2\lor f\left(1,1,\cdots,x_n\right)\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる. 従って, 全入力変数 \(x_1,x_2,\cdots,x_n\) について&lt;a href="#chanon_theorem"&gt;シャノン双対展開&lt;/a&gt;すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,\cdots,x_n\right)&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor\cdots\lor x_n\lor f\left(0,0,\cdots,0\right)\right)\\
&amp;amp;&amp;amp;\land\left(x_1\lor x_2\lor\cdots\lor x'_n\lor f\left(1,0,\cdots,0\right)\right)\\
&amp;amp;&amp;amp;\land\cdots\\
&amp;amp;&amp;amp;\land\left(x'_1\lor x'_2\lor\cdots x_n\lor f\left(1,1,\cdots,0\right)\right)\\
&amp;amp;&amp;amp;\land\left(x'_1\lor x'_2\lor\cdots x'_n\lor f\left(1,1,\cdots,1\right)\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる (&lt;a href="#chanon_theorem"&gt;シャノンの定理&lt;/a&gt;より数学的帰納法により証明できるが, 省略).
形式的に書けば,&amp;nbsp;すなわち&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="maximum_term_expansion" class="disabled"&gt;最大項展開&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;(n&amp;#92;) 変数ブール関数 &amp;#92;(f\left(x_1,x_2,\cdots,x_n\right)&amp;#92;) のすべての入力変数 &amp;#92;(x_1,x_2,\cdots,x_n&amp;#92;) について, &lt;a href="#chanon_theorem"&gt;シャノン双対展開&lt;/a&gt;した形式
&amp;#92;[f\left(x_1,x_2,\cdots,x_n\right)=\bigwedge_{\left(e_1,e_2,\cdots,e_n\right)\in B^n}\left(f\left(e_1,e_2,\cdots,e_n\right)\lor\bigvee_{i=1}^{n}x_i^{e&amp;#8217;_i}\right)\label{eq:second}\tag{2}&amp;#92;]
は &amp;#92;(f\left(x_1,x_2,\cdots,x_n\right)&amp;#92;) の最大項展開である.  なお, このときの項数は &amp;#92;(2^n&amp;#92;) となる.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これを踏まえ, 乗法標準形,&amp;nbsp;主乗法標準形を導入する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="CNF_PCNF" class="disabled"&gt;乗法標準形, 主乗法標準形&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
乗法標準形 (以下 &lt;span class="caps"&gt;CNF&lt;/span&gt;) は, ブール式のリテラル, または 2 つ以上のリテラルの和の積のことをいう.
ここで, 2 つ以上のリテラルの和で同じ入力変数を 2 度以上含まないブール式を基本和, また標準項という.
基本和のうち, すべての入力変数を含むブール式を最大項という. すなわち, 式 &amp;#92;(\eqref{eq:second}&amp;#92;) における &amp;#92;(\displaystyle\bigvee_{i=1}^{n}x_i^{e&amp;#8217;_i}&amp;#92;) は最大項である.
&lt;hr /&gt;
主乗法標準形 (principal conjunctive normal form: &lt;span class="caps"&gt;PCNF&lt;/span&gt;) は, ブール関数を&lt;a href="#maximum_term_expansion"&gt;最大項展開&lt;/a&gt;した形式, すなわち式 &amp;#92;(\eqref{eq:second}&amp;#92;) の形式である.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 否定論理積 \(\mid\) を &lt;span class="caps"&gt;PCNF&lt;/span&gt; で表すとしよう. 否定論理積は 2 項演算子なので, その &lt;span class="caps"&gt;PCNF&lt;/span&gt; は 2&amp;nbsp;変数ブール関数を最大項展開した形となる.&lt;/p&gt;
&lt;p&gt;\[f\left(x_1,x_2\right)=\left(x_1\lor x_2\lor f\left(0,0\right)\right)\land \left(x_1\lor x&amp;#8217;_2\lor f\left(0,1\right)\right)\land\left(x&amp;#8217;_1\lor x_2\lor f\left(1,0\right)\right)\land\left(x&amp;#8217;_1\lor x&amp;#8217;_2\lor&amp;nbsp;f\left(1,1\right)\right)\]&lt;/p&gt;
&lt;p&gt;2 項演算子 \(\mid\) を最大項展開した式 \(f_{\mid}\left(x_1,x_2\right)\) は,
&lt;a href="#truthtable2"&gt;真理値表 2&lt;/a&gt; の \(\mid\) の列のとおりに \(f_{\mid}\left(x_1,x_2\right)\)&amp;nbsp;の値を決めてやればよいので&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f_{\mid}\left(x_1,x_2\right)&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor 1\right)\land \left(x_1\lor x'_2\lor 1\right)\land\left(x'_1\lor x_2\lor 1\right)\land\left(x'_1\lor x'_2\lor 0\right)\\
&amp;amp;=&amp;amp;x'_1\lor x'_2
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って, 否定論理積の &lt;span class="caps"&gt;PCNF&lt;/span&gt; は \(x&amp;#8217;_1\lor x&amp;#8217;_2\) となる. この操作を振り返ると, 真理値表から &lt;span class="caps"&gt;PCNF&lt;/span&gt; を書くためには,
結果が \(0\) となっている入力変数の全パターンに対して, 元の入力変数の値が \(1\) なら補元をとり, \(0\) ならそのままで和を取り, それらすべての積を取ればよいことがわかる.
何故ならば, 結果が \(1\) となる部分は, 和の性質, すなわち&lt;a href="#boolean_algebra3"&gt;公理 2: 同一律&lt;/a&gt;より消えてしまうからである.
同じようにして, 否定論理和, 排他的論理和も&lt;a href="#truthtable2"&gt;真理値表 2&lt;/a&gt; の \(\downarrow,\oplus\) の列をみると, \(0\)&amp;nbsp;となる入力のパターンから&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f_{\downarrow}\left(x_1,x_2\right)&amp;amp;=&amp;amp;\left(x'_1\lor x'_2\right)\land\left(x'_1\lor x_2\right)\land\left(x_1\lor x'_2\right)\\
f_{\oplus}\left(x_1,x_2\right)&amp;amp;=&amp;amp;\left(x'_1\lor x'_2\right)\land\left(x_1\lor y_1\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる. すなわち, 真理値表で表現できるブール式は, &lt;span class="caps"&gt;PCNF&lt;/span&gt; で表せるということである&lt;sup&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.
次に, 任意の論理式から &lt;span class="caps"&gt;PCNF&lt;/span&gt; に変換することを考える. 結論からいうと, 次の手順に従えば &lt;span class="caps"&gt;PCNF&lt;/span&gt;&amp;nbsp;へ機械的に変換できることが知られている.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ブール式全体を基本項による和の積の形にする&amp;nbsp;(分配律等を利用)&lt;/li&gt;
&lt;li&gt;最大項でない基本項に対し, その基本項に含まれないすべてのリテラル \(x_i\) について \(x_i\land x&amp;#8217;_i\)&amp;nbsp;を乗ずる&lt;/li&gt;
&lt;li&gt;分配律等に従い展開して,&amp;nbsp;冗長な項を除去する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下, &lt;span class="caps"&gt;PCNF&lt;/span&gt; で表されたブール式を \(f\left(x_1,x_2,\cdots,x_n\right)_{\rm P C N F}\) と書くこととする. 例えば, ブール式
\(f\left(x_1,x_2,x_3\right)=x_1\land\left(x&amp;#8217;_2\land x_3\right)&amp;#8217;\) を &lt;span class="caps"&gt;PCNF&lt;/span&gt;&amp;nbsp;で表すとすると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,x_3\right)&amp;amp;=&amp;amp;x_1\land\left(x'_2\land x_3\right)'\\
&amp;amp;=&amp;amp;x_1\land\left(x_2\lor x'_3\right)&amp;amp;\left(\because {\rm 定理: \href{#de_morgan}{ド・モルガンの法則}}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\land x'_2\right)\land\left(x_2\lor x'_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\right)\land\left(x_1\lor x'_2\right)\land\left(x_2\lor x'_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor x_3\land x'_3\right)\land\left(x_1\lor x'_2\lor x_3\land x'_3\right)\land\left(x_1\land x'_1\lor x_2\land x'_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra3}{公理 3}:同一律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor x_3\right)\land\left(x_1\lor x_2\lor x'_3\right)\land\left(x_1\lor x'_2\lor x_3\right)\\
&amp;amp;&amp;amp;\land\left(x_1\lor x'_2\lor x'_3\right)\land\left(x_1\lor x_2\lor x'_3\right)\land\left(x'_1\lor x_2\lor x'_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor x_3\right)\land\left(x_1\lor x_2\lor x'_3\right)\land\left(x_1\lor x'_2\lor x_3\right)\\
&amp;amp;&amp;amp;\land\left(x_1\lor x'_2\lor x'_3\right)\land\left(x'_1\lor x_2\lor x'_3\right)&amp;amp;\left(\because {\rm 定理:\href{#idempotence}{べき等律}}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って \[f\left(x_1,x_2,x_3\right)_{\rm P C N F}=\left(x_1\lor x_2\lor x_3\right)\land\left(x_1\lor x_2\lor x&amp;#8217;_3\right)\land\left(x_1\lor x&amp;#8217;_2\lor x_3\right)\land\left(x_1\lor x&amp;#8217;_2\lor x&amp;#8217;_3\right)\land\left(x&amp;#8217;_1\lor x_2\lor&amp;nbsp;x&amp;#8217;_3\right)\]&lt;/p&gt;
&lt;p&gt;となる. 例としてもう 1 つ, \(f\left(x_1,x_2,x_3\right)=x_1\land x&amp;#8217;_2\lor x_2\land x_3\) としたときの &lt;span class="caps"&gt;PCNF&lt;/span&gt;&amp;nbsp;は&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,x_3\right)&amp;amp;=&amp;amp;x_1\land x'_2\lor x_2\land x_3\\
&amp;amp;=&amp;amp;\left(x_1\land x'_2\lor x_2\right)\land\left(x_1\land x'_2\lor x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\right)\land\left(x_1\lor x_3\right)\land\left(x'_2\lor x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor x_3\land x'_3\right)\land\left(x_1\lor x_2\land x'_2\lor x_3\right)\land\left(x_1\land x'_1\lor x'_2\lor x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra4}{公理 4}:補元律}\right)\\
&amp;amp;=&amp;amp;\left(x_1\lor x_2\lor x_3\right)\land\left(x_1\lor x_2\lor x'_3\right)\land\left(x_1\lor x'_2\lor x_3\right)\land\left(x'_1\lor x'_2\lor x_3\right)&amp;amp;\left(\because {\rm \href{#boolean_algebra2}{公理 2}:分配律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従って
\[f\left(x_1,x_2,x_3\right)_{\rm P C N F}=\left(x_1\lor x_2\lor x_3\right)\land\left(x_1\lor x_2\lor x&amp;#8217;_3\right)\land\left(x_1\lor x&amp;#8217;_2\lor x_3\right)\land\left(x&amp;#8217;_1\lor x&amp;#8217;_2\lor x_3\right)\]&amp;nbsp;となる.&lt;/p&gt;
&lt;h3&gt;簡単化&lt;/h3&gt;
&lt;p&gt;ブール式を簡単化する方法について見ていく.&lt;/p&gt;
&lt;h4&gt;カルノー図&lt;/h4&gt;
&lt;p&gt;例えばブール関数が \[f\left(x_1,x_2\right)=x_1\land x&amp;#8217;_2\lor x&amp;#8217;_1\land x&amp;#8217;_2\lor x_1\land x&amp;#8217;_2\lor x_1\land x_2 \label{eq:third}\tag{3}\] と与えられたとき,
式変形をしていくと簡単化できることがわかる.
事実, \(\eqref{eq:third}=\left(x_1\lor x&amp;#8217;_1\right)\land x&amp;#8217;_2\lor x_1\land\left(x&amp;#8217;_2\lor x_2\right)=x&amp;#8217;_2\lor x_1\) である.
このような,  &lt;a href="#boolean_algebra4"&gt;公理4: 補元律&lt;/a&gt;を用いた式変形は, カルノー図という図式を用いることで視覚的に捉えることができる.
カルノー図は, 真理値表を 2 次元的に並べる形をしており,
例えば式 \(\eqref{eq:third}\)&amp;nbsp;をカルノー図で表すと次のようになる.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-bordered table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;(x_1\backslash x_2&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(0&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(1&amp;#92;)&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="karnaugh1" style="caption-side: bottom"&gt;カルノー図 1&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;緑色の表示となっているセルの部分それぞれが最小項を表しており, 
元の論理関数に含まれる最小項のセルには \(1\), 含まれないセルには \(0\) を記述する&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;ことで&lt;a href="#karnaugh1"&gt;上図&lt;/a&gt;のようになる.
このとき, 緑色の表示となっているセルの部分の個数は \(2^n\) である. これらをまとめることが, 冗長な変数の削除に対応するのである. 
カルノー図をみて \(1\) となるセルの和を書き下すことは, &lt;span class="caps"&gt;PDNF&lt;/span&gt; を書くことと同値である (\(\eqref{eq:third}\) のブール式は元から &lt;span class="caps"&gt;PDNF&lt;/span&gt; である.
&lt;a href="#karnaugh1"&gt;カルノー図 1&lt;/a&gt; から結果として,&amp;nbsp;これが導出できる).&lt;/p&gt;
&lt;p&gt;カルノー図の隣接するセルの間では, 全ての変数のうちのどれか 1 つの \(1\) か \(0\) が変わった結果となっているので,
&lt;a href="#boolean_algebra4"&gt;公理4: 補元律&lt;/a&gt;を利用してまとめることができるのである.
従って, 隣接する \(1\) のセルをグループ化し, &lt;a href="#boolean_algebra4"&gt;公理4: 補元律&lt;/a&gt;を利用することで簡単化が実現できる.&lt;/p&gt;
&lt;p&gt;以下, \(i\) 行目 \(j\) 列目のセルを \(i:j\) と示すこととする.
例えば, &lt;a href="#karnaugh1"&gt;カルノー図 1&lt;/a&gt; で \(1\) となるセルは \(1:1,2:1,2:2\) で, これらはそれぞれ \(x&amp;#8217;_1\land x&amp;#8217;_2,x_1\land x&amp;#8217;_2,x_1\land x_2\) である.
ここで, 任意の隣接するセル \(c_i\) をグループ化したことを \(\left\{c_1,c_2,\cdots,c_n\right\}\) と書くとき, 
\(g_1=\left\{1:1,2:1\right\}, g_2=\left\{2:1,2:2\right\}\) とグループ化できることがわかる.
従って,&amp;nbsp;それぞれを論理式で基本積の形に表すと, &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
g_1&amp;amp;=&amp;amp;x'_1\land x'_2\lor x_1\land x'_2&amp;amp;=&amp;amp;\left(x'_1\lor x_1\right)\land x'_2&amp;amp;=&amp;amp;x'_2\\
g_2&amp;amp;=&amp;amp;x_1\land x'_2\lor x_1\land x_2&amp;amp;=&amp;amp;x_1\land\left(x'_2\lor x_2\right)&amp;amp;=&amp;amp;x_1
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;よって, \(\eqref{eq:third}=x&amp;#8217;_2\lor x_1\) とわかる.&amp;nbsp;別のカルノー図についてもやってみよう.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-bordered table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;(x_1x_2\backslash x_3x_4&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(00&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(01&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(11&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(10&amp;#92;)&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="karnaugh2" style="caption-side: bottom"&gt;カルノー図 2&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(00&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(01&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(11&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(10&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;これは, 4 つの引数をもったブール関数のカルノー図である.
カルノー図では, 最上, 最下また最左, 最右のセルは隣接していると考える. 
従って, &lt;a href="#karnaugh2"&gt;カルノー図 2&lt;/a&gt; におけるグループ化の一つの例として
\(g_1=\left\{1:2,2:2\right\},g_2=\left\{1:3,4:3\right\},g_3=\left\{4:1,4:4\right\}\) と構成できる.&amp;nbsp;よって,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
g_1&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4\lor x'_1\land x_2\land x'_3\land x_4&amp;amp;=&amp;amp;x'_1\land x'_3\land x_4\\
g_2&amp;amp;=&amp;amp;x'_1\land x'_2\land x_3\land x_4\lor x_1\land x'_2\land x_3\land x_4&amp;amp;=&amp;amp;x'_2\land x_3\land x_4\\
g_3&amp;amp;=&amp;amp;x_1\land x'_2\land x'_3\land x'_4\lor x_1\land x'_2\land x_3\land x'_4&amp;amp;=&amp;amp;x_1\land x'_2\land x'_4
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ゆえに&lt;a href="#karnaugh2"&gt;カルノー図 2&lt;/a&gt;&amp;nbsp;で示される論理関数の簡単な表現は&lt;/p&gt;
&lt;p&gt;\[x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\lor x&amp;#8217;_2\land x_3\land x_4\lor x_1\land x&amp;#8217;_2\land&amp;nbsp;x&amp;#8217;_4\]&lt;/p&gt;
&lt;p&gt;となる. このグループ化という操作が一意ではないことからわかるように, 簡単化したブール式も一意でないことがわかる.
例えば, \(g_1=\left\{1:2,2:2\right\},g_2=\left\{1:2,1:3\right\},g_3=\left\{4:1,4:4\right\},g_4=\left\{4:3,4:4\right\}\)&amp;nbsp;とグループ化すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
g_1&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4\lor x'_1\land x_2\land x'_3\land x_4&amp;amp;=&amp;amp;x'_1\land x'_3\land x_4\\
g_2&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4\lor x'_1\land x'_2\land x_3\land x_4&amp;amp;=&amp;amp;x'_1\land x'_2\land x_4\\
g_3&amp;amp;=&amp;amp;x_1\land x'_2\land x'_3\land x'_4\lor x_1\land x'_2\land x_3\land x'_4&amp;amp;=&amp;amp;x_1\land x'_2\land x'_4\\
g_4&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\land x_4\lor x_1\land x'_2\land x_3\land x'_4&amp;amp;=&amp;amp;x_1\land x'_2\land x_3
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ゆえに,&lt;/p&gt;
&lt;p&gt;\[x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\lor x&amp;#8217;_1\land x&amp;#8217;_2\land x_4\lor x_1\land x&amp;#8217;_2\land x&amp;#8217;_4\lor x_1\land x&amp;#8217;_2\land&amp;nbsp;x_3\]&lt;/p&gt;
&lt;p&gt;となる. 1 つの例を見ただけなので, 厳密に言えたことではないが, 一般的にグループの数が少なく, かつグループ内のセルの数を(\(2n\)&amp;nbsp;個で)なるべく多く取る方がより簡単な論理式を構成できることがわかる.&lt;/p&gt;
&lt;p&gt;さて, ある論理変数の組み合わせが予め起こりえないことがわかっていたとき, その場合もカルノー図を用いて簡単化を進めることができる.
このような組み合わせに対する最小項を禁止項, または don&amp;#8217;t care 項という.&amp;nbsp;例えば, 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f\left(x_1,x_2,x_3,x_4\right)&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4 \\ 
&amp;amp;&amp;amp;\lor x'_1\land x_2\land x'_3\land x_4 \\ 
&amp;amp;&amp;amp;\lor x'_1\land x_2\land x_3\land x_4\\
&amp;amp;&amp;amp;\lor x'_1\land x_2\land x_3\land x'_4\\
&amp;amp;&amp;amp;\lor x_1\land x'_2\land x_3\land x_4\\
&amp;amp;&amp;amp;\lor x_1\land x'_2\land x_3\land x'_4\label{eq:fourth}\tag{4}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;というブール関数を簡単化することを考える. このとき, \(x_1\land x_2\), また \(x_1\land x&amp;#8217;_2\land x&amp;#8217;_3\land x&amp;#8217;_4\) は禁止項とする.
禁止行の対応するセルには \(\phi\) を記述する. すると, 式 \(\eqref{eq:fourth}\)&amp;nbsp;のカルノー図は次のとおりとなる.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-bordered table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;(x_1x_2\backslash x_3x_4&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(00&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(01&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(11&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(10&amp;#92;)&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="karnaugh3" style="caption-side: bottom"&gt;カルノー図 3&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(00&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(01&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(11&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(\phi&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(\phi&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(\phi&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(\phi&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(10&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(\phi&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td class="success"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;禁止項は, \(1\) でも \(0\) でもよいということになるので, グループを構成するにあたって自分で都合よく \(1\) か \(0\) に解釈してしまって良い.
できる限り多くのセルと少ないグループの数で構成するために, いま \(3:3,3:4\) を \(1\) と解釈すれば, 
\(g_1=\left\{1:2,2:2\right\},g_2=\left\{2:3,2:4,3:3,3:4\right\},g_3=\left\{3:3,3:4,4:3,4:4\right\}\) とグループ化できる.&amp;nbsp;従って,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
g_1&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4\lor x'_1\land x_2\land x'_3\land x_4&amp;amp;=&amp;amp;x'_1\land x'_3\land x_4\\
g_2&amp;amp;=&amp;amp;x'_1\land x_2\land x_3\land x_4\lor x'_1\land x_2\land x_3\land x'_4\lor x_1\land x_2 \land x_3\land x_4\lor x_1\land x_2\land x_3\land x'_4&amp;amp;=&amp;amp;x_2\land x_3\\
g_3&amp;amp;=&amp;amp;x_1\land x_2\land x_3\land x_4\lor x_1\land x_2\land x_3\land x'_4\lor x_1\land x'_2\land x_3\land x_4\lor x_1\land x'_2\land x_3\land x'_4&amp;amp;=&amp;amp;x_1\land x_3
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ゆえに, \(\eqref{eq:fourth}\)&amp;nbsp;は&lt;/p&gt;
&lt;p&gt;\[f\left(x_1,x_2,x_3,x_4\right)=x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\lor x_2\land x_3\lor x_1\land&amp;nbsp;x_3\]&lt;/p&gt;
&lt;p&gt;と簡単化できた.
カルノー図は, 1 次元につき 2 つまでの引数を扱えると考えると, 人間の次元認識能力の見地から実質 6 つの引数にまで対応できることとなるわけだが,
実際は平面的に考えることが多いので, 大抵, 最大 4&amp;nbsp;個の引数までしか扱うことができない.&lt;/p&gt;
&lt;h4&gt;クワイン・マクラスキー法&lt;/h4&gt;
&lt;p&gt;主にクワイン・マクラスキー法は \[x\land y\lor x\land y&amp;#8217;=x\land\left(y\lor y&amp;#8217;\right)=x\label{eq:fifth}\tag{5}\] を繰り返し利用し, ブール関数を機械的に簡単化していく方法であり,&amp;nbsp;その手順は次のとおりである.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ブール式を &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;にする&lt;/li&gt;
&lt;li&gt;式 \(\eqref{eq:fifth}\) を利用して圧縮し, 主項を求める&lt;ol&gt;
&lt;li&gt;ブール式を 2 進値に割り当てる&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;ハミング距離 1&amp;nbsp;のビット列同士を可能な限り繰り返し組み合わせる&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;求めた主項からただ 1&amp;nbsp;つの最小項を包含する主項(必須項)を求める.&lt;/li&gt;
&lt;li&gt;ブール関数を作成する&lt;ol&gt;
&lt;li&gt;必須項の和をとる&lt;/li&gt;
&lt;li&gt;必須項により包含されていない最小項があるとき,&amp;nbsp;最も簡単な主項を選択し和を取る.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いま, 式 \(\eqref{eq:fourth}\) を簡単化することを考えるとしよう.
このとき, まず式を &lt;span class="caps"&gt;PDNF&lt;/span&gt; にする. \(\eqref{eq:fourth}\) はすでに &lt;span class="caps"&gt;PDNF&lt;/span&gt; の形式となっているので, 今回は必要ない.
次に, &lt;a href="#karnaugh3"&gt;カルノー図 3&lt;/a&gt; の各セル \(i:j\) を \(m_0=1:1,m_1=2:1,m_2=3:1,m_3=4:1,m_4=1:2,\cdots,m_{15}=4:4\)
とおき, &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;を構成する各最小項について次のようにビット列と対応させる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
m_4&amp;amp;=&amp;amp;x'_1\land x'_2\land x'_3\land x_4=0001\\
m_5&amp;amp;=&amp;amp;x'_1\land x_2\land x'_3\land x_4=0101\\
m_9&amp;amp;=&amp;amp;x'_1\land x_2\land x_3\land x_4=0111\\
m_{11}&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\land x_4=1011\\
m_{13}&amp;amp;=&amp;amp;x'_1\land x_2\land x_3\land x'_4=0110\\
m_{15}&amp;amp;=&amp;amp;x_1\land x'_2\land x_3\land x'_4=1010
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで, 先と同様, \(x_1\land x_2\) と \(x_1\land x&amp;#8217;_2\land x&amp;#8217;_3\land x&amp;#8217;_4\) を禁止項としたときは,&amp;nbsp;それについてもビット列と対応させておく.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
m_2&amp;amp;=&amp;amp;x_1\land x_2\land x'_3\land x'_4=1100\\
m_3&amp;amp;=&amp;amp;x_1\land x'_2\land x'_3\land x'_4=1000\\
m_6&amp;amp;=&amp;amp;x_1\land x_2\land x'_3\land x_4=1101\\
m_{10}&amp;amp;=&amp;amp;x_1\land x_2\land x_3\land x_4=1111\\
m_{14}&amp;amp;=&amp;amp;x_1\land x_2\land x_3\land x'_4=1110
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;これは \(\displaystyle\bigvee {\rm m}\left(4,5,9,11,13,15\right)+{\rm dc}\left(2,3,6,10,14\right)=\eqref{eq:fourth}\) と書かれる.
このとき, 例えば \(m_4\lor m_5\) は式 \(\eqref{eq:fifth}\) を利用して簡単化できることがわかる.
事実, \[x&amp;#8217;_1\land x&amp;#8217;_2\land x&amp;#8217;_3\land x_4\lor x&amp;#8217;_1\land x_2\land x&amp;#8217;_3\land x_4=x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\land\left(x&amp;#8217;_2\lor x_2\right)=x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\] である.
このような簡単化をすべての可能な組み合わせについて繰り返し実行する. この作業を圧縮ということとする. 
先にブール式をビット列と対応させたので, 圧縮とはハミング距離 1 のビット列同士を繰り返し組み合わせることと同値である.
次の表に, 圧縮を 1 度行った結果を示す.
組み合わせられたビット部分は \(-\), それ以上圧縮できないものを主項といい, \(\ast\) で示すものとする&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;.&amp;nbsp;これを圧縮表ということとする.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;&lt;thead&gt;&lt;th&gt;1 の数&lt;/th&gt;&lt;th&gt;最小項&lt;/th&gt;&lt;th&gt;ビット列表現&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="compress_table1" style="caption-side: bottom"&gt;圧縮表 (1 回目)&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(m_{4,5}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0-01\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{3,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(10-0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,3}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1-00&amp;#92;)&lt;/td&gt;&lt;/tr&gt; 
&lt;tr&gt;&lt;td rowspan="8"&gt;&amp;#92;(2&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(m_{5,9}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(01-1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{5,6}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(-101&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{9,13}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(011-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{13,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(-110&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{14,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1-10&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{11,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(101-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,6}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(110-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(11-0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;&amp;#92;(3&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(m_{9,10}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(-111&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{10,11}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1-11&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{6,10}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(11-1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{10,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(111-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;残りのすべての最小項について \(\ast\)&amp;nbsp;がつくまで繰り返す.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;&lt;thead&gt;&lt;th&gt;1 の数&lt;/th&gt;&lt;th&gt;最小項&lt;/th&gt;&lt;th&gt;ビット列表現&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="compress_table2" style="caption-side: bottom"&gt;圧縮表 (2 回目)&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(m_{2,3,14,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#8212;0\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;&amp;#92;(2&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(m_{5,6,9,10}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(-1-1\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{9,10,13,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(-11-\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{10,11,14,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1-1-\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,6,10,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(11&amp;#8212;\ast&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;従って, 主項は \(m_{4,5},m_{2,3,14,15},m_{5,6,9,10},m_{9,10,13,14},m_{10,11,14,15},m_{2,6,10,14}\) であるから, 
&lt;a href="#compress_table1"&gt;圧縮表 1&lt;/a&gt; および &lt;a href="#compress_table2"&gt;2&lt;/a&gt; より, 式 \(\eqref{eq:fourth}\)&amp;nbsp;は次のように表現できることがわかる.&lt;/p&gt;
&lt;p&gt;\[\underbrace{x&amp;#8217;_1\land x&amp;#8217;_3\land x_4}_{m_{4,5}}\lor
\underbrace{x_1\land x&amp;#8217;_4}_{m_{2,3,14,15}}\lor\underbrace{x_2\land x_4}_{m_{5,6,9,10}}\lor\underbrace{x_2\land x_3}_{m_{9,10,13,14}}\lor\underbrace{x_1\land x_3}_{m_{10,11,14,15}}\lor
\underbrace{x_1\land&amp;nbsp;x_2}_{m_{2,6,10,14}}\]&lt;/p&gt;
&lt;p&gt;しかしこれはまだ冗長である. この主項から必須項を調べる. 縦軸に主項, 横軸に最小項を並べ, 最小項を包含する主項のセルに印 \(\bigcirc\) を, 
包含する最小項が 1 つしかない主項のセルに印 \(\circledcirc\) をつける.&amp;nbsp;これを主項表という.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;&lt;thead&gt;&lt;th&gt;主項 &amp;#92;(\backslash&amp;#92;) 最小項&lt;/th&gt;&lt;th&gt;&amp;#92;(m_4&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(m_5&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(m_9&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(m_{13}&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(m_{11}&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(m_{15}&amp;#92;)&lt;/th&gt;&lt;th&gt;ビット表現&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="prime_implicant_table1" style="caption-side: bottom"&gt;主項表 1&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{4,5}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\circledcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\bigcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(0-01&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{5,6,9,10}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(\bigcirc&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(\bigcirc&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(-1-1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{9,10,13,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\bigcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\circledcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(-11-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{10,11,14,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\circledcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(\require{color}\textcolor{blue}{\bigcirc}&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1-1-&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,3,14,15}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(\bigcirc&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#8212;0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(m_{2,6,10,14}&amp;#92;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&amp;#92;(11&amp;#8212;&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;従って, 必須項は \(\circledcirc\) のつく \(m_{4,5},m_{9,10,13,14},m_{10,11,14,15}\) である. 
あとはそれらを書き出し, 残りの主項で最小項を全て含む最も簡単な組み合わせを探すこととなる(ここで現れる必須項が全ての最小項を包含するとは限らない).
ここで, もし \(\circledcirc\) が 1 つも含まれない最小項があれば, すなわち必須項にすべての最小項が含まれていなければ,
最も簡単となりかつ, 全ての最小項を含むブール式となるよう適当な主項を選択する.
今回の場合では, 必須項のみで全ての最小項を包含することができている(印を青の表示としておいた)から
\(m_{4,5},m_{9,10,13,14},m_{10,11,14,15}\) の和, すなわち
\[x&amp;#8217;_1\land x&amp;#8217;_3\land x_4\lor x_2\land x_3\lor x_1\land x_3\] が式 \(\eqref{eq:fourth}\) の最簡形である.
先に示したカルノー図による簡単化で得られたブール式と同等の結果が得られたことがわかる.
なお, クワイン・マクラスキー法は &lt;span class="caps"&gt;NP&lt;/span&gt; 完全である&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;ため,&amp;nbsp;使用範囲が限られる.&lt;/p&gt;
&lt;h4&gt;ペトリック法&lt;/h4&gt;
&lt;p&gt;先のクワイン・マクラスキー法の最後では,
「最も簡単となりかつ, 全ての最小項を含むブール式となるよう適当な主項を選択」することによって最簡形を得るとのことであったが,
この部分をペトリック法で置き換えることにより, 機械的に最簡形のブール式を決定することができる.
ここでも, \(\eqref{eq:fourth}\) を例に方法を示すこととする.
クワイン・マクラスキー法の手順のうち 3 まで実行したものとし, &lt;a href="#prime_implicant_table1"&gt;主項表 1&lt;/a&gt; が得られたとしよう.
まず&lt;a href="#prime_implicant_table1"&gt;主項表 1&lt;/a&gt; の列を見て, 印のある主項らで和を取り,&amp;nbsp;それらの積をとった次の式を得る.&lt;/p&gt;
&lt;p&gt;\[m_{4,5}\land \left(m_{4,5}\lor m_{5,6,9,10}\right)\land\left(m_{5,6,9,10}\lor m_{9,10,13,14}\right)\land m_{9,10,13,14}\land m_{10,11,14,15}\land\left(m_{10,11,14,15}\lor&amp;nbsp;m_{2,3,14,15}\right)\label{eq:sixth}\tag{6}\]&lt;/p&gt;
&lt;p&gt;式 \(\eqref{eq:sixth}\) を&lt;a href="#boolean_algebra2"&gt;公理2&lt;/a&gt;: 分配律および&lt;a href="#absorption"&gt;吸収律&lt;/a&gt;を用いて変形していくと,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\eqref{eq:sixth}&amp;amp;=&amp;amp;\left(m_{4,5}\lor m_{4,5}\land m_{5,6,9,10}\right)\land\left(m_{5,6,9,10}\land m_{9,10,13,14}\lor m_{9,10,13,14}\right)\land\left(m_{10,11,14,15}\lor m_{10,11,14,15}\land m_{2,3,14,15}\right)\\
&amp;amp;=&amp;amp;m_{4,5}\land m_{9,10,13,14}\land m_{10,11,14,15}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この主項の積となっている部分を主項の和とすることで, ブール関数の最簡形が求まる.
従って,&amp;nbsp;先と同様の結果が機械的に得られたことがわかる.&lt;/p&gt;
&lt;h4&gt;クワイン・マクラスキー法,&amp;nbsp;ペトリック法の実装&lt;/h4&gt;
&lt;p&gt;これらは一度プログラムで実装することが割と学習の定番となっているので, Haskell で実装した.&amp;nbsp;次のリポジトリにて管理している.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;
&lt;i class="fab fa-github" style="font-size: large; margin-right: 5px;"&gt;&lt;/i&gt;
&lt;a href="https://github.com/falgon/bsimplified"&gt;falgon/bsimplified - The simple and pure implementation of Quine-McCluskey method, Petrick&amp;#8217;s method and parsing of Boolean&amp;nbsp;formula&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;まず, いま解いた簡単化を再度実行してみる. 
よくある実装法だと思うが, クワイン・マクラスキー法の圧縮過程は二分木のデータ構造として表現する.
従って, まずはじめに各最小項に対応するノードを作成することで &lt;span class="caps"&gt;PDNF&lt;/span&gt;&amp;nbsp;を表現することとした.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pdnfForest&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;strBitsList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0101&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1011&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0110&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1010&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1101&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1110&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18370878410602274422&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17795521015237778886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9505003458451781531&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1011&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5344459161969259783&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2509103263232437805&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9465362842462816922&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5080631804786515567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8905849755465195471&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7582384624143865392&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pdnfForest&lt;/code&gt; には &lt;code&gt;QMyBits&lt;/code&gt; のインスタンス (&lt;code&gt;DigitListBits&lt;/code&gt;, &lt;code&gt;StrBits&lt;/code&gt;, &lt;code&gt;RawBits&lt;/code&gt;) 
のリストと Don&amp;#8217;t care か否かを制御するフラグのリストを渡す.
このとき, 2 つのリストの要素数は同一でなければならない (もしそうでなければ &lt;code&gt;Nothing&lt;/code&gt; が返る).
ここで, &lt;code&gt;DigitListBits&lt;/code&gt;, &lt;code&gt;StrBits&lt;/code&gt;, &lt;code&gt;RawBits&lt;/code&gt; はそれぞれビット列の表現を包括的に捉えるための型である.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;toRawBits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;StrBits&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1010&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;toRawBits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;RawBits&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;toRawBits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;StrBits&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1010&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;toRawBits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DigitListBits&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;クワイン・マクラスキー法によって圧縮を実行する.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quineMcCluskey&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;
&lt;span class="kt"&gt;PrimeImplicants&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;577617992350188464&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18370878410602274422&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17795521015237778886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6829379978376433071&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8439440437090953821&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17795521015237778886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9505003458451781531&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3159344086055741426&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7582384624143865392&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10719524625750522604&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11617789877111658934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9505003458451781531&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2509103263232437805&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3889360259696288602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18197116026168548551&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14515361159708671901&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1011&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5344459161969259783&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9465362842462816922&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3889360259696288602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14507692373987760546&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17927799263722280277&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9465362842462816922&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8905849755465195471&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3574163930668469495&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5080631804786515567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1892010599057419013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3438512683213686879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5080631804786515567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7582384624143865392&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3889360259696288602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実際の計算ではこれで十分なのだが, 一応人間にとってより分かりやすい &lt;code&gt;traceQuineMcCluskey&lt;/code&gt; を用意してある.
引数には, &lt;code&gt;pdnfForest&lt;/code&gt; で作成したノードのリストと, それに対応する変数名のリストを渡す.
両者の要素数は同一でなければならない (もしそうでない場合 &lt;code&gt;Nothing&lt;/code&gt; が返る).
ここでは, 先に扱った例題に対応した変数名を渡しているので,&amp;nbsp;得られた主項が先と同一であることが確認できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;traceQuineMcCluskey&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;The&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_4 m_5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5 m_9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5 m_6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9 m_13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9 m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11 m_15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11 m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_13 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15 m_3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2 m_3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2 m_6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_6 m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Found&lt;/span&gt; &lt;span class="n"&gt;prime&lt;/span&gt; &lt;span class="n"&gt;implicants&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_4 m_5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;The&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5 m_9 m_6 m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9 m_13 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11 m_15 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15 m_3 m_2 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2 m_6 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Found&lt;/span&gt; &lt;span class="n"&gt;prime&lt;/span&gt; &lt;span class="n"&gt;implicants&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5 m_9 m_6 m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9 m_13 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11 m_15 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15 m_3 m_2 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2 m_6 m_10 m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;簡単化された最低限の項を得るには &lt;code&gt;minTerms&lt;/code&gt; 等を用いる.
これも, 変数名と対応した結果を得ることのできる &lt;code&gt;minTermsStr&lt;/code&gt; を用意してある.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minTerms&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;577617992350188464&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18370878410602274422&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17795521015237778886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10719524625750522604&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11617789877111658934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9505003458451781531&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2509103263232437805&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3889360259696288602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18197116026168548551&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14515361159708671901&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1011&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5344459161969259783&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9465362842462816922&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3889360259696288602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1111&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4819471800686604738&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TruthTableRow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dontcare&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mergedFlag&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8582731269452337816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevLeft&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prevRight&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CTEmpty&lt;/span&gt;&lt;span class="p"&gt;}}}]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;QMM&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;BSimplified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minTermsStr&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m&lt;/span&gt;
&lt;span class="s"&gt;_6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m_14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また, ブール式を入力して, 最も簡単な式となる項を見つけられるようにもしてある.
ブール式の表記としては, 後述の記号 (否定: &lt;code&gt;~&lt;/code&gt;, 積: &lt;code&gt;*&lt;/code&gt;, 和: &lt;code&gt;+&lt;/code&gt;, 括弧: &lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;) を用いることができる.
アルファベット 1 文字は変数名として捉える.
ここでは, 例として式 \(\eqref{eq:third}\)&amp;nbsp;を入力として与える.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ stack build
$ stack &lt;span class="nb"&gt;exec&lt;/span&gt; bsimplified -- &lt;span class="s2"&gt;&amp;quot;A*~B+~A*~B+A*~B+A*B&amp;quot;&lt;/span&gt;
Minterms &lt;span class="o"&gt;(&lt;/span&gt;Truth patterns&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="nv"&gt;m_0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True, &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;m_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True, &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;m_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False, &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False &lt;span class="o"&gt;}&lt;/span&gt;
The state of compression &lt;span class="c1"&gt;#1: [&amp;quot;m_0 m_1&amp;quot;,&amp;quot;m_1 m_3&amp;quot;]&lt;/span&gt;
Found prime implicants: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;m_0 m_1&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;m_1 m_3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
Simplified terms: &lt;span class="o"&gt;(&lt;/span&gt;m_0 m_1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;m_1 m_3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\(m_{0,1},m_{1,3}\) が結果として得られた. 
それぞれ, ビット列上の圧縮された部分を \(-\) で表記すると, \(m_{0,1}=1-, m_{1,3}=-0\) である.
これはつまり \(A B&amp;#8217;\) なので, 従って最簡形は \(A\lor B&amp;#8217;\) である.
当然ながら, 先に求めた解と同じ結果が得られたことが確認できる.
実装については普通に字句解析, 再起下降で計算, 真理値表を構成して &lt;span class="caps"&gt;PDNF&lt;/span&gt; をつくっている.
ところで, この最簡形を得るという問題は充足可能性問題であり &lt;span class="caps"&gt;NP&lt;/span&gt; 困難&lt;sup id="fnref-10"&gt;&lt;a class="footnote-ref" href="#fn-10"&gt;10&lt;/a&gt;&lt;/sup&gt;なので, 変数の多いブール関数に対する最簡形を得ることは難しい.
その場合,&amp;nbsp;現実的な時間で比較的良質な解が得られるヒューリスティックを含む方法で求めることとなる.&lt;/p&gt;
&lt;h3&gt;ブール代数の例&lt;/h3&gt;
&lt;p&gt;ここではブール代数の一例として, 計算機科学で一般的に用いられるブール代数を挙げる.
集合 \(L=\left\{0,1\right\}\) に対して \(\land\) を積 \(\cdot:L\times L\to L\), 
\(\lor\) を和 \(+:L\times L\to L\), 補元 \(x&amp;#8217;\) を否定 \(\overline{x}\) とおく. 
各演算子は, 次の&lt;a href="#truthtable1"&gt;真理値表 1&lt;/a&gt; に従う (\(\overline{y}\) は \(\overline{x}\)&amp;nbsp;と同様なので省略).&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;(x&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(y&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(\overline{x}&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(x\cdot y&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(x+y&amp;#92;)&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="truthtable1" style="caption-side: bottom"&gt;真理値表 1&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;これは紛れもなくブール代数である.
この形式の下で書かれる式は一般に論理式, 演算子は論理記号といわれる.
計算機科学の分野において,
ブール代数は排他的論理和: \(\oplus\), 否定論理積: \(\mid\), 否定論理和: \(\downarrow\) といった記号らをも含めて論理記号として扱うことが多い.
これらの真理値表は \(x,y\in L\)&amp;nbsp;に対して次の通りである.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;(x&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(y&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(x\mid y&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(x\downarrow y&amp;#92;)&lt;/th&gt;&lt;th&gt;&amp;#92;(x\oplus y&amp;#92;)&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="truthtable2" style="caption-side: bottom"&gt;真理値表 2&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(1&amp;#92;)&lt;/td&gt;&lt;td&gt;&amp;#92;(0&amp;#92;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;とくに, 否定論理積 \(\mid\) はそれ一つで積, 和, 否定が定義できるため, 他の論理記号よりも特別視されるような場合のある結合子である. 
これは, シェファーの棒記号といわれ, 真理値表をみるとわかるように \(\overline{\left(x\land y\right)}\), また \(\overline{x}\lor \overline{y}\) と同値である. 
この否定論理積を使って, \(\overline{x}:=x\mid x\) と否定が定義できる. 
この否定を使って, \(x\land y:=\overline{\left(x\mid y\right)}\) と積が定義できるし, 
\(x\lor y:=\overline{x}\mid \overline{y}\) と和も定義できる. 
どちらかをも定義せずとも, 否定に加えて積があれば和が定義できるし,&amp;nbsp;和があれば積が定義できる.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref1" href="https://math.stackexchange.com/questions/1210458/what-is-the-difference-between-boolean-logic-and-propositional-logic"&gt;What is the difference between Boolean logic and propositional logic?&lt;/a&gt;&amp;#8221; 2019 年 4 月 13&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref2" href="https://www.quora.com/What-is-the-difference-between-Boolean-Algebra-and-propositional-logic-If-either-they-are-same-or-one-is-a-subset-of-another-why-should-we-study-those-separately"&gt;What is the difference between Boolean Algebra and propositional logic? If either they are same or one is a subset of another why should we study those separately?&lt;/a&gt;&amp;#8221; 2019 年 4 月 13&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;J. Donald Monk (1976) &amp;#8220;Mathematical Logic (Graduate Texts in Mathematics)&amp;#8221; Springer; Softcover reprint of the original 1st ed. 1976版 (1976/9/7). &lt;span class="caps"&gt;ISBN&lt;/span&gt;-13:&amp;nbsp;978-1468494549&lt;/li&gt;
&lt;li&gt;赤間世紀, 長田康敬, 玉城史朗 (2006)『&lt;a id="ref4" class="disabled"&gt;情報数学入門&lt;/a&gt;』共立出版. &lt;span class="caps"&gt;ISBN&lt;/span&gt;-13:&amp;nbsp;978-4320018143&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;W. V.&lt;/span&gt; Quine (1952) &amp;#8220;The Problem of Simplifying Truth Functions&amp;#8221; The American Mathematical Monthly Vol. 59, No. 8 (Oct., 1952), pp.&amp;nbsp;521-531&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;W. V.&lt;/span&gt; Quine (1955) &amp;#8220;A Way to Simplify Truth Functions&amp;#8221; The American Mathematical Monthly Vol. 62, No. 9 (Nov., 1955), pp.&amp;nbsp;627-631&lt;/li&gt;
&lt;li&gt;[動画] Phalanetra. H.S &amp;#8220;&lt;a href="https://www.youtube.com/watch?v=97KpndF8-So"&gt;Quine McCluskey minimisation and Petrick&amp;#8217;s method for obtaining simplified Boolean expressions&lt;/a&gt;&amp;#8220;, 2019 年 4 月 30&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mrc.uidaho.edu/mrc/people/jff/349/lect.10"&gt;Lecture #10: Petrick&amp;#8217;s&amp;nbsp;Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Czort, S. (1999) &amp;#8220;&lt;a name="ref9" class="disabled"&gt;The complexity of minimizing disjunctive normal form formulas (Master&amp;#8217;s thesis)&lt;/a&gt;&amp;#8220;. University of&amp;nbsp;Aarhus.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;イギリスの数学者ジョージ・ブール (英: George Boole) は 19 世紀半ばに人間の思考を代数計算で行うための研究を行い, ブール代数を形式化した. 命題論理はそれよりも昔にフレーゲにより構築された論理体型であるが, これは哲学的投機から派生したものである. 19 世紀後半になると, 哲学者たちは殆どブールの象徴主義を採用し, その後の 20 世紀ではこれらの学問間における明確な区別はなかったとのこと(&lt;a href="#ref2"&gt;参考文献2&lt;/a&gt; より引用: &lt;i&gt;The main difference is historical. George Boole was a mathematician interested in efficient practical solutions of complicated logical questions in the middle 19th century. His main innovation was symbolic logic, a system of notation for clear specification of propositions and relations among propositions. [..] Propositional logic goes back to ancient times and derives from philosophical speculation. In the late 19th century philosophers mostly adopted Boole’s symbolism. Therefore in the 20th century there’s no clear distinction between the two fields, &lt;/i&gt;). しかしながら, ブール代数に還元できないいくつかの命題論理が残っているとのこと(&lt;a href="#ref2"&gt;参考文献2&lt;/a&gt; より引用: &lt;i&gt;although there remains some propositional logic that cannot be reduced to Boolean symbols. &lt;/i&gt;). これが事実ならば, ブール代数は命題論理のサブセット的な論理であることがいえるが, &lt;a href="#ref3"&gt;参考文献3&lt;/a&gt; p.158 では, &amp;#8220;&lt;i&gt;the correspondence between Boolean algebras and sentential logics [&amp;#8230;] We shall see that there is a full correspondence between these two kinds of mathematical objects.&lt;/i&gt; とあり, さらに同著書 p.160 で &amp;#8220;&lt;i&gt;the following theorem, which is another kind of completeness theorem for Boolean algebras. [&amp;#8230;] Hence we may say that the theories of Boolean algebras and of sentential logics are equivalent, in some sense.&lt;/i&gt;&amp;#8221; とも言われていることから, 大まかに言い切ってしまえば, 殆ど差はないということであろう.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;ブール式は 1 つのブール関数を定めるが, ブール関数はブール式を一意には定めない.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\displaystyle\bigwedge^{n}_{i=1} A_i = A_1\land\cdots\land A_n, \bigvee^{n}_{i=1} A_i=A_1\lor\cdots\lor A_n\)&lt;/span&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;真理値表とは, 簡単にいえばここでは \(x,y\in B\) に対してそれぞれ \(1\) または \(0\) を実際に代入したときに取りうるすべての値を書き下したものである. より厳密な取り扱いについては命題論理のエントリ(&lt;span class="caps"&gt;TODO&lt;/span&gt;)を参照.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;このあたりは自明とする.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;すなわち, ブール関数の値を記述する. \(0\) は記述せずに省略される場合もある.&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;2 進値を用いず, 変数を用いて圧縮表を作成する方法はクワイン法といわれる. ウィラード・ヴァン・オーマン・クワイン (英: Willard van Orman Quine) によって提案されたクワイン法がエドワード・J・マクラスキーによって発展されたため, このように言われている.&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;この表記の仕方は &lt;a href="https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AF%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%AD%E3%83%BC%E6%B3%95"&gt;Wikipedia の記事&lt;/a&gt;を参考とした.&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;&lt;a href="#ref9"&gt;参考文献 9&lt;/a&gt; より&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-10"&gt;
&lt;p&gt;これについては, 命題論理のエントリ(&lt;span class="caps"&gt;TODO&lt;/span&gt;)内のトートロジー判定器のセクションにおいて取り上げている.&amp;#160;&lt;a class="footnote-backref" href="#fnref-10" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category></entry><entry><title>関係 (集合論)</title><link href="https://falgon.github.io/roki.log/posts/2019/%203%E6%9C%88/15/Relation/" rel="alternate"></link><published>2019-03-15T00:00:00+09:00</published><updated>2019-03-15T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2019-03-15:/roki.log/posts/2019/ 3月/15/Relation/</id><summary type="html">&lt;p&gt;関係 (集合論)&amp;nbsp;に関するまとめ&lt;/p&gt;</summary><content type="html">&lt;p&gt;関係 (集合論)&amp;nbsp;について復習.&lt;/p&gt;
&lt;h3&gt;一般的な関係&lt;/h3&gt;
&lt;p&gt;いま, 二つの要素の順序体を &lt;span class="math"&gt;\(\left\lt a, b\right\gt\)&lt;/span&gt; と書くこととする.
他の異なる順序体 \(\left\lt c, b\right\gt\) に対し,&amp;nbsp;以下の通り定義する.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left\lt a,b\right\gt=\left\lt c,d\right\gt&amp;amp;:=&amp;amp;a=c, b=d\\\
{\rm デカルト積} = {\rm 直積} = A\times B&amp;amp;:=&amp;amp;\left\{\left\lt a,b\right\gt\mid a\in A, b\in B\right\}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;このとき順序体の要素を \(n\) 個に拡張したものを \(n\)-tuple といい,&amp;nbsp;以下の通り定義する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="n-tuple" class="disabled"&gt;&amp;#92;(n&amp;#92;)-tuple の同値関係と直積&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
\begin{eqnarray}
\left\lt a_1,a_2,\cdots,a_n\right\gt=\left\lt b_1,b_2,\cdots,b_n\right\gt&amp;:=&amp;\left(a_1=b_1,a_2=b_2,\cdots,a_n=b_n\right) \label{eq:first}\tag{1} &amp;#92;\
{\rm デカルト積} =  {\rm直積} = A_1\times A_2\times\cdots\times A_n=\prod_{i=1}^{n}A_i&amp;:=&amp;\left\{\left\lt a_1,a_2,\cdots,a_n\right\gt\mid a_1\in A_1,a_2\in A_2,\cdots,a_n\in A_n\right\} \label{eq:second}\tag{2}
\end{eqnarray}
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;なお \(\eqref{eq:second}\) より \(A^n:=\left(A_1=A_2=\cdots =A_n\right)\) が自明に導ける.
いま集合 \(A\) から \(B\) に対する二項関係 \(R\subseteq A\times B\) があって, 
\(\left\lt a,b\right\gt\in R\) ならば \(a\) と \(b\) は関係 \(R\) にあるといい, 
\(R\left(a,b\right)\) または \(aRb\)&amp;nbsp;と書く.&lt;/p&gt;
&lt;p&gt;\[R:=\left\{\left\lt a,b\right\gt\mid a\in A,b\in&amp;nbsp;B,aRb\right\}\]&lt;/p&gt;
&lt;p&gt;\(\left(a,b\right)\not\in R\) ならば \(a\) と \(b\) は関係 \(R\) にないといい, 
\(\overline{R}\left(a,b\right)\) または \(a\overline{R}b\) と書く.
このとき \(A=B\) ならば二項関係 \(R\subseteq \left(A^2=A\times B\right)\) を \(A\) 上の二項関係という&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;例えば, 自然数の集合 \(\mathbb{N}\) に対し, その&lt;a href="#equivalence_relation"&gt;同値関係&lt;/a&gt; &amp;#8220;\(=\)&amp;#8221;&amp;nbsp;を順序体を用いて新たに&lt;/p&gt;
&lt;p&gt;\[R:=\left\{\left\lt n,n\right\gt\mid n\in&amp;nbsp;\mathbb{N}\right\}\subseteq\mathbb{N}^2\]&lt;/p&gt;
&lt;p&gt;と定義すると \(a,b\in \mathbb{N}\) に対して \(a R_=b\Leftrightarrow a=b\) である.
また, 集合 \(X=\left\{1,2,3\right\}\) に対し, その&lt;a href="#orderd_relation"&gt;順序関係&lt;/a&gt; \(R_\gt\subseteq X^2\) 
を大なりの関係 &amp;#8220;\(\gt\)&amp;#8221; とすると \(R_\gt\)&amp;nbsp;は&lt;/p&gt;
&lt;p&gt;\[R_\gt=\left\{\left\lt 2,1\right\gt, \left\lt 3,1\right\gt, \left\lt&amp;nbsp;3,2\right\gt\right\}\]&lt;/p&gt;
&lt;p&gt;となる. ここで, 逆関係を導入する. 関係 \(R\) の逆関係は \(B\) から \(A\) への関係,&amp;nbsp;すなわち&lt;/p&gt;
&lt;p&gt;\[R^{-1}:=\left\{\left\lt b,a\right\gt\mid a\in A, b\in B,&amp;nbsp;aRb\right\}\]&lt;/p&gt;
&lt;p&gt;と定義される. 従って, 例えば集合 \(X\) に対する \(R_\gt\) の逆関係は 
\(R_\gt^{-1}=\left\{\left\lt 1,2\right\gt, \left\lt 1,3\right\gt, \left\lt 2,3\right\gt\right\}\)&amp;nbsp;である.&lt;/p&gt;
&lt;p&gt;二項関係は,&amp;nbsp;より一般化することができる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="n-ary_relation" class="disabled"&gt;&amp;#92;(n&amp;#92;) 項関係&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
いま複数の集合の直積の部分集合, すなわち &amp;#92;(n&amp;#92;) 項関係 &amp;#92;(R\subseteq\prod_{i=1}^{n}A_i&amp;#92;) があって,
&amp;#92;(\left\lt a_1,a_2,\cdots,a_n\right\gt\in R&amp;#92;) ならば &amp;#92;(a_1,a_2,\cdots,a_n&amp;#92;) は 関係
&amp;#92;(R&amp;#92;) にあるといい, &amp;#92;(R\left(a_1,a_2,\cdots,a_n\right)&amp;#92;) と書く.

&amp;#92;[R:=\left&amp;#92;{\left\lt a_1,a_2,\cdots,a_n\right\gt\mid a_1\in A_1,a_2\in A_2,\cdots,a_n\in A_n, R\left(a_1,a_2,\cdots,a_n\right)\right&amp;#92;}\subseteq\prod_{i=1}^{n}A_i&amp;#92;]

また &amp;#92;(\left\lt a_1,a_2,\cdots,a_n\right\gt\not\subseteq R&amp;#92;) ならば &amp;#92;(a_1,a_2,\cdots,a_n&amp;#92;) は
関係 &amp;#92;(R&amp;#92;) にないといい, &amp;#92;(\overline{R}\left(a_1,a_2,\cdots,a_n\right)&amp;#92;) と書く.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ここで, 本ブログ内で特に断りなく使われる一般的な関係に関する記号の表記,&amp;nbsp;その意図について表明しておく.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="order_symbol" class="disabled"&gt;本ブログで使われる一般的な関係に関する記号表記&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
任意の二項関係 &amp;#92;(\lesssim&amp;#92;) の要素 &amp;#92;(\left\lt a,b\right\gt\in\ \lesssim&amp;#92;) に対し:
&lt;ul&gt;
&lt;li&gt;&amp;#92;(\prec\ :=\left&amp;#92;{\left\lt a,b \right\gt\mid \left\lt a, b\right\gt\in\ \lesssim,&amp;nbsp;a\not=b\right&amp;#92;}&amp;#92;)&lt;/li&gt;
&lt;li&gt;
&amp;#92;(\ll\ :=\left&amp;#92;{\left\lt a,b\right\gt\mid\left\lt a, c\right\gt\not\in\ \lesssim\ {\rm かつ}\ \left\lt c,b\right\gt\not\in\&amp;nbsp;\lesssim\right&amp;#92;}&amp;#92;)
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;すなわち, \(x\prec y\) は \(x\) は真に \(y\) の前にある, 
\(x\ll y\) は \(x\) は \(y\)&amp;nbsp;の直前にあることを意味する.&lt;/p&gt;
&lt;h3&gt;主な二項関係の規則&lt;/h3&gt;
&lt;p&gt;主な二項関係における規則を以下に定義する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="reflexive_relation" class="disabled"&gt;反射律&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  二項関係 &amp;#92;(R\subseteq A\times B&amp;#92;), また &amp;#92;(x\in A\cap B&amp;#92;) があって, &amp;#92;(\left\lt x,x\right\gt\in R&amp;#92;) が存在するとき 
  &amp;#92;(R&amp;#92;) は反射律を満たすという.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 実数の集合 \(\mathbb{R}\) をとってみると, 任意の \(^\forall x\in\mathbb{R}\) に対して \(x\leq x\) であるから \(\leq\) は \(\mathbb{R}\) の下で反射律を満たす.
しかし, \(x\lt x\) は成立しないので, \(\lt\) は \(\mathbb{R}\)&amp;nbsp;の下で反射律を満たさない.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="symmetric_relation" class="disabled"&gt;対象律&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  二項関係 &amp;#92;(R\subseteq A\times B&amp;#92;), また &amp;#92;(x,y\in A\cap B&amp;#92;) があって, &amp;#92;(\left\lt x,y\right\gt\in R&amp;#92;) ならば
  &amp;#92;(\left\lt y,x\right\gt \in R&amp;#92;) が存在するとき, &amp;#92;(R&amp;#92;) は対象律を満たすという.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 実数の集合 \(\mathbb{R}\) をとってみると, 自明な例でいえば, 任意の \(^\forall x,y\in\mathbb{R}\) に対して
\(x=y\) ならば \(y=x\) なので \(=\) は \(\mathbb{R}\) 
の下で対象律を満たす.
しかし, \(x\lt y\) ならば \(y\lt x\) ではないので, \(\lt\) は \(\mathbb{R}\) の下で対象律を満たさない.
また, 別の例として, 例えば平面状のすべての三角形から成る集合 \(A\) と, 相似の関係 \(R\) を組み合わせると \(R\) は
\(A\) 上で対象律を満たす. 
\[R=\left\{\left\lt x,y\right\gt\mid x,y\in A,x\ {\rm と}\ y\ {\rm は相似}\right\}\subseteq A^2\]
なお, これは&lt;a href="#equiv_relation"&gt;同値律&lt;/a&gt;を満たす.&amp;nbsp;対象律の特徴を挙げると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必ずしも \(x=y\)&amp;nbsp;ではない&lt;/li&gt;
&lt;li&gt;真に大きい/小さい関係はあり得ない. \(R\not=\ \prec\) かつ \(R\not=\ \succ\) (すべてのありとあらゆる集合上で \(x\prec y ならば y\not\prec x\)&amp;nbsp;なので)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="antisymmetric_relation" class="disabled"&gt;反対象律&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  二項関係 &amp;#92;(R\subseteq A\times B&amp;#92;), また &amp;#92;(x,y\in A\cap B&amp;#92;) があって, &amp;#92;(\left\lt x,y\right\gt\in R&amp;#92;) に対し 
  &amp;#92;(\left\lt y,x\right\gt\in R&amp;#92;) 
  が存在するならば &amp;#92;(x=y&amp;#92;) のとき, &amp;#92;(R&amp;#92;) は反対象律を満たすという.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 集合 \(A=\left\{a_1,a_2\right\}\) に対して&amp;nbsp;二項関係を:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(R=\left\{\left\lt a_1,a_1\right\gt,\left\lt a_2,a_2\right\gt\right\}\) とおくと, \(R\) は \(A\) 上で (&lt;a href="#symmetric_relation"&gt;対象律&lt;/a&gt;を満たし) 反対象律を満たす.
なお, これは&lt;a href="#equiv_relation"&gt;同値律&lt;/a&gt;を満たす.&lt;/li&gt;
&lt;li&gt;\(R=\left\{\left\lt a_1,a_1\right\gt,\left\lt a_1,a_2\right\gt\right\}\) とおくと,
\(R\) は \(A\) 上で (&lt;a href="#symmetric_relation"&gt;対象律&lt;/a&gt;を満たさないが)&amp;nbsp;反対象律を満たす.&lt;/li&gt;
&lt;li&gt;\(R=\left\{\left\lt a_1,a_2\right\gt,\left\lt a_2,a_1\right\gt\right\}\) とおくと,
\(R\) は \(A\) 上で (&lt;a href="#symmetric_relation"&gt;対象律&lt;/a&gt;を満たすが)&amp;nbsp;反対象律を満たさない.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反対象律の特徴を挙げると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;対象的な二項関係が存在するとき, 必ず&amp;nbsp;\(x=y\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="transitive_relation" class="disabled"&gt;推移律&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  二項関係 &amp;#92;(R\subseteq A\times B&amp;#92;), また &amp;#92;(x,y,z\in A\cap B&amp;#92;) があって, &amp;#92;(\left\lt x,y\right\gt,\left\lt y,z\right\gt\in R&amp;#92;) ならば 
  &amp;#92;(\left\lt x,z\right\gt \in R&amp;#92;) が存在するとき, &amp;#92;(R&amp;#92;) は推移律を満たすという.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 実数の集合 \(\mathbb{R}\) をとってみると, 任意の \(^\forall x,y,z\in\mathbb{R}\) に対して \(x\leq y\) かつ \(y\leq z\) ならば \(x\leq z\) なので 
\(\leq\) は \(\mathbb{R}\) の下で推移律を満たす.
しかし, 例えば自然数の集合 \(\mathbb{N}\)&amp;nbsp;に対して
&lt;/p&gt;
&lt;div class="math"&gt;$$R=\left\{\left\lt a, b\right\gt\mid a,b,c\in\mathbb{N}, a=b^2\ {\rm かつ}\ b=c^2\ {\rm ならば}\ a=c^2\ {\rm を満たす}\right\}\subseteq\mathbb{N}^2$$&lt;/div&gt;
&lt;p&gt; としたとき,
任意の \(x,y\in A\) に対し必ずしも \(\left\lt x,y\right\gt\in R\) が存在するとは限らない (反例: \(16=4^2\) かつ \(4=2^2\) だが \(16\not=2^2\)) ので,
\(R\) は \(\mathbb{N}\)&amp;nbsp;の下で推移律を満たさない.&lt;/p&gt;
&lt;h3&gt;主な二項関係&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="previous_order" class="disabled"&gt;前順序&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  二項関係 &amp;#92;(R&amp;#92;) が集合 &amp;#92;(A&amp;#92;) 上で&lt;a href="#reflexive_relation"&gt;反射律&lt;/a&gt;, &lt;a href="#transitive_relation"&gt;推移律&lt;/a&gt;を同時に満たすとき, &amp;#92;(R&amp;#92;) は &amp;#92;(A&amp;#92;) 上の前順序関係という.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これは要するに, じゃんけんのような, 3 すくみ,
すなわち グー \(\lesssim\) パー \(\lesssim\) チョキ \(\lesssim\) 
グー \(\lesssim\cdots\) といった循環関係がないこと,&amp;nbsp;グラフで表したときに有向非巡回グラフとなることを要請している.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="equiv_relation" class="disabled"&gt;同値&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &lt;a href="#previous_order"&gt;前順序関係&lt;/a&gt; &amp;#92;(R&amp;#92;) が集合 &amp;#92;(A&amp;#92;) 上で&lt;a href="#symmetric_relation"&gt;対象律&lt;/a&gt;を満たすとき, 
  &amp;#92;(R&amp;#92;) は &amp;#92;(A&amp;#92;) 上で同値律を満たすという.
  また:
  &lt;ul&gt;
  &lt;li&gt;&amp;#92;(\left&amp;#92;{y\in X\mid xRy\right&amp;#92;}&amp;#92;) を &amp;#92;(x&amp;#92;) の同値類といい, &amp;#92;(\left[x\right]_R&amp;#92;) や &amp;#92;(\left[x\right]&amp;#92;) と書く.
  このときの &amp;#92;(x&amp;#92;) は, 同値類 &amp;#92;(\left[x\right]&amp;#92;)&amp;nbsp;の代表元という&lt;/li&gt;
  &lt;li&gt;集合 &amp;#92;(A&amp;#92;) 上の同値関係 &amp;#92;(R&amp;#92;) の同値類全体から成る集合 &amp;#92;(\left&amp;#92;{[a]\mid a\in A\right&amp;#92;}&amp;#92;) を商集合といい, 
  &amp;#92;(A/R&amp;#92;)&amp;nbsp;と書く&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;まず自明な例でいえば, &lt;span class="math"&gt;\(=\)&lt;/span&gt; は, 空でない任意の集合上で同値関係にあるといえる.
ほかに, 例えば, 整数の集合 \(\mathbb{Z}\) について \(R\) を整数 \(p\in\mathbb{Z}\) を法とする合同関係 \(\equiv_p\) とおくと, \(R\) は \(\mathbb{Z}\) 上の同値関係となる.
\[R=\equiv_p=\left\{\left\lt m,n\right\gt\mid m,n\in\mathbb{Z}, m {\rm と}\ n\ {\rm は}\ p\ {\rm で割ったときの余りが等しい}\right\}\subseteq\mathbb{Z}^2\]&amp;nbsp;一つ一つ確認してみると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射律: 任意の \(m\in\mathbb{Z}\) に対して \(m-m=0\cdot p\) なので \(m\equiv_p&amp;nbsp;m\)&lt;/li&gt;
&lt;li&gt;推移律: 任意の \(m,n,k\in\mathbb{Z}\) に対して \(m\equiv_p n\) かつ \(n\equiv_p k\) と仮定すると, ある \(d,d&amp;#8217;\in\mathbb{Z}\) に対して \(m-n=d\cdot p\) かつ \(n-k=d&amp;#8217;\cdot p\) で,
このとき \(m-k=\left(m-n\right)+\left(n-k\right)=\left(d+d&amp;#8217;\right)\cdot p\) である. \(d+d&amp;#8217;\in\mathbb{Z}\) なので, \(m\equiv_p&amp;nbsp;k\)&lt;/li&gt;
&lt;li&gt;対象律: 任意の \(m,n\in\mathbb{Z}\) に対して \(m\equiv_p n\) と仮定すると, ある \(d\in\mathbb{Z}\) に対して \(m-n=d\cdot p\) だから \(n-m=(-d)\cdot p\) で,
\(-d\in\mathbb{Z}\) だから \(n\equiv_p&amp;nbsp;m\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と同値律を満たすことがわかる.&lt;/p&gt;
&lt;p&gt;同値類や商集合の例として, 集合 \(X=\left\{1,3,6,10,11,15,16\right\}\subseteq \mathbb{N}\) の要素 \(1\) を代表元とし, 
いまその同値関係を \(5\) を法とした合同&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;で考えると, \(1\) の同値類
\(\left[1\right]_R=\left\{x\mid 1\equiv x\pmod{5}\right\}\) は
\(\left[1\right]_R=\left\{1,6,11,16\right\}\) である&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&amp;nbsp;また,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left[1\right]_R&amp;amp;=&amp;amp;\left\{1,6,11,16\right\}\\\
\left[3\right]_R&amp;amp;=&amp;amp;\left\{3\right\}\\\
\left[6\right]_R&amp;amp;=&amp;amp;\left\{1,6,11,16\right\}\\\
\left[10\right]_R&amp;amp;=&amp;amp;\left\{10,15\right\}\\\
\left[11\right]_R&amp;amp;=&amp;amp;\left\{1,6,11,16\right\}\\\
\left[15\right]_R&amp;amp;=&amp;amp;\left\{10,15\right\}\\\
\left[16\right]_R&amp;amp;=&amp;amp;\left\{1,6,11,16\right\}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;であるので, \(X/R=\left\{\left\{1,6,11,16\right\},\left\{10,15\right\},\left\{3\right\}\right\}\)&amp;nbsp;である.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="ordered_relation" class="disabled"&gt;半順序&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &lt;a href="#previous_order"&gt;前順序関係&lt;/a&gt; &amp;#92;(R&amp;#92;) が集合 &amp;#92;(A&amp;#92;) 
  上で&lt;a href="#antisymmetric_relation"&gt;反対象律&lt;/a&gt;を満たすとき, &amp;#92;(R&amp;#92;) は &amp;#92;(A&amp;#92;) 上の半順序関係という.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 集合族上の包含関係 \(\subset\)&amp;nbsp;は以下の通り半順序である.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{array}{l}
A\subset A\\
A\subset B{\rm\ かつ}\ B\subset A{\rm\ ならば}\ A=B\\
A\subset B{\rm\ かつ}\ B\subset C{\rm\ ならば}\ A\subset C
\end{array}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;半順序集合が定義できれば, (最(大|小),&amp;nbsp;極(大|小))(要素|元)が定義できる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;
  &lt;a name="extremum" class="disabled"&gt;(最(大|小)|極(大|小))(要素|元)&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
半順序集合 &amp;#92;(A&amp;#92;) の要素 &amp;#92;(a_0\in A&amp;#92;) について

&lt;ul&gt;
&lt;li&gt;&amp;#92;(^\exists a\in A\ {\rm s.t.}\ a_0\lesssim a&amp;#92;) なる &amp;#92;(a&amp;#92;) が存在しないとき 
&amp;#92;(a_0&amp;#92;) を &amp;#92;(A&amp;#92;) の最大(要素|元)といい, &amp;#92;(\max A&amp;#92;) と書く.
とくに &amp;#92;(A&amp;#92;) が複素数の部分集合 &amp;#92;(A\subseteq\mathbb{C}&amp;#92;) ならば, &amp;#92;(\max A&amp;#92;)&amp;nbsp;を最大値という&lt;/li&gt;
&lt;li&gt;&amp;#92;(^\exists a\in A\ {\rm s.t.}\ a\lesssim a_0&amp;#92;) なる &amp;#92;(a&amp;#92;) が存在しないとき 
&amp;#92;(a_0&amp;#92;) を &amp;#92;(A&amp;#92;) の最小(要素|元)といい, &amp;#92;(\min A&amp;#92;) と書く.
とくに &amp;#92;(A&amp;#92;) が複素数の部分集合 &amp;#92;(A\subseteq\mathbb{C}&amp;#92;) ならば, &amp;#92;(\min A&amp;#92;)&amp;nbsp;を最小値という&lt;/li&gt;
&lt;/ul&gt;

また &amp;#92;(a\in A&amp;#92;) に対し

&lt;ul&gt;
&lt;li&gt;&amp;#92;(a\gtrsim a_0&amp;#92;) ならば &amp;#92;(a=a_0&amp;#92;) のとき &amp;#92;(a_0&amp;#92;) を &amp;#92;(A&amp;#92;)&amp;nbsp;の極大(要素|元)という&lt;/li&gt;
&lt;li&gt;&amp;#92;(a\lesssim a_0&amp;#92;) ならば &amp;#92;(a=a_0&amp;#92;) のとき &amp;#92;(a_0&amp;#92;) を &amp;#92;(A&amp;#92;)&amp;nbsp;の極小(要素|元)という&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;なお最大値, 最小値あるいは極大値, 極小値を総じて extremum という (&lt;a href="#ref1"&gt;参考文献 1&lt;/a&gt;, &lt;a href="#ref2"&gt;参考文献 2&lt;/a&gt;).
例えば, 自然数全体の集合 \(\mathbb{N}\) の最小要素は \(0\) であるが, 最大要素は存在しない. 
実数全体の集合 \(\mathbb{R}\) には最(大|小)要素が存在しない&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;4&lt;/a&gt;&lt;/sup&gt;.
集合 \(X=\left\{x_1,x_2,x_3\right\}\) に対して順序集合 
\(\left(\wp\left(X\right)-\left\{\emptyset,X\right\},\leq\right)\)&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;5&lt;/a&gt;&lt;/sup&gt; の極大要素は
\(\left\{x_1,x_2\right\},\left\{x_1,x_3\right\},\left\{x_2,x_3\right\}\), 
また極小要素は \(\left\{x_1\right\},\left\{x_2\right\},\left\{x_3\right\}\)&amp;nbsp;である.&lt;/p&gt;
&lt;p&gt;半順序集合が定義できれば,&amp;nbsp;(上|下)(界|限)が定義できる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="upper_least_bound" class="disabled"&gt;(上|下)(界|限)&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
半順序集合 &amp;#92;(\left(\wp\left(X\right),\leq\right)&amp;#92;) の空でない部分集合 &amp;#92;(A\not =\emptyset&amp;#92;) 
の任意の要素 &amp;#92;(a\in A&amp;#92;) に対し,
&lt;ul&gt;
&lt;li&gt;&amp;#92;(^\exists x\in X\ {\rm s.t.}\ a\lesssim x&amp;#92;) なる &amp;#92;(x&amp;#92;) が存在するならば &amp;#92;(A&amp;#92;) は上に有界であるといい, 
&amp;#92;(x&amp;#92;) を &amp;#92;(A&amp;#92;)&amp;nbsp;の上界という.&lt;/li&gt;
&lt;li&gt;&amp;#92;(^\exists x\in X\ {\rm s.t.}\ x\gtrsim a&amp;#92;) なる &amp;#92;(x&amp;#92;) が存在するならば &amp;#92;(A&amp;#92;) は下に有界であるといい, 
&amp;#92;(x&amp;#92;) を &amp;#92;(A&amp;#92;)&amp;nbsp;の下界という.&lt;/li&gt;
&lt;li&gt;&amp;#92;(A&amp;#92;) の上界全体の集合 &amp;#92;(B=\left&amp;#92;{x\in X | a\lesssim x\right&amp;#92;}&amp;#92;) の最小要素 &amp;#92;(\min B&amp;#92;) を &amp;#92;(A&amp;#92;) の上限, 
または最小上界といい, &amp;#92;(\sup A&amp;#92;)&amp;nbsp;と書く.&lt;/li&gt;
&lt;li&gt;&amp;#92;(A&amp;#92;) の下界全体の集合 &amp;#92;(B=\left&amp;#92;{x\in X | x\lesssim a\right&amp;#92;}&amp;#92;) の最大要素 &amp;#92;(\max B&amp;#92;) を &amp;#92;(A&amp;#92;) の下限, 
または最大下限といい, &amp;#92;(\inf A&amp;#92;)&amp;nbsp;と書く.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, 集合 \(X=\left\{1,\frac{1}{2},\frac{1}{3},\frac{1}{4},\cdots\right\}\) について, 
上界および最大値は \(\sup A=\max A=1\), 下界は \(\inf A=0\), 最小値は存在しないといえる.
また, 実数全体の集合 \(R\) の空でない部分集合が(上|下)に有界ならば, その(上|下)限が必ず存在する. 
これは,&amp;nbsp;ワイエルストラスの定理といわれる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="directed_set_def" class="disabled"&gt;有向 (directed) 集合&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
集合 &amp;#92;(A\not=\emptyset&amp;#92;) と&lt;a href="#previous_order"&gt;前順序関係&lt;/a&gt; &amp;#92;(R&amp;#92;) との組 &amp;#92;(\left(A,R\right)&amp;#92;) に対し, 
&amp;#92;(A&amp;#92;) の任意の有限部分集合 &amp;#92;(X\subseteq A&amp;#92;) の上界 &amp;#92;(\sup X\in A&amp;#92;)
が存在するとき, &amp;#92;(A&amp;#92;) を有向 (directed) 集合という.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;有向集合は, &lt;a href="#antisymmetric_relation"&gt;反対象律&lt;/a&gt;を要請されていないので,
必ずしも&lt;a href="#ordered_relation"&gt;半順序&lt;/a&gt;集合とはならないことに注意.
例えば, 集合 \(A=\left\{a_1,a_2,a_3\right\}\) と関係 
\(R=\left\{\left\lt a_1,a_1\right\gt,\left\lt a_1,a_2\right\gt,\left\lt a_1,a_3\right\gt,
\left\lt a_2,a_2\right\gt,\left\lt a_3,a_3\right\gt,\left\lt a_3,a_1\right\gt,\left\lt a_3,a_2\right\gt\right\}\)
の組は, 半順序でない有向集合である
(\(\left\lt a_1,a_3\right\gt,\left\lt a_3,a_1\right\gt\in R\) だが, \(a_1=a_3\)&amp;nbsp;は要請していない).&lt;/p&gt;
&lt;figure style="text-align:center;" id="directed_but_not_poset_fig"&gt;
&lt;img src="../../../../../images/2019/Mar/15/directed_but_not_poset.svg" /&gt;
&lt;figcaption&gt;図 1:  集合 &amp;#92;(A=\left&amp;#92;{a_1,a_2,a_3\right&amp;#92;}&amp;#92;) と関係 
&amp;#92;(R=\left&amp;#92;{\left\lt a_1,a_1\right\gt,
\left\lt a_1,a_2\right\gt,\left\lt a_1,a_3\right\gt,
\left\lt a_2,a_2\right\gt,\left\lt a_3,a_3\right\gt,
\left\lt a_3,a_1\right\gt,\left\lt a_3,a_2\right\gt\right&amp;#92;}&amp;#92;) の有向グラフによる図示&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="upper_least_bound" class="disabled"&gt;全順序&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&lt;a href="#ordered_relation"&gt;半順序関係&lt;/a&gt; &amp;#92;(R&amp;#92;) が集合 &amp;#92;(A&amp;#92;) 上の任意の要素に対して比較可能であるとき, &amp;#92;(R&amp;#92;) は &amp;#92;(A&amp;#92;) 上の全順序関係という.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;任意の全順序集合は有向集合である.
その他, 例えば, 大小関係 \(\leq\) 
は自然数の集合 \(\mathbb{N}\)&amp;nbsp;上で全順序関係である.&lt;/p&gt;
&lt;h3&gt;ハッセ図&lt;/h3&gt;
&lt;p&gt;主に半順序集合の図示の方法としてよく使われるハッセ図について,&amp;nbsp;以下にいくつかの例を示す.&lt;/p&gt;
&lt;p&gt;まずは, 入門書でよく見る例題に習い, 自然数全体の集合 \(\mathbb{N}\) の任意の要素 \(m,n\in\mathbb{N}\) について,
\(m\) が \(n\) を割り切ることを
\(m\mid n\) と書くとき&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;6&lt;/a&gt;&lt;/sup&gt;, 整除関係 \(\mid\) は \(\mathbb{N}\)&amp;nbsp;上の半順序であることに関して考察しよう.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{array}{l}
x\mid x\\
x\mid y{\rm\ かつ}\ y\mid x{\rm\ ならば}\ x=y\\
x\mid y{\rm\ かつ}\ y\mid z{\rm\ ならば}\ x\mid z
\end{array}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;さて, このような一つの有限半順序集合上の関係は, &lt;a href="#directed_but_not_poset_fig"&gt;図 1&lt;/a&gt;
と同様にして, 以下のように有向グラフにより表現できる.
いま, 集合 \(X=\left\{n\mid n\in\mathbb{N}, 1\leq n\leq 10\right\}\) に対する整除関係による順序を \(\ll\) で考えると,
\(x\mid y\) なら \(y\) は必ず \(x\) の後に存在する (\(x\lesssim y\)) ので, 次のような有向非巡回グラフが書ける&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;figure style="text-align:center;"&gt;&lt;img src="../../../../../images/2019/Mar/15/graph.svg" /&gt;
&lt;figcaption&gt;図2: 整除の下で &amp;#92;(\ll&amp;#92;) の関係における &amp;#92;(X&amp;#92;) の有限グラフによる図示&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これをハッセ図では次のように書く.&lt;/p&gt;
&lt;figure style="text-align:center;" id="hasse1"&gt;&lt;img src="../../../../../images/2019/Mar/15/hasse1.svg" /&gt;
&lt;figcaption&gt;図3: 整除の下で &amp;#92;(\ll&amp;#92;) の関係における &amp;#92;(X&amp;#92;) のハッセ図による図示&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;有向グラフが \(x\to y\) というように矢印で順序を表しているのに対して,
ハッセ図では \(y\) を \(x\) よりも高い位置に置いて, それぞれを線で結ぶ.
このときの最小値および下限は \(1\) であり, 上界は \(10,8,6,9\) だが \(10,8,6,9\) を比較不可能であるため,&amp;nbsp;上限は存在しない.&lt;/p&gt;
&lt;p&gt;別の例として, &lt;span class="math"&gt;\(X=\left\{a, b, c, d\right\}\)&lt;/span&gt; とおいたとき, &lt;span class="math"&gt;\(a\lesssim c, a\lesssim d, b\lesssim c, b\lesssim d\)&lt;/span&gt;
という半順序関係にある集合 \(\left(X,\lesssim\right)\) 
を考えると,&amp;nbsp;以下のように示せる.&lt;/p&gt;
&lt;figure style="text-align:center;" id="hasse3"&gt;&lt;img src="../../../../../images/2019/Mar/15/nonsup.svg" /&gt;
&lt;figcaption&gt;図4: 半順序関係 &amp;#92;(a\lesssim c, a\lesssim d, b\lesssim c, b\lesssim d&amp;#92;) のハッセ図による図示&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このときの下界は \(a,b\), 上界は \(c,d\) である.
最小元, 最大元, 下限, 上限は \(a,b\) および \(c,d\)&amp;nbsp;が比較不可能であるため存在しない.&lt;/p&gt;
&lt;p&gt;最後にもう 1 つ, 半順序集合 \(\left(\wp\left(\left\{x_1,x_2,x_3\right\}\right), \subset\right)\) について考えてみる.
先にも示したように, 集合族上の包含関係 \(\subset\) は半順序である. 
\(\emptyset\subset\left\{x_1\right\},\left\{x_1\right\}\subset\left\{x_1,x_2\right\},\cdots\) と考えていくと,&amp;nbsp;ハッセ図は次のようになる.&lt;/p&gt;
&lt;figure style="text-align:center;" id="hasse2"&gt;&lt;img src="../../../../../images/2019/Mar/15/hasse4.svg" /&gt;
&lt;figcaption&gt;図5: 半順序集合 &amp;#92;(\left(\wp\left(\left&amp;#92;{x_1,x_2,x_3\right&amp;#92;}\right), \subset\right)&amp;#92;) 
のハッセ図による図示&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このときの最小元および下限は \(\emptyset\) であり, 最大元および上限は \(\left\{x_1,x_2,x_3\right\}\)&amp;nbsp;である.&lt;/p&gt;
&lt;h3&gt;半順序集合の拡張&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="directet_partial_set_def" class="disabled"&gt;
  有向半順序 (directed partial order) 集合&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &lt;a href="#ordered_relation"&gt;半順序関係&lt;/a&gt; &amp;#92;(R&amp;#92;) と&lt;a href="#directed_set_def"&gt;有向集合&lt;/a&gt; &amp;#92;(A&amp;#92;) の組 
  &amp;#92;(\left(A, R\right)&amp;#92;) に対し &amp;#92;(A&amp;#92;) を有向半順序 dpo (directed partial order) 集合という.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="dcpo_def" class="disabled"&gt;
  有向完備半順序 (directed complete partial order) 集合&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &lt;a href="#ordered_relation"&gt;半順序&lt;/a&gt;集合 &amp;#92;(A&amp;#92;) の任意の有向部分集合 &amp;#92;(X\subseteq A&amp;#92;) について, 
&amp;#92;(X&amp;#92;) の上限 &amp;#92;(\sup X\in A&amp;#92;) が存在するとき, &amp;#92;(A&amp;#92;) を有向完備半順序
dcpo (directed complete partial order) 集合という.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;いま \(X\subseteq A\) を有限有向部分集合としたとき, 
有限半順序集合 \(A\) の部分集合 \(X\) は, \(A\) の半順序関係により必ず有向部分集合となる.
つまり, 有限半順序集合は有向完備半順序集合になる.
従って, &lt;a href="#hasse1"&gt;図 3&lt;/a&gt;, &lt;a href="#hasse3"&gt;図 4&lt;/a&gt;, &lt;a href="#hasse2"&gt;図 5&lt;/a&gt; で示される集合は
dcpo 集合である
(上記の定義のニュアンスとして, 
たまに任意の部分集合が有向部分集合でなければならないと捉えられる場合があるが,
そうではなく,&amp;nbsp;あくまで有向部分集合として構成可能な部分集合のうちという意味合いである).&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="cpo_def" class="disabled"&gt;完備半順序 (complete partial order) 集合&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
次の 2 つの条件を満たす半順序集合 &amp;#92;(A&amp;#92;) を完備半順序集合 cpo (complete partial order) という.
&lt;ol&gt;
&lt;li&gt;&amp;#92;(A&amp;#92;) は &lt;a href="#dcpo_def"&gt;dcpo&lt;/a&gt;&amp;nbsp;集合&lt;/li&gt;
&lt;li&gt;&amp;#92;(A&amp;#92;)&amp;nbsp;は最小元をもつ&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以下にいくつかの例を示す.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hasse1"&gt;図 3&lt;/a&gt; および &lt;a href="#hasse2"&gt;図 5&lt;/a&gt; で示される集合は dcpo でありかつ最小元をもつため cpo だが,
&lt;a href="#hasse4"&gt;図 4&lt;/a&gt; は最小元をもたないため, cpo&amp;nbsp;ではない&lt;/li&gt;
&lt;li&gt;\(\left(\mathbb{N}, \leq\right)\) は, 有向集合として \(\mathbb{N}\subseteq\mathbb{N}\) が取れるが, 
その上限は存在しないので, cpo ではない. 
ここで, \(\infty = \max \mathbb{N}\) となるように拡張した
\(\left(\mathbb{N}\cup\left\{\infty\right\},\leq\right)\) で考えると, cpo&amp;nbsp;になる.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお, cpo は上限をもつ &lt;span class="math"&gt;\(\omega\)&lt;/span&gt;&amp;nbsp;鎖と定義することもできる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="lattice_def" class="disabled"&gt;束&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
二項演算子 &amp;#92;(\land,\lor&amp;#92;)&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;
のもとで閉じている空でない集合 &amp;#92;(L&amp;#92;) の任意の要素 &amp;#92;(x,y,z\in L&amp;#92;) に対して, 次の三つの束の公理
&lt;ol&gt;
&lt;li id="lattice1"&gt;可換律:&amp;#92;(x\land y=y\land x, x\lor y=y\lor&amp;nbsp;x&amp;#92;)&lt;/li&gt;
&lt;li id="lattice2"&gt;結合律:&amp;#92;(\left(x\land y\right)\land z=x\land\left(y\land z\right), 
\left(x\lor y\right)\lor z=x\lor\left(y\lor&amp;nbsp;z\right)&amp;#92;)&lt;/li&gt;
&lt;li id="lattice3"&gt;吸収律:&amp;#92;(x\land\left(x\lor y\right)=x,x\lor\left(x\land&amp;nbsp;y\right)=x&amp;#92;)&lt;/li&gt;
&lt;/ol&gt;
を満たすとき, 集合 &amp;#92;(L&amp;#92;) は束であるといい, &amp;#92;(\left(L,\land,\lor\right)&amp;#92;) と表す. 
ここで &amp;#92;(\lor,\land&amp;#92;) はそれぞれ, 結び, 交わりと言われる.
いま半順序集合 &amp;#92;(S&amp;#92;) の任意の要素 &amp;#92;(a,b&amp;#92;) について, 
上限を &amp;#92;[\sup\left\{a,b\right\}:=\left\{x\mid ^\forall m\in M\left(x\lesssim m\right),x\in M\right\}, 
M=\left\{m\mid a,b\lesssim m,m\in S\right\}&amp;#92;]
下限を &amp;#92;[\inf\left&amp;#92;{a,b\right&amp;#92;}:=\left\{x\mid ^\forall m\in M\left(x\gtrsim m\right),x\in M\right\},
M=\left\{m\mid a,b\gtrsim m,m\in S\right\}&amp;#92;] と書くこととすると,
&amp;#92;(\sup\left&amp;#92;{a,b\right&amp;#92;},\inf\left&amp;#92;{a,b\right&amp;#92;}&amp;#92;) はそれぞれ &amp;#92;(a\lor b,a\land b&amp;#92;) と同値である.
すなわち, 束とは, &amp;#92;(x, y&amp;#92;) 
について上限と下限が存在する半順序集合のことである&lt;sup id="fnref-10"&gt;&lt;a class="footnote-ref" href="#fn-10"&gt;10&lt;/a&gt;&lt;/sup&gt;.
また,

&lt;ul&gt;
&lt;li&gt;束 &amp;#92;(L&amp;#92;) の任意の部分集合が上限と下限をもつとき, 束 &amp;#92;(L&amp;#92;)&amp;nbsp;をとくに完備束&lt;/li&gt;
&lt;li&gt;束の部分集合が束であるとき,&amp;nbsp;その束をとくに部分束&lt;/li&gt;
&lt;li&gt;束 &amp;#92;(L&amp;#92;) の任意の要素 &amp;#92;(^\forall x,y\in L&amp;#92;) について 
&amp;#92;(f\left(x\land y\right)=f\left(x\right)\land f\left(y\right), 
f\left(x\lor y\right)=f\left(x\right)\lor f\left(y\right)&amp;#92;) を満足する単射 
&amp;#92;(f: L_1\to L_2&amp;#92;) が存在するとき束 &amp;#92;(L_1,L_2&amp;#92;)&amp;nbsp;は同型&lt;/li&gt;
&lt;li&gt;束の任意の要素 &amp;#92;(x,y,z&amp;#92;) について &amp;#92;(x\lor\left(y\land z\right)=\left(x\lor y\right)\land\left(x\lor z\right), 
x\land\left(y\lor z\right)=\left(x\land y\right)\lor\left(x\land z\right)&amp;#92;)&amp;nbsp;を満たす束をとくに分配束&lt;/li&gt;
&lt;/ul&gt;

という.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば, &lt;a href="#hasse2"&gt;先の例&lt;/a&gt;でも挙げた \(\left(\wp\left(\left\{x_1,x_2,x_3\right\}\right), \subset\right)\) は束である.
任意の要素として \(\left\{x_1\right\},\left\{x_2\right\}\) をとってみると, 
その上限 \(\sup\left\{\left\{x_1\right\},\left\{x_2\right\}\right\}\) は 
\(\left\{x_1\right\}\subset\left\{x_1,x_2\right\},\left\{x_2\right\}\subset\left\{x_1,x_2\right\}\)
なので, \(\sup\left\{\left\{x_1\right\},\left\{x_2\right\}\right\}=\left\{x_1,x_2\right\}\)&amp;nbsp;である.&lt;/p&gt;
&lt;figure style="text-align:center;" id="hasse3"&gt;&lt;img src="../../../../../images/2019/Mar/15/hasse3.svg" /&gt;
&lt;figcaption&gt;図6:  半順序集合 &amp;#92;(\left(\wp\left(\left&amp;#92;{x_1,x_2,x_3\right&amp;#92;}\right), \subset\right)&amp;#92;) のハッセ図による図示, 
&amp;#92;(\sup\left\{\left\{x_1\right\},\left\{x_2\right\}\right\}&amp;#92;) を強調&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;ハッセ図で考えると, 上方向に辺を辿っていったとき, 各ノードそれぞれが順序比較可能でありかつ最小であるものが上限となる.
同様に,&amp;nbsp;例えば &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\sup\left\{\left\{x_1,x_2\right\},\left\{x_2,x_3\right\}\right\}&amp;amp;=&amp;amp;\left\{x_1,x_2,x_3\right\}\\
\sup\left\{\left\{x_1\right\},\left\{x_2,x_3\right\}\right\}&amp;amp;=&amp;amp;\left\{x_1,x_2,x_3\right\}\\
\sup\left\{\emptyset,\left\{x_1,x_2\right\}\right\}&amp;amp;=&amp;amp;\left\{x_1,x_2\right\}\\
\sup\left\{\emptyset,\emptyset\right\}&amp;amp;=&amp;amp;\emptyset\label{eq:nineth}\tag{9}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる. 最後の \(\eqref{eq:nineth}\) はすべての束の任意の要素について言えることである. 
すなわち任意の束 \(L\) の任意の要素 \(x\in L\) に対して \(\sup\left\{x,x\right\}=x\) である.
これは, 束の公理から導ける,&amp;nbsp;一般にべき等律といわれる定理である.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a name="proof1" class="disabled"&gt;証明&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;\(x,y\in L,z=\left(x\lor y\right)\)&amp;nbsp;に対して&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\sup\left\{x,x\right\}\leftrightarrow x\lor x&amp;amp;=&amp;amp;x\lor\left(x\land\left(x\lor y\right)\right) &amp;amp; \left(\because {\rm \href{#lattice3}{公理3}: 吸収律}\right)\\
&amp;amp;=&amp;amp;x\lor \left(x\land z\right)&amp;amp;\left(\because {\rm \href{#lattice3}{公理3}: 吸収律}\right)\\
&amp;amp;=&amp;amp;x&amp;amp;\left(\because {\rm \href{#lattice3}{公理3}: 吸収律}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\square\)&lt;/p&gt;
&lt;p&gt;ここで一度,&amp;nbsp;上の定理に加えて考察できるいくつかの事項を羅列する.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下限は, 上限の逆順序で定義されるものである. 例えば, \(\inf\left\{\left\{x_1\right\},\left\{x_2\right\}\right\}=\emptyset\)&amp;nbsp;である&lt;/li&gt;
&lt;li&gt;&lt;a name="necessarily_exists_extremum" class="disabled"&gt;完備束&lt;/a&gt; &lt;span class="math"&gt;\(\left(L,\land,\lor\right)\)&lt;/span&gt; の任意の部分集合 &lt;span class="math"&gt;\(S\subseteq L\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(S=\emptyset\)&lt;/span&gt; ならば &lt;span class="math"&gt;\(\sup S=\min L\)&lt;/span&gt;, &lt;span class="math"&gt;\(S=L\)&lt;/span&gt; ならば &lt;span class="math"&gt;\(\sup S=\max D\)&lt;/span&gt;&amp;nbsp;である&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いま, 分配束 \(L\) の最大元, 最小元をそれぞれ \(1,0\) と書くこととする. 束 \(L\) の任意の要素 \(x,y\in L\) について \(x\lor y=1,x\land y=0\) を満足するとき,
\(x\) は \(y\) の補元といい, \(x&amp;#8217;\) または \(\bar{x}\) と書く.
元 \(1,0\) はそれぞれ単位元, 零元である. このときの \(L\) の補元は,&amp;nbsp;唯一に定まる.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;\(x,y\in L\) が \(a\in L\)&amp;nbsp;の二つの補元だと仮定する.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
x&amp;amp;=&amp;amp;x\lor 0\\
&amp;amp;=&amp;amp;x\lor\left(a\land y\right)\\
&amp;amp;=&amp;amp;\left(x\lor a\right)\land\left(x\lor y\right)\\
&amp;amp;=&amp;amp;1\land\left(x\lor y\right)\\
&amp;amp;=&amp;amp;x\land y
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;同様に \(y=x\lor y\) となるから \(x=y\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;束 \(L\) のすべての元が補元をもつとき, \(L\) は可補束, または相補束という.
可補分配束は一般に&lt;a href="https://falgon.github.io/roki.log/posts/2019/%205%E6%9C%88/29/BooleanAlgebra/"&gt;ブール代数&lt;/a&gt;である&lt;sup id="fnref-11"&gt;&lt;a class="footnote-ref" href="#fn-11"&gt;10&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a id="ref1" href="http://mathworld.wolfram.com/Extremum.html"&gt;Extremum - Wolfram MathWorld&lt;/a&gt; 2019/3/15&amp;nbsp;アクセス.&lt;/li&gt;
&lt;li&gt;&lt;a id="ref2" href="https://www.encyclopediaofmath.org/index.php?title=Maximum_and_minimum_of_a_function"&gt;Maximum and minimum of a function - Encyclopedia of Mathematics&lt;/a&gt; 2019/3/15&amp;nbsp;アクセス.&lt;/li&gt;
&lt;li&gt;赤間世紀, 長田康敬, 玉城史朗 (2006)『&lt;a id="ref3" class="disabled"&gt;情報数学入門&lt;/a&gt;』共立出版. &lt;span class="caps"&gt;ISBN&lt;/span&gt;-13:&amp;nbsp;978-4320018143&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Directed complete partial orders&amp;#8221;, &lt;a href="http://math.chapman.edu/~jipsen/structures/doku.php/directed_complete_partial_orders"&gt;http://math.chapman.edu/~jipsen/structures/doku.php/directed_complete_partial_orders&lt;/a&gt; 2020/7/9&amp;nbsp;アクセス.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;例えば \(xy\) 座標平面を \(\mathbb{R}^2\) と書くのは, それが実数二つのペアの集合と考えられるからである.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;任意の整数 \(a,b,c,n\in \mathbb{N}\) に対して &lt;div class="math"&gt;\begin{eqnarray}a\equiv b \pmod n\\\ a\equiv b\pmod n&amp;amp;\rightarrow&amp;amp; b\equiv a\pmod n\\\ a\equiv b, b\equiv c\pmod n &amp;amp;\rightarrow&amp;amp; a\equiv c\pmod n\end{eqnarray}&lt;/div&gt; であることを容易に確かめられる. 従って, 合同は同値関係である.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;これをとくに剰余類という. &lt;span class="caps"&gt;FYI&lt;/span&gt;: &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/13/elgamalEncryption/"&gt;エルガマル暗号, ガロア体のセクションを参照&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;関連: &lt;a href="https://falgon.github.io/roki.log/posts/2018/10%E6%9C%88/04/jacobian/#epsilonDelta-definitionOfLimit"&gt;\(\epsilon-\delta\) 論法&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;ここで, \(\wp\left(A\right)\) は \(\wp\left(A\right):=\left\{Y\mid Y\subseteq A\right\}\) であり, \(A\) の冪集合という. すなわち \(A=\left\{a,b\right\}\) とすると \(\wp\left(A\right)=\left\{\emptyset,\left\{a\right\},\left\{b\right\},\left\{a,b\right\}\right\}\) となる. いまその要素の個数を \(\left|\wp\left(A\right)\right|\) と書くとすると, \(\left|\wp\left(A\right)\right|\) は集合 \(A\) の全要素の全組み合わせであるので \(\left|\wp\left(A\right)\right|={}_3C_0+{}_3C_1+{}_3C_2=7\) となる. 従って, ここで取り上げた例題について丁寧に書き出してみると, \[\wp\left(X\right)-\left\{\emptyset,X\right\}=\left\{X,\left\{x_1,x_2\right\},\left\{x_1,x_3\right\},\left\{x_2,x_3\right\},\left\{x_1\right\},\left\{x_2\right\},\left\{x_3\right\},\emptyset\right\}-\left\{\emptyset,X\right\}\] ということ.&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;\(\mid\) は整数論の界隈で普遍的な記述である. 「割り切れない」も同様にして \(\not\mid\) と書いたりする. &lt;span class="caps"&gt;FYI&lt;/span&gt;: &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/13/elgamalEncryption/"&gt;エルガマル暗号&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;\(1\) と自分自身以外の数で割り切れるかを考える. \(1\) は始点なので, \(1\) のノードへ向けられる辺はないだろう. \(2\) について考えてみると, \(1\mid 2,3\) なら \(1\mid 3\) であるが, \(4\) は \(1\mid 2\mid 4\) である. これを全要素について適用していくと図のようになる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;論理記号とは無関係であることに注意.&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-10"&gt;
&lt;p&gt;半順序集合 \(S\) の任意の要素 \(x, y\) に対して \(\sup\left\{x,y\right\},\inf\left\{x,y\right\}\) が存在すれば, \(x, y\) と順序関係のある \(z\in S\) に対して
&lt;div class="math"&gt;\begin{eqnarray}\sup\left\{x,y\right\}&amp;amp;=&amp;amp;\sup\left\{y,x\right\}\\ \sup\left\{\sup\left\{x,y\right\},z\right\}&amp;amp;=&amp;amp;\sup\left\{x,\sup\left\{y,z\right\}\right\}\\ \sup\left\{x,\inf\left\{x,y\right\}\right\}&amp;amp;=&amp;amp;x\end{eqnarray}&lt;/div&gt; より束の公理を満たす. 双対の原理より双対についても成り立つ.&amp;#160;&lt;a class="footnote-backref" href="#fnref-10" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-11"&gt;
&lt;p&gt;可補束ついて次の性質が成り立つ. &lt;div class="math"&gt;\begin{eqnarray}x''&amp;amp;=&amp;amp;x\\ 0'&amp;amp;=&amp;amp;1\\ 1'&amp;amp;=&amp;amp;0\\ x\lor 0&amp;amp;=&amp;amp;x\\ x\land 0&amp;amp;=&amp;amp;0\\ x\lor 1&amp;amp;=&amp;amp;1\\ x\land 1&amp;amp;=&amp;amp;x\\ \left(x\land y\right)'&amp;amp;=&amp;amp;x'\lor y'\\ \left(x\lor y\right)'&amp;amp;=&amp;amp;x'\land y'\\ x\leq y&amp;amp;\leftrightarrow&amp;amp; y'\leq x'\end{eqnarray}&lt;/div&gt; 面倒なので証明略. &lt;a href="https://falgon.github.io/roki.log/posts/2019/%205%E6%9C%88/29/BooleanAlgebra/"&gt;ブール代数&lt;/a&gt;のエントリにて分配律を用いずに証明しているものがあるので, それで代用できるかと.&amp;#160;&lt;a class="footnote-backref" href="#fnref-11" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category></entry><entry><title>放物運動</title><link href="https://falgon.github.io/roki.log/posts/2019/%203%E6%9C%88/07/ParabMotion/" rel="alternate"></link><published>2019-03-07T00:00:00+09:00</published><updated>2019-03-07T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2019-03-07:/roki.log/posts/2019/ 3月/07/ParabMotion/</id><summary type="html">&lt;p&gt;放物運動に関するまとめと Emscripten&amp;nbsp;を用いたシミュレーション&lt;/p&gt;</summary><content type="html">&lt;p&gt;放物運動に関する復習と再現.&lt;/p&gt;
&lt;h3&gt;等加速度運動をする物体の位置関数の導出&lt;/h3&gt;
&lt;p&gt;時刻 \(t=0\) における物体の位置を &lt;span class="math"&gt;\(\boldsymbol{x_0}\)&lt;/span&gt;, 速度を \(\boldsymbol{v_0}\)
とし, 加速度を考慮しない等速運動の三次元空間上の一点に対する位置関数 \(\boldsymbol{x}(t)\) を
\[\boldsymbol{x}(t)=\boldsymbol{x_0}+\boldsymbol{v_0}t\] とおく.
このとき, 時間 \(t_1\) から \(t_2\) への変化量 \(\boldsymbol{x}(t_2)-\boldsymbol{x}(t_1)\) を \(\Delta t=t_2-t_1\) で割れば,
時間経過に対する物体の位置の対比が得られる.
これは正しく速度のことであるが, これは時間 \(t_1\) に位置 \(\boldsymbol{x}(t_1)\), 時間 \(t_2\) に位置 \(\boldsymbol{x}(t_2)\)
にあった物体の平均速度である. 
いま時間 \(t\) における物体の瞬間速度を知りたいとすると, \(\Delta t\) が微小量となるように極限(\(t_2\to t_1\Leftrightarrow \Delta t\to 0\))を取れば良い.
従って, 物体の瞬間速度の関数 \(\boldsymbol{v}(t)\) を \(\boldsymbol{x}(t)\)&amp;nbsp;の導関数 &lt;/p&gt;
&lt;p&gt;\[\boldsymbol{v}(t)=\dot{\boldsymbol{x}}(t)=\frac{d\boldsymbol{x}(t)}{dt}\]&lt;/p&gt;
&lt;p&gt;でおけることがわかる.
しばしば力学においては, 上のように原始関数の上部に点を記述し, 時間の微分を表現する.
なお, いまは速度を一定としているので \(\boldsymbol{v}(t)=\boldsymbol{v_0}\)&amp;nbsp;である.&lt;/p&gt;
&lt;p&gt;ここで, 物体の運動が加速することを加味するために, 加速度を導入する.
加速度とは, 平均の速度とその所用時間の対比のことであり, 
すなわち \(\frac{\boldsymbol{v}(t_2)-\boldsymbol{v}(t_1)}{\Delta t}\) である.
先と同様, \(\Delta t\to 0\) としていけば, その瞬間の加速度を得ることができるから, 
瞬間加速度の関数 \(\boldsymbol{a}(t)\)&amp;nbsp;は&lt;/p&gt;
&lt;p&gt;\[\boldsymbol{a}(t)=\dot{\boldsymbol{v}}(t)=\ddot{\boldsymbol{x}}(t)=\frac{d^2\boldsymbol{x}(t)}{dt^2}\] &lt;/p&gt;
&lt;p&gt;であり, 結果として 2 次導関数でおかれる.
従って, 一定の加速度 \(\boldsymbol{a}(t)=\boldsymbol{a_0}\) を受けている物体の瞬間速度関数は
\(\boldsymbol{w}(t)=\boldsymbol{v_0}+\boldsymbol{a_0}t\) となるから, 
時刻 \(t_1\) から \(t_2\) 間の移動距離は \(d=\int^{t_2}_{t_1}\boldsymbol{w}(t)dt\) 
であり, 経過時刻 \(t\) に対する物体の移動距離は同様にして 
\[d=\int^t_0\boldsymbol{w}(t)dt=\boldsymbol{v_0}t+\frac{\boldsymbol{a_0}t^2}{2}\]
となる. よって初期位置 \(x_0\) を加えることで等加速度運動をする物体の位置関数 \(\boldsymbol{y}(t)\) が
\[\boldsymbol{y}(t)=\boldsymbol{x_0}+\boldsymbol{v_0}t+\frac{\boldsymbol{a_0}t^2}{2}\label{eq:first}\tag{1}\]&amp;nbsp;と定められる.&lt;/p&gt;
&lt;h3&gt;重力を踏まえた運動&lt;/h3&gt;
&lt;p&gt;重力のみの影響を受ける物体の運動について考える.
三次元空間上の上方向を \(z\) 軸としたとき, 下向きの重力加速度ベクトルは \(\boldsymbol{g}=\left(0,0,-g\right)^T\) である.
これは, 地球上において \(g=9.80665{\rm m/s}^2\) と知られているから, 地球上の質量 \(m\) の物体は下向きに \(m\boldsymbol{g}\)&amp;nbsp;の力を受けていることとなる.&lt;/p&gt;
&lt;p&gt;いま時刻 \(t=0\) における初期位置を \(\boldsymbol{x_0}=\left(x_0,y_0,z_0\right)^T\),
初速度を \(\boldsymbol{v_0}=\left(v_x,v_y,v_z\right)^T\) としたとき, 物体 \(P\) の位置は \(\eqref{eq:first}\) より
\[\boldsymbol{x}(t)=\boldsymbol{x_0}+\boldsymbol{v_0}t+\frac{\boldsymbol{g}t^2}{2}\label{eq:second}\tag{2}\]
である. また, 初速度 \(\boldsymbol{v_0}\) の各成分は, \(x\) 方向に発射速度 \(v\) で発射されるとしたとき,
三角関数を思い出せば, \(\boldsymbol{v_0}=\left(v\cos\theta,0,v\sin\theta\right)^T\)&amp;nbsp;であることがいえる.&lt;/p&gt;
&lt;h4&gt;到達高度に達するとき,&amp;nbsp;到達高度&lt;/h4&gt;
&lt;p&gt;いま物体 \(P\) が到達高度に達するときと, その高度について考える.
到達高度に達するときとは, 垂直方向の速度が \(0\) であるときなので, 
物体 \(P\) の時刻 \(t\) における \(z\) 成分を \(\eqref{eq:second}\) より
\[z(t)=z_0+v_zt-\frac{gt^2}{2}\label{eq:third}\tag{3}\] とおくと,&amp;nbsp;次のように微分方程式で表現できる.&lt;/p&gt;
&lt;p&gt;\[\dot{z}(t)=v_z-gt=0\Leftrightarrow&amp;nbsp;t=\frac{v_z}{g}\label{eq:fourth}\tag{4}\]&lt;/p&gt;
&lt;p&gt;後はこの \(t\) を \(z(t)\)&amp;nbsp;に代入すれば&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
h&amp;amp;=&amp;amp;z_0+v_z\frac{v_z}{g}-\frac{g}{2}\left(\frac{v_z}{g}\right)^2\\\
&amp;amp;=&amp;amp;z_0+\frac{v_z^2}{g}-\frac{v_z^2}{2g}\\\
&amp;amp;=&amp;amp;z_0+\frac{v_z^2}{2g}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と到達高度 \(h\) が求まる.
また, 到達高度を \(h\) にするための発射角度 \(\theta\) は上式より \(h=\frac{\left(v\sin\theta\right)^2}{2g}\) だから
\[\sin^2\theta=\frac{2gh}{v^2}\Leftrightarrow\sin\theta=\frac{\sqrt{2gh}}{v}\Leftrightarrow\theta=\sin^{-1}\frac{\sqrt{2gh}}{v}\]&amp;nbsp;と求まる.&lt;/p&gt;
&lt;h4&gt;到達距離&lt;/h4&gt;
&lt;p&gt;水平面 \(z_0=0\) から物体 &lt;span class="math"&gt;\(P\)&lt;/span&gt; が発射されたときを考える. 
発射されてから地面につく時刻 \(t\) は \(\eqref{eq:third}\) より 
\[v_zt-\frac{gt^2}{2}=t\left(v_z-\frac{gt}{2}\right)=0\Leftrightarrow t=0, \frac{2v_z}{g}\]
であり, 発射した時刻と地面につく時刻の解が得られた.
いま関心があるのは \(\frac{2v_z}{g}\) であるが, これは \(\eqref{eq:fourth}\) の &lt;span class="math"&gt;\(2\)&lt;/span&gt; 倍, 
すなわち到達高度に達する時間の &lt;span class="math"&gt;\(2\)&lt;/span&gt; 倍の時間をかければ地面につくという,
左右対称の扇型の放物線運動を思い浮かべれば,&amp;nbsp;当然と思える結果が導けた.&lt;/p&gt;
&lt;p&gt;従って, 物体 &lt;span class="math"&gt;\(P\)&lt;/span&gt; が原点から \(x\) 軸方向に発射されたとすると,
到達距離 \(l\) は \(x\)&amp;nbsp;方向の移動距離に等しいから&lt;/p&gt;
&lt;p&gt;\[l=v_x\frac{2v_z}{g}\]&lt;/p&gt;
&lt;p&gt;となる.
また, 到達距離を \(l\) にするための発射角度 \(\theta\)&amp;nbsp;は上式より &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
l&amp;amp;=&amp;amp;\frac{2\left(v\cos\theta\right)\left(v\sin\theta\right)}{g}\\\
&amp;amp;=&amp;amp; \frac{2v^2}{g}\sin\theta\cos\theta\\\
&amp;amp;=&amp;amp; \frac{v^2\sin2\theta}{g}\ \left(\because\ 2{\rm 倍角の公式:}\ 2\sin\theta\cos\theta=\sin2\theta\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;だから \[\theta=\frac{1}{2}\sin^{-1}\frac{lg}{v^2}\]
ただし, \(\sin\left(\pi-\theta\right)=\sin\theta\) より 
\(\sin2\theta=\sin\left(\pi-2\theta\right)=\sin2\left(\frac{\pi}{2}-\theta\right)\) とすると,
\(\frac{\pi}{2}-\theta\) でも同一の到達距離 \(l\) となることがわかる. すなわち, 2&amp;nbsp;つの到達の解があることとなる.&lt;/p&gt;
&lt;h3&gt;放物運動のシミュレート&lt;/h3&gt;
&lt;p&gt;ここまで示した内容で, 重力のみが考慮された簡単な物体の放物運動について&lt;em onclick="obj=document.getElementById('openscsim').style; obj.display=(obj.display=='none')?'block':'none';"&gt;&lt;a style="font-style: normal; cursor:pointer;"&gt;シミュレートできる(クリックで展開).&lt;/a&gt;&lt;/em&gt;
&lt;div id="openscsim" style="display:none;clear:both;width:100%;text-align:center;"&gt;
&lt;canvas style="display: inline;" id="canvas" oncontextmenu="event.preventDefault()"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;
var Module = {
    canvas: (function() { return document.getElementById('canvas'); })()
};
Module['locateFile'] = function(path, prefix) {
    return "/roki.log/images/2019/Mar/7/" + path;
}
&lt;/script&gt;
&lt;script src="../../../../../images/2019/Mar/7/parabsbc.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;C++ と &lt;span class="caps"&gt;SDL2&lt;/span&gt; で書いたものを emscripten で Web Assembly にしているので, 恐らく古いブラウザでは動かないだろう.
操作感でわかると思うが, 初速の指定はボールとのユークリッド距離を元に決めている.
このときのボールの回転角度は, arctan&amp;nbsp;の定義そのものである.&lt;/p&gt;
&lt;p&gt;一応全体のソースコードは,&amp;nbsp;次のリポジトリにて公開している.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;
&lt;i class="fab fa-github" style="font-size: large; margin-right: 5px;"&gt;&lt;/i&gt;
&lt;a href="https://github.com/falgon/sdl2_wasm_parabolic"&gt;falgon/sdl2_wasm_parabolic - For blog&amp;nbsp;posts&lt;/a&gt;
&lt;/p&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="physics"></category><category term="emscripten"></category><category term="C++"></category></entry><entry><title>最小二乗法で始めるカーブフィッティング</title><link href="https://falgon.github.io/roki.log/posts/2019/%201%E6%9C%88/03/leastSquares/" rel="alternate"></link><published>2019-01-03T00:00:00+09:00</published><updated>2019-01-03T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2019-01-03:/roki.log/posts/2019/ 1月/03/leastSquares/</id><summary type="html">&lt;p&gt;カーブフィッティング全般に関する学習メモと実装&lt;/p&gt;</summary><content type="html">&lt;h3&gt;要旨&lt;/h3&gt;
&lt;p&gt;本エントリー(&lt;span class="caps"&gt;WIP&lt;/span&gt;)はカーブフィッティング全般に関して記述したものであり,
それぞれの原理, 性質について学んだ際のメモとして, より単純なものから広く浅く挙げています.
極力ないようにはしていますが, 本内容は独学で得た知見より書いておりますので,
一部正確さが欠けている可能性があることは否めません.
何かありましたら, コメント等で指摘していただけるとありがたいです.
また,&amp;nbsp;本エントリ内における近似およびプロット等に関する実装は次のリポジトリ&lt;/p&gt;
&lt;p style="text-align: center;"&gt;
&lt;i class="fab fa-github" style="font-size: large; margin-right: 5px;"&gt;&lt;/i&gt;
&lt;a href="https://github.com/falgon/PlayLinearAlgebra"&gt;falgon/PlayLinearAlgebra - My playground about linear albebra: &lt;span class="caps"&gt;LU&lt;/span&gt; decomposition, pseudo inverse, least squared method,&amp;nbsp;etc&amp;#8230;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;にまとまっています.&lt;/p&gt;
&lt;h3&gt;線形回帰&lt;/h3&gt;
&lt;p&gt;まずは, 回帰解析のうち最も基本的な手法である最小二乗法について.
次のような散布図&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;を考える.&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/October/20/data.png" alt="dataset figure" width="600px"&gt;&lt;/p&gt;

&lt;p&gt;このデータセットは, &lt;a href="https://en.wikipedia.org/wiki/Mile_run"&gt;マイルラン&lt;/a&gt;という中距離マラソンにおける男子世界記録の遷移を表しており,
横軸が世界記録を更新した年, 縦軸がその記録の秒数となっている.
この散布図は負の相関関係があるといえる.
まあ, 記録の更新というのは, ゴールするまでのタイムが縮んだということをいうので,&amp;nbsp;これは当たり前の相関関係である.&lt;/p&gt;
&lt;p&gt;このような直線的な関係があるようにみえるような散布について,
それなりにそれらの点に相応しいような直線,
つまり各点からの距離が最も小さくなるような直線を引きたいとしよう.&amp;nbsp;これが本エントリにおける主題である.&lt;/p&gt;
&lt;h4&gt;線形最小二乗法&lt;/h4&gt;
&lt;p&gt;最小二乗法は, 上記のようなデータの組 &lt;span class="math"&gt;\(\left(x_i,y_i\right)\)&lt;/span&gt; が \(n\) 組与えられたとき(\(x_i\) の全てが等しい場合を除いて)に, 
それらの点に相応しい関数 \[y_i=a_i+a_ix^1_1+\cdots+a_ix^n_i\label{eq:ffirst}\tag{i}\] の係数(傾きと切片)を決定する方法である(定義式は \(\eqref{eq:eleventh}\)). 
なお, このときの線形性とは, 係数 \(a_k\) の線形性を意味しており, すなわち応答変数 \(y\) は係数 \(a_k\) の線形関数を表している.
まずは最もシンプルな例として, 回帰モデルを \(y=ax+b\) として考えると, これに対する線形最小二乗法は,&amp;nbsp;簡単に導出できる:&lt;/p&gt;
&lt;p&gt;ある点 \(\left(x_i, y_i\right)\) とモデルとなる直線の誤差, 
すなわち偏差は \(y_i-\left(ax_i+b\right)\) とかける.
このとき, 各点からの距離が最小であってほしいのだから,
まず総和を \[\epsilon(a,b):=\displaystyle\sum^{n}_{i=1}\left(y_i-ax_i-b\right)^2\label{eq:first}\tag{1}\]
とおくこととする. 
いまここで二乗したのは, モデルとなる直線よりも下に点があった場合, 符号が負となり,
これが誤差を相殺してしまったり, 値を負にしてしまうからである.
絶対値を用いないのは,&amp;nbsp;後の微分計算を可能にするためである.&lt;/p&gt;
&lt;p&gt;さて, いま \(\eqref{eq:first}\) の最小値を求めたいわけだが, 
簡単のためにここでまず \(b\) を固定したと考える. 
すると, \(\eqref{eq:first}\) は単なる \(a\) の二次関数と捉えることができる.
その係数 \(\displaystyle\sum^{n}_{i=1}x_i^2\) は正であるので, 
この二次関数は, 下に凸の放物線を描くことがわかる.
よってこの二次関数の最小値は, 接線の傾きを \(0\) とした値をとることがいえるので,&amp;nbsp;それを&lt;/p&gt;
&lt;p&gt;\[\frac{\partial\epsilon(a,b)}{\partial&amp;nbsp;a}=0\]&lt;/p&gt;
&lt;p&gt;とかける. 同様に, \(a\) を固定したと考えれば, 係数は \(n\) でこれは正であるから,
これも下に凸の放物線を描くことがわかる.&amp;nbsp;つまりこの場合の最小値も,&lt;/p&gt;
&lt;p&gt;\[\frac{\partial\epsilon(a,b)}{\partial&amp;nbsp;b}=0\]&lt;/p&gt;
&lt;p&gt;とかける. いま求めたかったのはこのどちらをも満たす \(a,b\) であるので,
これらの連立方程式を解けば良いこととなる. 従って \(\eqref{eq:first}\)&amp;nbsp;より&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;&amp;amp;\begin{cases}
&amp;amp;\displaystyle\frac{\partial\epsilon(a,b)}{\partial a}&amp;amp;=&amp;amp;\displaystyle\sum_{i=1}^{n}2\left(y_i-(ax_i+b)\right)\cdot(-x_i)&amp;amp;=&amp;amp;0 \\\
&amp;amp;\displaystyle\frac{\partial\epsilon(a,b)}{\partial b}&amp;amp;=&amp;amp;\displaystyle\sum_{i=1}^{n}2\left(y_i-(ax_i+b)\right)&amp;amp;=&amp;amp;0
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;このような, 線形方程式におけるすべての定数項が &lt;span class="math"&gt;\(0\)&lt;/span&gt; であるものを同次線形系(英:homogeneous linear system)という. この両辺を \(2\)&amp;nbsp;で割って,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;\leftrightarrow
&amp;amp;\begin{cases}
&amp;amp;\displaystyle\sum_{i=1}^{n}\left(y_i-(ax_i+b)\right)\cdot x_i&amp;amp;=&amp;amp;0 \\\
&amp;amp;\displaystyle\sum_{i=1}^{n}\left(y_i-(ax_i+b)\right)&amp;amp;=&amp;amp;0
\end{cases} \\\
&amp;amp;\leftrightarrow
&amp;amp;\begin{cases}
&amp;amp;\displaystyle a\sum_{i=1}^{n}x^2_i&amp;amp;+&amp;amp;\displaystyle b\sum_{i=1}^{n}x_i&amp;amp;=&amp;amp;\displaystyle\sum_{i=1}^{n}x_i y_i \\\
&amp;amp;\displaystyle a\sum_{i=1}^{n}x_i&amp;amp;+&amp;amp;bn&amp;amp;=&amp;amp;\displaystyle\sum_{i=1}^{n}y_i 
\end{cases}
\label{eq:second}\tag{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;両辺を \(n\)&amp;nbsp;で割って,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;\leftrightarrow
&amp;amp;\begin{cases}
&amp;amp;\displaystyle a\frac{\sum_{i=1}^{n}x^2_i}{n}&amp;amp;+&amp;amp;\displaystyle b\frac{\sum_{i=1}^{n}x_i}{n}&amp;amp;=&amp;amp;\displaystyle\frac{\sum_{i=1}^{n}x_i y_i}{n} \\\
&amp;amp;\displaystyle a\frac{\sum_{i=1}^n x_i}{n}&amp;amp;+&amp;amp;b&amp;amp;=&amp;amp;\frac{\sum_{i=1}^ny_i}{n}
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで, \(\frac{\sum_{i=1}^n x_i}{n}\) は \(x\) の総和をその個数で割っているので
\(x\) の平均,
\(\frac{\sum_{i=1}^ny_i}{n}\) は \(y\) の総和をその個数で割っているので 
\(y\) の平均であるから,
\(\overline{x}=\frac{\sum_{i=1}^{n}x_i}{n}, \overline{y}=\frac{\sum_{i=1}^ny_i}{n},
\overline{x^2}=\frac{\sum_{i=1}^{n}x_i^2}{n}, 
\overline{xy}=\frac{\sum_{i=1}^{n}x_i y_i}{n}\) と平均の記号を用いて書くことができる.
よって, \(b=-a\overline{x}+\overline{y}\) を代入すれば \(a\) も求まるわけだが,&amp;nbsp;一旦これを行列で表現すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{cc}
\overline{x^2} &amp;amp; \overline{x} \\\ \overline{x} &amp;amp; 1
\end{array}\right)
\left(\begin{array}{c}
a \\\ b
\end{array}\right)
&amp;amp;=&amp;amp;
\left(\begin{array}{c}
\overline{xy} \\\
\overline{y}
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;左辺の行列の行列式 &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
{\rm det}\left(\begin{array}{cc}
\overline{x^2} &amp;amp; \overline{x} \\\ \overline{x} &amp;amp; 1
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;は, \(x_i\) がすべて等しくない限り \(0\) とはならない. 
いまはそのような場合を除いているから,&amp;nbsp;同行列は正則で&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{c}
a \\\ b
\end{array}\right)
&amp;amp;=&amp;amp;\left(\begin{array}{cc}
\overline{x^2} &amp;amp; \overline{x} \\\ \overline{x} &amp;amp; 1
\end{array}\right)^{-1}
\left(\begin{array}{c}
\overline{xy} \\\
\overline{y}
\end{array}\right) 
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;より \(\left(a\ b\right)^T\)&amp;nbsp;は&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;=&amp;amp;\left(\begin{array}{c}
\frac{\overline{xy}-\overline{x}\cdot\overline{y}}{\overline{x^2}-\overline{x}^2} \\\
\frac{\overline{x^2}\cdot\overline{y}-\overline{xy}\cdot\overline{x}}{\overline{x^2}-\overline{x}^2}
\end{array}\right)\label{eq:third}\tag{3}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と求まる.  ここで, \(\overline{xy}-\overline{x}\cdot\overline{y}\) は共分散,
\(\overline{x^2}-\overline{x}^2\) は分散の形になっているので, \(a\) は \(\frac{\mathrm{Cov}(x,y)}{\sigma_x^2}\) とまとめることができ, よくみる最小二乗法の定義式の形となった.
実際にプログラムにすることを考えるときは, 平均などはどうでもよくて,
単に \(\eqref{eq:third}\) の各項に \(n\) を乗じた形で計算すればよい.&amp;nbsp;つまり,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\eqref{eq:second}&amp;amp;\leftrightarrow&amp;amp;
\left(\begin{array}{cc}
\displaystyle \sum_{i=1}^{n}x^2_i &amp;amp;\displaystyle \sum_{i=1}^{n}x_i \\\
\displaystyle \sum_{i=1}^{n}x_i &amp;amp;n
\end{array}\right)
\left(\begin{array}{c}
a \\\ b
\end{array}\right)&amp;amp;=&amp;amp;
\left(\begin{array}{c}
\displaystyle\sum_{i=1}^{n}x_i y_i \\\ \displaystyle\sum_{i=1}^{n}y_i 
\end{array}\right)
\\\ 
&amp;amp;\leftrightarrow&amp;amp;
\left(\begin{array}{c}
a \\\ b
\end{array}\right)&amp;amp;=&amp;amp;
\left(\begin{array}{cc}
\displaystyle \sum_{i=1}^{n}x^2_i &amp;amp;\displaystyle \sum_{i=1}^{n}x_i \\\
\displaystyle \sum_{i=1}^{n}x_i &amp;amp;n
\end{array}\right)^{-1}
\left(\begin{array}{c}
\displaystyle\sum_{i=1}^{n}x_i y_i \\\ \displaystyle\sum_{i=1}^{n}y_i 
\end{array}\right) \\\
&amp;amp;&amp;amp;&amp;amp;=&amp;amp;\left(\begin{array}{c}
\frac{\left(\sum^n_{i=1}x_iy_i\right) n-\left(\sum^n_{i=1}x_i\right)\left(\sum^n_{i=1}y_i\right)}{\left(\sum^n_{i=1}x^2_i\right) n-\left(\sum^n_{i=1}x_i\right)^2} \\\
\frac{\left(\sum^n_{i=1}x^2_i\right)\left(\sum^n_{i=1}y_i\right)-\left(\sum^n_{i=1}x_iy_i\right)\left(\sum^n_{i=1}x_i\right)}{\left(\sum^n_{i=1}x^2_i\right) n-\left(\sum^n_{i=1}x_i\right)^2}
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;である. これを用いて,&amp;nbsp;次のように近似できる.&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/October/20/lenarEquations.png" alt="lenear equations" width="600px"&gt;
&lt;/p&gt;

&lt;p&gt;というのが, 最も素朴な最小二乗法の例である&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. 
より一般に, \(y\) が \(m\) 次の多項式 \(\displaystyle f(x)=b+\sum_{j=1}^{m}a_j x^{j}\) 
として表されるような場合についても, 同様にしていうことができる.
この場合,&amp;nbsp;偏差の二乗和は,&lt;/p&gt;
&lt;p&gt;\[\displaystyle\epsilon=\sum^{n}_{i=1}\left(y_i-b-\sum_{j=1}^{m}a_j&amp;nbsp;x^{j}\right)^2\label{eq:fourth}\tag{4}\]&lt;/p&gt;
&lt;p&gt;先と同様, 各変数ごとの偏微分が \(0\)&amp;nbsp;となる連立方程式を解けば良いから,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{cases}
&amp;amp;\displaystyle\frac{\partial\epsilon}{\partial b}&amp;amp;=&amp;amp;\displaystyle-\sum_{i=1}^{n}2\left(y_i-b-\sum_{j=1}^{m}a_j x^{j}\right)&amp;amp;=&amp;amp;0 \\\
&amp;amp;\displaystyle\frac{\partial\epsilon}{\partial a_1}&amp;amp;=&amp;amp;\displaystyle-\sum_{i=1}^{n}2x_i\left(y_i-b-\sum_{j=1}^{m}a_j x^{j}\right)&amp;amp;=&amp;amp;0 \\\
&amp;amp;&amp;amp;&amp;amp;\vdots&amp;amp; \\\
&amp;amp;\displaystyle\frac{\partial\epsilon}{\partial a_m}&amp;amp;=&amp;amp;\displaystyle-\sum_{i=1}^{n}2x^m_i\left(y_i-b-\sum_{j=1}^{m}a_j x^{j}\right)&amp;amp;=&amp;amp;0 
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;先の例に合わせて, 両辺を \(2n\) で割った行列とすると,&amp;nbsp;平均の記号を用いて&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{cccc}
1 &amp;amp; \overline{x} &amp;amp; \cdots &amp;amp; \overline{x^m} \\\
\overline{x} &amp;amp; \overline{x^2} &amp;amp; \cdots &amp;amp; \overline{x^{m+1}} \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
\overline{x^m} &amp;amp; \overline{x^{m+1}} &amp;amp; \cdots &amp;amp; \overline{x^{2m}}
\end{array}\right)
\left(\begin{array}{c}
b \\\ a_1 \\\ \vdots \\\ a_m
\end{array}\right)=
\left(\begin{array}{c}
\overline{y} \\\
\overline{xy} \\\
\vdots \\\
\overline{x^my}
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;なので,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{c}
b \\\ a_1 \\\ \vdots \\\ a_m
\end{array}\right)&amp;amp;=&amp;amp;
\left(\begin{array}{cccc}
1 &amp;amp; \overline{x} &amp;amp; \cdots &amp;amp; \overline{x^m} \\\
\overline{x} &amp;amp; \overline{x^2} &amp;amp; \cdots &amp;amp; \overline{x^{m+1}} \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
\overline{x^m} &amp;amp; \overline{x^{m+1}} &amp;amp; \cdots &amp;amp; \overline{x^{2m}}
\end{array}\right)^{-1}
\left(\begin{array}{c}
\overline{y} \\\
\overline{xy} \\\
\vdots \\\
\overline{x^my}
\end{array}\right) \\\
&amp;amp;=&amp;amp;\left(\begin{array}{cccc}
n &amp;amp; \displaystyle\sum^{n}_{i=1}x_i &amp;amp; \cdots &amp;amp; \displaystyle\sum^{n}_{i=1}x^m_i \\\
\displaystyle\sum^{n}_{i=1}x_i &amp;amp; \displaystyle\sum^{n}_{i=1}x_i^2 &amp;amp; \cdots &amp;amp; \displaystyle\sum^{n}_{i=1}x_i^{m+1} \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
\displaystyle\sum^{n}_{i=1}x_i^m &amp;amp; \displaystyle\sum^{n}_{i=1}x_i^{m+1} &amp;amp; \cdots &amp;amp; \displaystyle\sum^{n}_{i=1}x_i^{2m}
\end{array}\right)^{-1}
\left(\begin{array}{c}
\displaystyle\sum^n_{i=1}y_i \\\ \displaystyle\sum^n_{i=1}x_iy_i \\\ \vdots \\\ \displaystyle\sum^n_{i=1}x_i^my_i
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;で求まる. 
この正確な解を機械的に求める場合には,
この逆行列を求めなくとも,&amp;nbsp;ガウスの消去法などを基本とした解法(直接解法)で解ける.&lt;/p&gt;
&lt;p&gt;先のデータは直線的であったので, 今度は曲線が引けそうなデータセットとして, \(x_i=i-1, y_i=\sin(x_i)+\epsilon, i=1,2,\cdots,11\) に対し, フィッティングを試行してみる事とする.
ここで \(\epsilon\) は \(\mathrm{N}(0, 0.2)\) の正規分布に従う確率変数である.
次のアニメーションでは, 次数 \(1\leq m\leq 9\) に応じた近似の遷移を観察できる(&lt;span class="caps"&gt;LU&lt;/span&gt; 分解による計算 \(\to\) &lt;a href="https://falgon.github.io/roki.log/posts/2019/%201%E6%9C%88/01/LUDecomposition/"&gt;解説&lt;/a&gt;).&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/October/20/out.gif" alt="lenear equations" width="600px"&gt;
&lt;/p&gt;

&lt;p&gt;ところで, 冒頭で示した関数 \(\eqref{eq:ffirst}\) の線形回帰モデルは,&amp;nbsp;次のように表すことができる.&lt;/p&gt;
&lt;p&gt;\[y_i=a_0+\sum^m_{j=1}a_jf_j(x_i^1,x_i^2,\cdots,x_i^n)+u_i,\&amp;nbsp;i=1,\cdots,m\label{eq:ssecond}\tag{ii}\]&lt;/p&gt;
&lt;p&gt;ここで, \(f_j\) は独立変数 \(x_{i}^k\) のスカラー関数, \(u_i\) は \(i\) 番目のノイズ項(確率変数)である.
線形最小二乗法は, 単にすべてのデータ値に対する偏差の二乗和を最小化する. すなわち, データに関わらず全ての値が同じように扱われる.
これは, すべてのノイズ項 \(u_i\) の確率分布が同一であると仮定することと同値であり,
従って, すべての \(u_i\) は無相関かつ &lt;a href="https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#iid"&gt;i.i.d&lt;/a&gt; で
\(\mathrm{N}\left(0,\sigma^2\right)\) (標準正規分布) に従うことを前提としているといえる&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;一般逆行列&lt;/h4&gt;
&lt;p&gt;ここまでは, 回帰直線の考え方に沿って近似曲線/直線を得た訳であるが, 
そもそも, \((x_i,y_i)\) の組があって線形方程式 \(y\) の \(x\) 
に関する関数における&amp;#8221;適当な&amp;#8221;係数が&amp;#8221;直接&amp;#8221;求まるような行列があれば良いのではないだろうか. 
つまり \(m\) を方程式の個数, \(n&amp;#8217;=n+1\) を未知数の個数とし, \(X\boldsymbol{a}=\boldsymbol{y}\ \ {\rm where}\ X\in\mathbb{R}^{m\times n&amp;#8217;}, \boldsymbol{a}\in\mathbb{R}^{n&amp;#8217;\times 1}, \boldsymbol{y}\in\mathbb{R}^{m\times 1}\)&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt; としたとき&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{c}
y_1 \\\
y_2 \\\
\vdots \\\
y_m
\end{array}\right)=
\left(\begin{array}{cccc}
x_1^0 &amp;amp; x_1^1 &amp;amp; \cdots &amp;amp; x_1^n \\\
x_2^0 &amp;amp; x_2^1 &amp;amp; \cdots &amp;amp; x_2^n \\\
\vdots  &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
x_m^0 &amp;amp; x_m^1 &amp;amp;\cdots &amp;amp; x_m^n
\end{array}\right)
\left(\begin{array}{c}
a_0 \\\
a_1 \\\
\vdots \\\
a_n
\end{array}\right) \\\
\left(\begin{array}{cccc}
x_1^0 &amp;amp; x_1^1 &amp;amp; \cdots &amp;amp; x_1^n \\\
x_2^0 &amp;amp; x_2^1 &amp;amp; \cdots &amp;amp; x_2^n \\\
\vdots  &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
x_m^0 &amp;amp; x_m^1 &amp;amp;\cdots &amp;amp; x_m^n
\end{array}\right)^{-1}
\left(\begin{array}{c}
y_1 \\\
y_2 \\\
\vdots \\\
y_m
\end{array}\right)
=
\left(\begin{array}{c}
a_0 \\\
a_1 \\\
\vdots \\\
a_n
\end{array}\right)\label{eq:fifth}\tag{5}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;を解いて, それが求まれば良いのではないか, 
ということである(\(n+1\) と \(m\) は必ずしも等しくないことに注意&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;). このときに考えられるパターンは,&amp;nbsp;次のとおりである:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;\(n&amp;#8217;=m\) かつそのランク \({\rm rank}(X)\) が \(n&amp;#8217;=m\)(フルランク)ならば, \(X\) は正則である. 従って, \(X^{-1}X\boldsymbol{a}=X^{-1}\boldsymbol{y}\)&amp;nbsp;として解が求まる. &lt;/li&gt;
&lt;li&gt;\(n&amp;#8217;\lt m\) かつそのランクが \(n&amp;#8217;\)(列フルランク)ならば, すべての方程式を満たすような解が存在しないことがいえる.  これは, すべての方程式をそれぞれ直線と捉えたときに, それらすべての交点となる一点が存在しないことをイメージするとわかりやすい. 要するに, \(\boldsymbol{a}\) に対する \(X\) と \(\boldsymbol{y}\) の制約が相互的に成立しないのである. ここで \({\rm rank}(X)\lt n&amp;#8217;\)(ランク落ち)ならば,&amp;nbsp;方程式のどこかに重複がある. &lt;/li&gt;
&lt;li&gt;\(m\lt n&amp;#8217;\) かつそのランクが \(m\)(行フルランク)ならば, 解が一意とならないことがいえる. これも, 方程式を直線に捉えると, \(\boldsymbol{a}\) に対する制約が足りないことで, 方程式で構成される直線上のすべてが解となりうることから納得できる. ここで \({\rm rank}(X)\lt m\)(ランク落ち)ならば,&amp;nbsp;方程式のどこかに重複がある. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いま 2 つの重複がある場合を考えることができたが, 重複を除けば, いま述べたうちのどれかに帰着させることができる.
重複の場合を直線で捉えると, それぞれの方程式が \(x, y\) の関係に関して全く異なる解を示しているということなので,&amp;nbsp;それぞれの直線は平行の関係にあることとなる.&lt;/p&gt;
&lt;p&gt;まとめると, つまり \(X\boldsymbol{a}=\boldsymbol{y}\) というように表される線形方程式には, 以上の 3 つのパターン(重複について考えれば 4 パターン)があることがわかる.
これらのすべてのパターンに対して&amp;#8221;適当であるような&amp;#8221;解を与える逆行列を考えれば, どのような方程式にも&amp;#8221;適当であるような&amp;#8221;解を与えることができる.
このように,&amp;nbsp;正則でない行列に対する擬似的な逆行列の定義を一般逆行列という.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading def"&gt;&lt;a name="GeneralizedInverse" class="disabled"&gt;一般逆行列&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  次の式を満たす行列
  &amp;#92;(X^-\in\mathbb{R}^{m\times n&amp;#8217;}&amp;#92;) 
  を一般逆行列といい,
  &amp;#92;(X&amp;#92;) が特異行列ならば &amp;#92;(X^-&amp;#92;) は一意ではないが常に存在する. 
  &amp;#92;[X X^-X = X&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;適当であるような&amp;#8221;解は様々に考えられるように, 一般逆行列の定義も様々である.
以下やや天下り的ではあるが便宜上の理由より示してしまうと,
いくらかの一般逆行列は次で定めるムーア・ベンローズ一般逆行列(以下 &lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列)に従っており, 
暗に一般逆行列と言ってこの &lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列のことを示すような場合が巷ではある&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="MPPseudoInverse" class="disabled"&gt;Moore-Penrose 一般逆行列&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  次のすべての条件を満たす&lt;a href="#GeneralizedInverse"&gt;一般逆行列&lt;/a&gt; &amp;#92;(X^{\dagger}&amp;#92;) は 
  Moore-Penrose 一般逆行列(&lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列)といい, 
  その存在は一意&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;である.
    \begin{eqnarray}
    X X^\dagger X&amp;=&amp;X\label{eq:sixth}\tag{6} &amp;#92;\
    X^{\dagger}X X^{\dagger}&amp;=&amp;X^{\dagger}\label{eq:seventh}\tag{7} &amp;#92;\
    \left(X^{\dagger}X\right)^T&amp;=&amp;X^{\dagger}X\label{eq:eigth}\tag{8} &amp;#92;\
    \left(X X^{\dagger}\right)^T&amp;=&amp;X X^{\dagger}\label{eq:ninth}\tag{9}
    \end{eqnarray}
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;最小二乗形一般逆行列&lt;/h4&gt;
&lt;p&gt;まず, ケース 2 の場合について考える. これは, 最小二乗形一般逆行列といわれる一般逆行列を用いる.
これが定める&amp;#8221;適当であるような&amp;#8221;解とは, その名の通り, すべての方程式の二乗誤差が最小である値であり,&amp;nbsp;まさしく上で述べた最小二乗法の値である.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="LeastSquaresGeneralizedInverse" class="disabled"&gt;最小二乗形一般逆行列&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  正規方程式 &amp;#92;[\boldsymbol{a}=X^-\boldsymbol{y}&amp;#92;] の解 
  &amp;#92;(\boldsymbol{a}&amp;#92;) を二乗誤差最小の値で定める
  &lt;a href="#GeneralizedInverse"&gt;一般逆行列&lt;/a&gt; 
  &amp;#92;[^\exists X^-\in\mathbb{R}^{m\times n&amp;#8217;}\ {\rm s.t.}\ m\gt n&amp;#8217;\land\left(X X^-\right)^T = X X^-&amp;#92;] 
  は &amp;#92;(X&amp;#92;) の最小二乗形一般逆行列である.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以下, 最小二乗形一般逆行列の定式を求めるが, 上で既に述べた内容と本質的には全く変わらない. 
ここで, 少し扱いやすくするために, \(n\) 次多項式を \(f_n(x)=a_0x^0_i+a_1x^1_i+\cdots+a_nx^n_i=\sum^{n}_{j=0}a_jx^j_i\),
\(\eqref{eq:fifth}\) の \(x_i^j\) についての行列を \(X\) とする. そしてその \(i\) 行目を 1 つの縦ベクトルとしたものを 
\(\boldsymbol{x_i}\) (\({\rm e.g.}\ \ \boldsymbol{x_1}=\left(x_1^0, x_1^1, \cdots, x_1^n \right)^T\)) とし,
\(\eqref{eq:fourth}\)&amp;nbsp;の式を&lt;/p&gt;
&lt;p&gt;\[\epsilon=\sum_{i=1}^{m}\left(y_i-f_n(\boldsymbol{x_i})\right)^2\label{eq:twelth}\tag{10}\]&lt;/p&gt;
&lt;p&gt;というように表す(これは \(\eqref{eq:fourth}\) と全く同じことを書いただけである)とする.
\(f(\boldsymbol{x_i})=\boldsymbol{x_i}^T\boldsymbol{a}\)&amp;nbsp;だから&lt;/p&gt;
&lt;p&gt;\[=\sum_{i=1}^{m}\left(y_i-\boldsymbol{x_i}^T\boldsymbol{a}\right)^2\]&lt;/p&gt;
&lt;p&gt;\(\left(\boldsymbol{x_1}^T,\boldsymbol{x_2}^T,\cdots,\boldsymbol{x_m}^T\right)^T=X\)&amp;nbsp;なので&lt;/p&gt;
&lt;p&gt;\[=\left(\boldsymbol{y}-X\boldsymbol{a}\right)^T\left(\boldsymbol{y}-X\boldsymbol{a}\right)\]&lt;/p&gt;
&lt;p&gt;ここで, 先にやった, 偏微分を考えることで下に凸な二次関数となることを利用し, その値を \(0\) とした上でそれらすべての連立方程式を求め, 最小値を得たことを思いだし,
この式を \(\boldsymbol{a}\) で微分する(すべての \(\boldsymbol{a_i}\) で偏微分する,&amp;nbsp;すなわち勾配を求める)と&lt;/p&gt;
&lt;p&gt;\[\nabla\epsilon\left(\boldsymbol{a}\right)=2X^T&amp;nbsp;X\boldsymbol{a}-2X^T\boldsymbol{y}=-2X^T\left(\boldsymbol{y}-X\boldsymbol{a}\right)\]&lt;/p&gt;
&lt;p&gt;\(\nabla\epsilon(\boldsymbol{a})=0\)&amp;nbsp;とおくと, &lt;/p&gt;
&lt;p&gt;\[X^T&amp;nbsp;X\boldsymbol{a}=X^T\boldsymbol{y}\]&lt;/p&gt;
&lt;p&gt;と正規方程式が求まった.
ここで, \(n&amp;#8217;=m-1\) のとき \(X\) はヴァンデルモンド行列&lt;sup id="fnref2-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;となり, \(\boldsymbol{x_1}, \cdots, \boldsymbol{x_m}\) が相異なるとき \(X\) は正則となる.
従って,&amp;nbsp;正規方程式の解は&lt;/p&gt;
&lt;p&gt;\[\boldsymbol{a}=\left(X^T X\right)^{-1}X^T&amp;nbsp;\boldsymbol{y}={X}^{-1}\boldsymbol{y}\]&lt;/p&gt;
&lt;p&gt;とかける. \(n&amp;#8217;\lt m-1\) ならば行列 \(X^T X\) が正則なので,&amp;nbsp;正規方程式の解は&lt;/p&gt;
&lt;p&gt;\[\boldsymbol{a}=\left(X^T&amp;nbsp;X\right)^{-1}X^T\boldsymbol{y}\label{eq:tenth}\tag{11}\]&lt;/p&gt;
&lt;p&gt;とかける. 
このとき \(m\lt n\) ならば, \(X^T X\) が非正則となってしまうから, 最小二乗形一般逆行列は構成できない. この結果から, 時間計算量は多項式時間 \(\mathrm{O}(n^3)\) であることがわかる. 
また, 最小二乗形一般逆行列は, &lt;a href="#MPPseudoInverse"&gt;&lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列&lt;/a&gt;であることが導出できる&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;最小ノルム形一般逆行列&lt;/h4&gt;
&lt;p&gt;次に, ケース 3 の場合を考える. この場合, 最小ノルム形一般逆行列を用いる.
ケース 3 は様々な値が解になりうるということであったが, 
最小ノルム形一般逆行列は, いまそれを \(X^-\) としたとき,
\(\boldsymbol{a}=X^-\boldsymbol{y}\) の解 \(\boldsymbol{a}\) を
その \(L^2\) ノルム \(\mid\mid \boldsymbol{a}\mid\mid_2\)&amp;nbsp;が最小となるように定める.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="MinimumNormGeneralizedInverse" class="disabled"&gt;最小ノルム形一般逆行列&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  正規方程式 &amp;#92;[\boldsymbol{a}=X^-\boldsymbol{y}&amp;#92;] の解 
  &amp;#92;(\boldsymbol{a}&amp;#92;) をその &amp;#92;(L^2&amp;#92;) ノルム &amp;#92;(\mid\mid \boldsymbol{a}\mid\mid_2&amp;#92;)
  が最小となる値で定める&lt;a href="#GeneralizedInverse"&gt;一般逆行列&lt;/a&gt; 
  &amp;#92;[^\exists X^-\in\mathbb{R}^{m\times n&amp;#8217;}\ {\rm s.t.}\ m\lt n&amp;#8217;\land\left(X^- X\right)^T = X^- X&amp;#92;]
  は &amp;#92;(X&amp;#92;) の最小ノルム形一般逆行列である.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;つまり,&amp;nbsp;解くべきは次に示す制約付き最適化問題/条件付き極小値問題である.&lt;/p&gt;
&lt;p&gt;\[\min_{\boldsymbol{a}}\mid\mid\boldsymbol{a}\mid\mid^2_2\ {\rm s.t.}\&amp;nbsp;\boldsymbol{y}=X\boldsymbol{a}\]&lt;/p&gt;
&lt;p&gt;条件付き極値の問題はラグランジュの未定乗数法で解ける.
この証明は中々大変なので, 本エントリでは公理として認めた上で用いることとする(&lt;span class="caps"&gt;TODO&lt;/span&gt;).
従って,&amp;nbsp;ラグランジアンを次のように定義する.&lt;/p&gt;
&lt;p&gt;\[\mathcal{L}(\boldsymbol{a},&amp;nbsp;\boldsymbol{\lambda}):=\mid\mid\boldsymbol{a}\mid\mid^2_2+\boldsymbol{\lambda}^T\left(\boldsymbol{y}-X\boldsymbol{a}\right)\]&lt;/p&gt;
&lt;p&gt;ラグランジュの未定乗数法に従い,&amp;nbsp;それぞれの偏導関数から求めて&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{cases}
\frac{\partial}{\partial\boldsymbol{a}}\mathcal{L}(\boldsymbol{a})&amp;amp;=&amp;amp;2\boldsymbol{a}-X^T\boldsymbol{\lambda}&amp;amp;=&amp;amp;0 \\\
\frac{\partial}{\partial\boldsymbol{\lambda}}\mathcal{L}(\boldsymbol{a})&amp;amp;=&amp;amp;\boldsymbol{y}-X\boldsymbol{a}&amp;amp;=&amp;amp;0
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;よって&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{cases}
\boldsymbol{a}&amp;amp;=&amp;amp;\frac{1}{2}X^T\lambda \\\
\boldsymbol{y}&amp;amp;=&amp;amp;X\boldsymbol{a}
\end{cases}\leftrightarrow\boldsymbol{y}=\frac{1}{2}X X^T\lambda
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(m\lt n&amp;#8217;\) ならば \(X X^T\)&amp;nbsp;は正則なので&lt;/p&gt;
&lt;p&gt;\[\lambda=2\left(X X^T\right)^{-1}\boldsymbol{y}\leftrightarrow \boldsymbol{a}=X^T\left(X&amp;nbsp;X^T\right)^{-1}\boldsymbol{y}\]&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X\boldsymbol{a}=X\left\{X^T\left(X X^T\right)^{-1}\boldsymbol{y}\right\}=\left(X X^T\right)\left(X X^T\right)^{-1}\boldsymbol{y}=\boldsymbol{y}\)&lt;/span&gt;&amp;nbsp;よりこの正規方程式の解が一般逆行列として成立していることが確認できる.&lt;/p&gt;
&lt;h4&gt;制限つき最小二乗法&lt;/h4&gt;
&lt;p&gt;最後に, 重複がある(ランク落ちである)ケースを考える.
この場合は, \(X^T X, X X^T\) がともに特異行列となってしまうため,
対象の行列に対してまず特異値分解(以下 &lt;span class="caps"&gt;SVD&lt;/span&gt;)を行う.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="SVD" class="disabled"&gt;特異値分解&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(^\forall X\in\mathbb{R}^{m\times n&amp;#8217;}&amp;#92;) に対して
&amp;#92;[
 ^\exists U\in\mathbb{R}^{m\times m}, ^\exists V\in\mathbb{R}^{n&amp;#8217;\times n&amp;#8217;},
 ^\exists \Sigma\in\mathbb{R}^{n&amp;#8217;\times m}\ {\rm s.t.}\ 
X = U\Sigma V^T &amp;#92;\ {\rm where}\ \Sigma=\left( 
                      \begin{array}{ccccc}
                             \lambda_1&amp;\cdots&amp;0 &amp;#92;\ 
                             \vdots&amp;\ddots&amp;\vdots &amp;#92;\
                             0&amp;\cdots&amp;\lambda_{r} &amp;#92;\
                             &amp;&amp;&amp;0 &amp;#92;\
                             &amp;&amp;&amp;&amp;0
                      \end{array}
              \right), \lambda_1\geq\cdots\geq\lambda_{r}\geq 0,
              r=\mathrm{rank}(X)=\min(m,n&amp;#8217;)
&amp;#92;]
このとき &amp;#92;(U\Sigma V^T&amp;#92;) を &amp;#92;(X&amp;#92;) の特異値分解(英: Singular value decomposition)という.

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これは &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\displaystyle\sum^{r}_{i=1}\lambda_i\boldsymbol{u_i}\boldsymbol{v_i}^T\ {\rm where}
\ \begin{array}{cc}
\left(\boldsymbol{u_1},\cdots,\boldsymbol{u_m}\right)^T
&amp;amp;=&amp;amp;\left(\begin{array}{ccc}
u_{11}&amp;amp;\cdots&amp;amp;u_{1m} \\\
\vdots&amp;amp;\ddots&amp;amp;\vdots\\\ 
u_{m1}&amp;amp;\cdots&amp;amp;u_{mm}
\end{array}\right)&amp;amp;=&amp;amp;U \\\
\left(\boldsymbol{v_1},\cdots,\boldsymbol{v_{n'}}\right)^T
&amp;amp;=&amp;amp;\left(\begin{array}{ccc}
v_{11}&amp;amp;\cdots&amp;amp;v_{1n'} \\\
\vdots&amp;amp;\ddots&amp;amp;\vdots\\\
v_{n'1}&amp;amp;\cdots&amp;amp;v_{n'n'}
\end{array}\right)&amp;amp;=&amp;amp;V
\end{array}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と同値であり, 一般に \(\lambda_i\) を特異値, \(\boldsymbol{u_i}\) を左特異ベクトル
\(\boldsymbol{v_i}\)&amp;nbsp;を右特異ベクトルという.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;:&amp;nbsp;詳解を追記&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;オーバーフィッティングと正則化およびその評価&lt;/h4&gt;
&lt;p&gt;先に, 次数に応じた近似の遷移が観察できるアニメーションを示したが, あまり次数を大きくすると, データ点の間で誤差が大きくなってしまうことがある. これをオーバーフィッティングという.
先と同様, \(x_i=i-1, y_i=\sin(x_i)+\epsilon, i=1,2,\cdots,11\) に対する各次元での係数を見てみると(\(\eqref{eq:fifth}\) では, 
係数のベクトルを \(\left(a_0,a_1,\cdots,a_n\right)^T\) と並べているが, 下記は \(\left(a_n,a_{n-1},\cdots,a_0\right)^T\)&amp;nbsp;の順である),&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Extra&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Random&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Normal&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="kt"&gt;ML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Approx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OLS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;ByPinv&lt;/span&gt; &lt;span class="kt"&gt;Utils&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;uni&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalIO&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;replicateM&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;uni&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.563765361160251e-4&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.9418472638241775&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.1378051539092622&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.30341406458452413&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8411970236084821&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8558604338359868&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2586281201459223&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.8031257237891795&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.1562504257723663&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.39633872602316167&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8085898217611907&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;outCoes&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; -----&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;foldr1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;outCoes&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;-----&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.168066672607503e-2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.38785329563173637&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;-----&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.311957210780993e-3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.10480023883388496&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.4825326537934513&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="c1"&gt;-----&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.2497127164502315e-6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.783924911591259e-4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.143290075166487e-3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.026523522855991e-2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.2724261548894942&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.7770268952402895&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0147233691594897&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.7860963186273294&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.2602569068891822&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.3687551597216985e-4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;-----&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.626701126479776e-5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.196002759563384e-4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7705498506683254e-2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.21421719275219878&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.5895590768542918&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;7.43609912277545&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;21.670288785218535&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;37.428871273332284&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;34.68074111840572&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;13.820707197220901&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.563765361160251e-4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\(m=10\) で, \(-21.670\cdots,37.428\cdots,-34.680\cdots,13.820\cdots\) といった, 絶対値の大きな値が見られる. 実際に \(m=9, 10\)&amp;nbsp;でプロットしてみると,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;PP&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./image&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;m = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;points&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;implicitFn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\(m=10\) のモデルによる近似は \(m=9\)&amp;nbsp;の場合と比べて激しく振れていることが見てとれる.&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/November/image9.png" alt="non regulared" width="320px"&gt;
&lt;img src="../../../../../images/2018/November/image10.png" alt="non regulared" width="320px"&gt;
&lt;/p&gt;

&lt;p&gt;天下り的になってしまうが, このような現象は推定する係数に対して標本数が少ないようなときによく遭遇する. その特徴として, いま示したように, 係数の絶対値が大きくなることが挙げられる.
従って, 次数を適当に固定した上で(この場合 \(n=\)データ数\(-1\), すなわちデータ数から機械的に次数を決定する), 係数を絶対値を制限することができれば, これを防ぐことができるだろう. 
具体的な手法として, 式 \(\eqref{eq:fourth}\) に対してノルムを加え, その最小化を求めるといったような&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;手法が広く知られている.
この手法は, ノルムに対して, 次のように平滑化パラメータ \(\lambda \geq 0\)&amp;nbsp;を作用させることで正則化の強度を設定することができる. &lt;/p&gt;
&lt;p&gt;\[\epsilon\left(\boldsymbol{a}\right)_\lambda=\sum^m_{i=1}\left(y_i-f_n(\boldsymbol{x}_i)\right)^2+\underbrace{\lambda R\left(\boldsymbol{a}\right)}_{\rm&amp;nbsp;正則化項}\]&lt;/p&gt;
&lt;p&gt;このような最適化を正則化法という.
こうすると, モデルの変動が大きくなるにつれて正則化項も大きくなり, それが最小化問題へのペナルティとなって, 結果的に滑らかな曲線の推定に繋がる.
ただし, 過剰に大きいパラメータをとると, 高次の項へのペナルティが強くなってしまうことで, 結局, 高次の項を無視するのと同等となってしまい, 低次の関数でモデルを作るのと同等になってしまう. 従って, 依然として適切なパラメータの設定が要されるわけだが,&amp;nbsp;モデルの次数を決定するよりかは楽である. &lt;/p&gt;
&lt;p&gt;またパラメータ \(\lambda\)&amp;nbsp;を標本数で割った形式が取られることもある.&lt;/p&gt;
&lt;p&gt;\[\epsilon\left(\boldsymbol{a}\right)_\lambda=\sum^m_{i=1}\left(y_i-f_n(\boldsymbol{x}_i)\right)^2+\underbrace{\frac{\lambda}{m} R\left(\boldsymbol{a}\right)}_{\rm&amp;nbsp;正則化項}\]&lt;/p&gt;
&lt;p&gt;両者の違いは正則化項の影響度である. 先に, 推定する係数に対して標本数が少ないようなときにオーバーフィッティングはよく起こると述べたが, ならば当然, 標本数が十分である場合には正則化項は必要ない. パラメータ \(\lambda\) を標本数で割ってやれば, 標本数の増加に従って正則化項の影響度を抑制できる.&amp;nbsp;どちらを用いるかはその時々で選択の余地があるだろう.&lt;/p&gt;
&lt;p&gt;例えば, \(\lambda\) を標本数に依らず直接作用させる形式で 
\(R\left(\boldsymbol{v}\right)\) を \(L^2\) ノルムとする&lt;sup id="fnref2-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;と,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\epsilon\left(\boldsymbol{a}\right)_\lambda&amp;amp;=&amp;amp;\sum^m_{i=1}\left(y_i-f_n(\boldsymbol{x}_i)\right)^2+\lambda\sum_{j=0}^{n}a^2_j \\\
&amp;amp;=&amp;amp;\left(\boldsymbol{y}-X\boldsymbol{a}\right)^T\left(\boldsymbol{y}-X\boldsymbol{a}\right)+\lambda\boldsymbol{a}^T\boldsymbol{a}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;先と同様に \(\nabla\epsilon\left(\boldsymbol{a}\right)_\lambda=0\)&amp;nbsp;とおいて,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\nabla\epsilon\left(\boldsymbol{a}\right)_\lambda&amp;amp;=&amp;amp;-2X^T\left(\boldsymbol{y}-X\boldsymbol{a}\right)+2\lambda\boldsymbol{a} \\\
&amp;amp;=&amp;amp;2\left(\lambda I+X^T X\right)\boldsymbol{a}-2X^T\boldsymbol{y}\\\ &amp;amp;=&amp;amp;0
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従ってこの正規方程式の解は,&lt;/p&gt;
&lt;p&gt;\[\boldsymbol{a}=\left(\lambda I+X^T&amp;nbsp;X\right)^{-1}X^T\boldsymbol{y}\]&lt;/p&gt;
&lt;p&gt;となる. \(\boldsymbol{a}\) を求めるに際する時間計算量について加味すると,
逆行列を計算するよりも &lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解を行った方が良いので,&lt;/p&gt;
&lt;p&gt;\[\left(\lambda I+X^T&amp;nbsp;X\right)\boldsymbol{a}=X^T\boldsymbol{y}\]&lt;/p&gt;
&lt;p&gt;としておく. この正規方程式を用いて, 平滑化パラメータ \(\lambda=0.1,1,10\)&amp;nbsp;を適用しプロットすると,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;PP&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./image&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;parameter = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;points&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;implicitFn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;resolveRegular&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次のようになる.&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/November/image0.1.png" alt="regulared 0.1" width="320px"&gt;
&lt;img src="../../../../../images/2018/November/image1.0.png" alt="regulared 1.0" width="320px"&gt;
&lt;img src="../../../../../images/2018/November/image10.0.png" alt="regulared 10.0" width="320px"&gt;
&lt;/p&gt;

&lt;p&gt;問題は, どのようにしてオーバーフィッティングを評価するかである.
データセット \(\bf x\) に対し, 真の値 \(t_i\) を
&lt;span class="math"&gt;\(D=\left\{\left({\bf x_1},t_1\right), \left({\bf x_2},t_2\right),\cdots,\left({\bf x_m},t_m\right)\right\} {\rm where}\ t_i=g+u_i\ \left(\because\ \eqref{eq:ssecond}\ {\text より}\right)\)&lt;/span&gt; 
とし, 回帰分析によって得られるモデル
\(\hat{f}_n({\bf y_i})=f_n(\boldsymbol{x&amp;#8217;_i})\ {\rm where}\ \boldsymbol{x&amp;#8217;_i}=\left({\bf y_i^0},{\bf y_i^1},\cdots,{\bf y_i^n}\right)^T \left(\because \eqref{eq:twelth}\ {\text より}\right)\)&amp;nbsp;との差を次のように定義する.&lt;/p&gt;
&lt;p&gt;\[L\left(t_i, \hat{f}_n(\boldsymbol{{\bf x_i}})\right):=\left(t_i-\hat{f}_n(\boldsymbol{{\bf&amp;nbsp;x_i}})\right)^2\]&lt;/p&gt;
&lt;p&gt;この \(L\) は損失関数といわれる. 
ここで, \(\bf x_i\) と \(t_i\) が得られる同時確率を考慮すると,&amp;nbsp;損失の期待値は&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[L\left(t_i, \hat{f}_n({\bf x_i})\right)\right]&amp;amp;=&amp;amp;
\int\int\left(t_i-\hat{f}_n({\bf x_i})\right)^2P\left(t_i\cap{\bf x_i}\right)dt_id{\bf x_i} \\\
&amp;amp;=&amp;amp;\int\left\{\int\left(t_i-\hat{f}_n({\bf x_i})\right)^2P\left(t_i\mid{\bf x_i}\right)dt_i\right\}P\left({\bf x_i}\right)d{\bf x_i}\ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#MulTheoremConditionalProbability}{\text 条件付き確率の乗法定理}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\int\left(t_i-\hat{f}_n({\bf x_i})\right)^2P\left(t_i|{\bf x_i}\right)\) 
を最小化したいので, 
これを \(g({\bf y})=\int\left(t_i-\hat{f}_n({\bf y_i})\right)^2P\left(t_i|{\bf y_i}\right)\)&amp;nbsp;とおいて&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\frac{\partial}{\partial \hat{f}_n({\bf x_i})} g({\bf x_i})&amp;amp;=&amp;amp;2\int\left(t_i-\hat{f}_n({\bf x_i})\right)P\left(t\mid{\bf x_i}\right)dt_i \\\
&amp;amp;=&amp;amp;2\int\left\{\hat{f}_n({\bf x_i})P\left(t_i\mid{\bf x_i}\right)\right\}dt_i-2\int t_i P\left(t_i\mid{\bf x_i}\right)dt_i \\\
&amp;amp;=&amp;amp;2\hat{f}_n({\bf x_i})\int P\left(t_i\mid{\bf x_i}\right)dt_i-2\int t_i P\left(t_i\mid{\bf x_i}\right)dt_i \\\
&amp;amp;=&amp;amp;2\hat{f}_n({\bf x_i})-2\int t_i P\left(t_i\mid {\bf x_i}\right)dt_i\ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#normalizationLaw}{\text 規格化条件}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\therefore\)&lt;/p&gt;
&lt;div class="math"&gt;$$
\nabla g({\bf x})=0\leftrightarrow \hat{f}_n({\bf x_i})=\int t_i P\left(t_i\mid{\bf x_i}\right)=E\left[t_i\mid{\bf x_i}\right]
$$&lt;/div&gt;
&lt;p&gt;よって, \(\hat{f}_n\) は条件付き期待値 &lt;span class="math"&gt;\(E\left[t_i\mid{\bf x_i}\right]\)&lt;/span&gt; 
で決めると最小化されることがわかった. 先に示した損失関数 \(L\) は, 一つの点における差なので, 
すべての点における差を次のように定義する(英: mean-square error&amp;nbsp;から).&lt;/p&gt;
&lt;div class="math"&gt;$${\rm MSE}:=\sum^m_{i=1}L\left(t_i,\hat{f}_n({\bf x_i})\right)$$&lt;/div&gt;
&lt;p&gt;この期待値をできる限り小さくしたい.&lt;/p&gt;
&lt;div class="math"&gt;$$E\left[{\rm MSE}\right]=E\left[\sum^m_{i=1}L\left(t_i,\hat{f}_n({\bf x})\right)\right]=\sum_{i=1}^mE\left[L\left(t_i,\hat{f}_n({\bf x})\right)\right]\ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#fn-2}{\text 期待値の線形性}\right)$$&lt;/div&gt;
&lt;p&gt;&lt;span class="math"&gt;\(E\left[L\left(t_i,\hat{f}_n({\bf x_i})\right)\right]\)&lt;/span&gt;&amp;nbsp;について展開すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[L\left(t_i,\hat{f}_n({\bf x_i})\right)\right]&amp;amp;=&amp;amp;
E\left[\left(t_i-\hat{f}_n({\bf x_i})\right)^2\right] \\\
&amp;amp;=&amp;amp;E\left[\left(t_i-E\left[t_i\mid{\bf x_i}\right]+E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2\right] \left(\because {\rm augmentation\ trick}\right)\\\
&amp;amp;=&amp;amp;E\left[\left\{\underbrace{\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)}_{a}+\underbrace{\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)}_{b}\right\}^2\right] \\\
&amp;amp;=&amp;amp;E\left[
\begin{array}{c}
\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)^2+ \\\
\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2+ \\\
2\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)
\end{array}\ 
\right] \left(\because \left(a+b\right)^2=a^2+b^2+2ab\label{eq:thirteenth}\tag{12}\right) \\\
&amp;amp;=&amp;amp;
\begin{array}{c}
E\left[\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)^2\right] \\\
+E\left[\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2\right] \\\
+E\left[2\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)\right]
\end{array}
\left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#fn-2}{\text 期待値の線形性}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;第三項について&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[2\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x})\right)\right]&amp;amp;=&amp;amp;2\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x})\right)E\left[\left(t_i-g\right)\right]\ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#mjx-eqn-eq%3Aexaxiom3}{E\left[a A\right]=a E\left[A\right]}\right) \\\
&amp;amp;=&amp;amp;2\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x})\right)\left(E\left[t_i\right]-E\left[E\left[t_i\mid{\bf x_i}\right]\right]\right)\ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#fn-2}
{\text 期待値の線形性}\right) \\\
&amp;amp;=&amp;amp;2\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x})\right)\left(E\left[t_i\right]-E\left[t_i\right]\right) \ \left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#fn-4}{E\left[B\right]=E\left[E\left[B\mid A\right]\right]}\right) \\\
&amp;amp;=&amp;amp;0
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\therefore\)&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[L\left(t_i,\hat{f}_n({\bf x_i})\right)\right]&amp;amp;=&amp;amp;
E\left[\left(t_i-E\left[t_i\mid{\bf x_i}\right]\right)^2\right]+
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x})\right)^2\right] \\\
&amp;amp;=&amp;amp;E\left[u^2\right]+E\left[\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2\right]
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この第一項は, 真の値と最小化された理想の関数の差であるので, ノイズ項に対応することとなる.
従って,&amp;nbsp;第一項に関してもう少し潜り込んでみると&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2\right]&amp;amp;=&amp;amp;
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]+E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2\right]\ \left(\because {\rm augmentation\ trick}\right)\\\
&amp;amp;=&amp;amp;E\left[\left\{
\underbrace{\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)}_{a}+
\underbrace{\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)}_{b}\right
\}^2\right]\\\
&amp;amp;=&amp;amp;E\left[
\begin{array}{c}
\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)^2+\\\
\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2+\\\
2\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2
\end{array}
\right]\ \left(\because \eqref{eq:thirteenth}\right) \\\
&amp;amp;=&amp;amp;\begin{array}{c}
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)^2\right]+\\\
E\left[\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2\right]+\\\
2E\left[\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2\right]
\end{array}\ \\\
&amp;amp;&amp;amp;\left(\because \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#fn-2}{\text 期待値の線形性}, \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#mjx-eqn-eq%3Aexaxiom3}{E\left[a A\right]=a E\left[A\right]}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;第三項について&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;2E\left[\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2\right]=
2\left(
\begin{array}{l}
E\left[E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]\right]- \\\
E\left[E\left[\hat{f}_n({\bf x_i})\right]^2\right]- \\\
E\left[\hat{f}_n({\bf x_i})E\left[t_i\mid{\bf x_i}\right]\right]+ \\\
E\left[\hat{f}_n({\bf x_i})E\left[\hat{f}_n({\bf x_i})\right]\right]
\end{array}
\right)
\label{eq:fourteenth}\tag{13}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#mjx-eqn-eq%3Aexaxiom3}{E\left[a A\right]=a E\left[A\right]}
, \href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#consExpisCons}{E\left[a\right]=a} \to E\left[E\left[a\right]\right]=a\)&lt;/span&gt; より 
&lt;div class="math"&gt;$$E\left[E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]\right]=E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#consExpisCons}{E\left[a\right]=a} \to E\left[E\left[a\right]\right]=a\)&lt;/span&gt; より &lt;div class="math"&gt;$$E\left[E\left[\hat{f}_n({\bf x_i})\right]^2\right]=E\left[\hat{f}_n({\bf x_i})\right]^2$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#mjx-eqn-eq%3Aexaxiom3}{E\left[a A\right]=a E\left[A\right]}\)&lt;/span&gt; より &lt;div class="math"&gt;$$E\left[\hat{f}_n({\bf x_i})E\left[t_i\mid{\bf x_i}\right]\right]=E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\href{https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#mjx-eqn-eq%3Aexaxiom3}{E\left[a A\right]=a E\left[A\right]}\)&lt;/span&gt; より &lt;div class="math"&gt;$$E\left[\hat{f}_n({\bf x_i})E\left[\hat{f}_n({\bf x_i})\right]\right]=E\left[\hat{f}_n({\bf x_i})\right]^2$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;よって&lt;/p&gt;
&lt;div class="math"&gt;$$
\eqref{eq:fourteenth}=
2\left(
E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]-
E\left[\hat{f}_n({\bf x_i})\right]^2-
E\left[t_i\mid{\bf x_i}\right]E\left[\hat{f}_n({\bf x_i})\right]+
E\left[\hat{f}_n({\bf x_i})\right]^2
\right)
=0
$$&lt;/div&gt;
&lt;p&gt;\(\therefore\)&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-\hat{f}_n({\bf x_i})\right)^2\right]
&amp;amp;=&amp;amp;
E\left[\left(E\left[t_i\mid{\bf x_i}\right]-E\left[\hat{f}_n({\bf x_i})\right]\right)^2\right]+E\left[\left(E\left[\hat{f}_n({\bf x_i})\right]-\hat{f}_n({\bf x_i})\right)^2\right] \\\
&amp;amp;=&amp;amp;
{\rm Bias}\left[\hat{f}_n({\bf x_i})\right]^2+{\rm Var}\left[\hat{f}_n({\bf x_i})\right]
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;また&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[L\left(t_i,\hat{f}_n({\bf x_i})\right)\right]={\rm Bias}\left[\hat{f}_n({\bf x_i})\right]^2+{\rm Var}\left[\hat{f}_n({\bf x_i})\right]+\sigma^2
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この一連の展開作業は, バイアス-バリアンス分解といわれる.
バイアスは, 損失の期待値を最小化する &lt;span class="math"&gt;\(E\left[t|{\bf x_i}\right]\)&lt;/span&gt; とのずれの期待値である. 
従って, 関数モデルを複雑にするほど値は減少する.
バリアンスはモデルの分散であり, モデルの複雑さを表す指標である.
従って, 関数モデルを複雑にするほど値は増加する.
両者のこの関係性をバイアスとバリアンスのトレードオフという.
多くの場合, これらが同時に可能な限り低い値をとるモデルのことを,&amp;nbsp;データセットに対する適切なモデルと言うことができるだろう.&lt;/p&gt;
&lt;p&gt;ここで, 先に示したデータセットに対して, 4 次元と 9 次元の線形関数による近似を行い,&amp;nbsp;それぞれのバイアスとバリアンスを比較する.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Fractional&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Real&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Fractional&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt;  &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;il&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;implicitFn&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先にオーバーフィッティングしてしまった, 
10 次元のモデルと 9&amp;nbsp;次元のモデルのバイアスとバリアンスを比較する.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fhat&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\(L^2\)&amp;nbsp;正則化(\(\lambda=0.1,1,10\))を施した場合を見てみる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;ML.Approx.Regularization.L2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Reg&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fhat&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;implicitFn&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="kt"&gt;Reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fhat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mf"&gt;1.9110967187955293e-2&lt;/span&gt;
&lt;span class="mf"&gt;2.283386765131595e-2&lt;/span&gt;
&lt;span class="mf"&gt;4.427871557982087e-2&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fhat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mf"&gt;0.5855240280868919&lt;/span&gt;
&lt;span class="mf"&gt;0.5530852362842676&lt;/span&gt;
&lt;span class="mf"&gt;0.4586444106136849&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;誤差分布が正規分布でない場合の線形回帰&lt;/h3&gt;
&lt;p&gt;式 \(\eqref{eq:ssecond}\) 等で, 線形最小二乗法がすべてのノイズ項の確率分布を同一視することを示した. 
この仮定により, 誤差の分布が非対称, あるいは外れ値が顕著に見られるようなデータセットに対する線形最小二乗法の適用結果は, パラメータの推定,&amp;nbsp;信頼区間およびその統計量について信頼できなくなる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;n&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="n"&gt;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;uni&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalIO&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;replicateM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="n"&gt;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;uni&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dleft&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dright&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dleft&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;dleft&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;dright&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;PP&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./image.png&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Figure&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;points&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;implicitFn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\(\mathrm{N}(0,0.2)\) の確率誤差の他に, 4 つの外れ値&lt;sup id="fnref-10"&gt;&lt;a class="footnote-ref" href="#fn-10"&gt;10&lt;/a&gt;&lt;/sup&gt;を仕込んだこのデータへ線形最小二乗法(\(n=1\))を施すと,&amp;nbsp;外れ値に影響された推定が行われることがわかる.&lt;/p&gt;
&lt;p style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/November/outliers.png" alt="lenear equations" width="600px"&gt;
&lt;/p&gt;

&lt;p&gt;これを防ぐ方法はいくつか存在する.
以下, 説明のために改めて, \(p\) 個の独立変数を有する多重線形回帰モデルを \[\boldsymbol{y}=X&amp;#8217;\boldsymbol{\beta}+\boldsymbol{u}\] とする.
ここで \(\boldsymbol{\beta}=\boldsymbol{a}\) で \(X&amp;#8217;\) は説明変数の行 \(\boldsymbol{x&amp;#8217;_i}=\left(x&amp;#8217;_{i1}, x&amp;#8217;_{i2},\cdots,x&amp;#8217;_{ip}\right)^T\) 
を有するフルランク行列 \(X&amp;#8217;\in\mathbb{R}^{m\times p}\) であり, 
\(\boldsymbol{u}\) は &lt;a href="https://falgon.github.io/roki.log/posts/2018/10月/28/probabilityTerms/#iid"&gt;i.i.d&lt;/a&gt; かつ
\(\mathrm{N}(0,\sigma^2)\) に従う確率誤差のベクトル \(\boldsymbol{u}=\left(u_1,u_2,\cdots,u_m\right)^T\in\mathbb{R}^{m\times 1}\) とする.
なおこの定義に従うと, (Ordinary least squares&amp;nbsp;より)通常の最小二乗法は次の式で定義できる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\mathrm{OLS}(X',\boldsymbol{y})&amp;amp;:=&amp;amp;\mathrm{arg}\min_\boldsymbol{\boldsymbol{\beta}}\sum^m_{i=1}r(\boldsymbol{\beta})^2_i \label{eq:eleventh}\tag{14} \\\
&amp;amp;=&amp;amp;\eqref{eq:tenth}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで \(r(\boldsymbol{\beta})_i\) は \(r(\boldsymbol{\beta})_i=y_i-\boldsymbol{x}_i\boldsymbol{\beta}\) である(\(\eqref{eq:fourth}\) の偏差の部分).
以下, パラメータのベクトル \(\boldsymbol{\beta}\) を明示的に示す必要がないときには \(r(\boldsymbol{\beta})_i\) を \(r_i\)&amp;nbsp;と示すこととする.&lt;/p&gt;
&lt;h4&gt;最小刈込み二乗法&lt;/h4&gt;
&lt;p&gt;一言でいえば, この方法は単純に外れ値を最小二乗法の対象から除外してしまう方法である(以下 Least trimmed squares&lt;sup id="fnref-11"&gt;&lt;a class="footnote-ref" href="#fn-11"&gt;11&lt;/a&gt;&lt;/sup&gt; より &lt;span class="caps"&gt;LTS&lt;/span&gt;&amp;nbsp;と記述)といわれる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\mathrm{LTS}(X,\boldsymbol{y},k)&amp;amp;:=&amp;amp;\mathrm{arg}\min_\boldsymbol{\beta}\sum^k_{i=1}r(\boldsymbol{\beta})^2_{(i)} \\\
&amp;amp;&amp;amp;{\rm s.t.\ } r(\boldsymbol{\beta})^2_{(1)}\leq r(\boldsymbol{\beta})^2_{(2)}\leq\cdots\leq r(\boldsymbol{\beta})^2_{(m)}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで \(r(\boldsymbol{\beta})_{(i)}\) は \(i\) 番目に小さい残差を示す.
要するに, \(m\) 個の偏差の二乗を昇順で並べ, 
適当なパラメータ \(k\ \left(k\leq m\right)\) に対して \(\sum^k_{i=1}\left(r^2\right)_{i:m}\) を最小化する回帰係数を求めることをいう.
当然, \(k=m\) とすると, 通常の最小二乗法と同じ結果となるが, \(k\lt m\) で設定することで \(m-k\) 個の大きな偏差をもつデータを無視できる. 
&lt;span class="caps"&gt;LTS&lt;/span&gt;&amp;nbsp;は次の手順で実行する.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;: &lt;span class="caps"&gt;LTS&lt;/span&gt;&amp;nbsp;の手順&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;: &lt;span class="caps"&gt;LTS&lt;/span&gt;&amp;nbsp;による近似の実装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;また, 各データ点に対して重み(確率分布)を付与し,
それらを単なる算術平均として捉えるのではなく,
期待値として捉えるようにする方法が思いつく. 実際にこれらはそれぞれ名前がついていて, 前者は最小刈り込み二乗法,&amp;nbsp;後者はロバスト推定といわれる.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;: 最小刈り込みに情報,&amp;nbsp;ロバスト推定による近似の実装&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;「&lt;a href="https://mathtrain.jp/seikiequ"&gt;正規方程式の導出と計算例 - 高校数学の美しい物語&lt;/a&gt;」 2018 年 11 月 2&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a name="ref1" href="http://tekenuko.hatenablog.com/entry/2017/11/18/214317"&gt;Rでスパースモデリング：Elastic Net回帰についてまとめてみる&lt;/a&gt;」 2018 年 11 月 5&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;川野　秀一, 廣瀬　慧, 立石　正平, 小西　貞則 (2010)「&lt;a href="http://svr4.terrapub.co.jp/journals/jjssj/pdf/3902/39020211.pdf"&gt;回帰モデリングと \(L_1\) 型正則化法の最近の展開&lt;/a&gt;」, 日本統計学会誌 第 39 巻, 第 2 号, 211 頁 〜 242 頁 pp.211~215, 2018 年 11 月 5&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://nagahara-masaaki.github.io/assets/pdfs/lecture13.pdf"&gt;数値計算 大阪大学基礎工学部&lt;/a&gt;」 2018 年 11 月 5&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;美添　泰人 (2010)「&lt;a href="https://www.terrapub.co.jp/journals/jjssj/pdf/3902/39020161.pdf" name="ref3"&gt;経済と統計の間で&lt;/a&gt;」, 日本統計学会誌 第 38 巻, 第 2 号, 161 頁 〜 179  頁 pp.173~175 2018 年 11 月 10&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://www.hellocybernetics.tech/entry/2017/01/24/100415"&gt;バイアス-バリアンス分解：機械学習の性能評価 - &lt;span class="caps"&gt;HELLO&lt;/span&gt; &lt;span class="caps"&gt;CYBERNETICS&lt;/span&gt;&lt;/a&gt;」 2018 年 11 月 13&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;Jurgen A. Doornik (2011) &amp;#8220;&lt;a name="ref2" class="disabled"&gt;Robust Estimation Using Least Trimmed Squares&lt;/a&gt;&amp;#8220;, Institute for Economic Modelling, Oxford Martin School, and Economics Department, University of Oxford, &lt;span class="caps"&gt;UK&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Rousseeuw and &lt;span class="caps"&gt;B.C.&lt;/span&gt; Van Zomeren (1990) &amp;#8220;&lt;a name="ref4" class="disabled"&gt;Unmasking multivariate outliers and leverage points&lt;/a&gt;&amp;#8220;, Journal of the American Statistical Association,&amp;nbsp;pp.633–639&lt;/li&gt;
&lt;li&gt;Vincenzo Verardi &amp;#8220;&lt;a name="ref5" href="https://www.stata.com/meeting/uk08/VerardiRobustStatisticsinStata.pdf"&gt;Robust Statistics Statistics in Stata&lt;/a&gt;&amp;#8220;, 2018 年 11 月 17&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;データセットは, &lt;a href="http://math.arizona.edu/~dsl/bmile.htm"&gt;Data Set for &lt;span class="caps"&gt;CHAPTER&lt;/span&gt; 2 - &lt;span class="caps"&gt;DIFFERENTIAL&lt;/span&gt; &lt;span class="caps"&gt;EQUATIONS&lt;/span&gt; graphics, models, data&lt;/a&gt; を利用させていただいた.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;最小二乗法の定義により「\(\mathrm{Cov}(x,y)\gt 0\leftrightarrow\)最小二乗法による直線の傾きが正」がいえることで, 「相関係数が \(0\) であるとき, 各 \(x_i,y_i\) に相関関係がない」を数学的に説明できたと捉えることができる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;\(n&amp;#8217;=m\) で, 同行列のような各行が初項 &lt;span class="math"&gt;\(1\)&lt;/span&gt; の等比数列であるような正方行列をヴァンデルモンド行列という.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;したがって, 式に起こすと以下の通り: &lt;div class="math"&gt;\begin{eqnarray}E\left[y_i\right]&amp;amp;=&amp;amp;E\left[\sum^m_{j=0}a_jf_j\left(x_i^0,x_i^1,\cdots,x_i^n\right)+\epsilon_i\right]\\\ &amp;amp;=&amp;amp;\sum^m_{j=0}a_jf_j\left(x_i^0,x_i^1,\cdots,x_i^n\right)+E\left[\epsilon_i\right] \\\ &amp;amp;=&amp;amp;\sum^m_{j=0}a_jf_j\left(x_i^0,x_i^1,\cdots,x_i^n\right) \end{eqnarray}&lt;/div&gt; また, \[V\left[y_i\right]=V\left[\sum^m_{j=0}a_jf_j\left(x_i^0,x_i^1,\cdots,x_i^n\right)+\epsilon_i\right]=V\left[\epsilon_i\right]=\sigma^2\]&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;複素行列について扱う場合, 転置行列を随伴行列, 直交行列をユニタリ行列にすれば同様にして求まる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;例えば, Wolfram 言語では&lt;a href="https://reference.wolfram.com/language/ref/PseudoInverse.html"&gt;&lt;code&gt;PseudoInverse&lt;/code&gt;&lt;/a&gt;という組み込みシンボルがあるが, これは &lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列を算出する. また R 言語の&lt;a href="https://www.rdocumentation.org/packages/pracma/versions/1.9.9/topics/pinv"&gt;&lt;code&gt;pinv&lt;/code&gt;&lt;/a&gt;関数も同様.&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;一意性の証明: いま \(X\) に 2 つの相異なる &lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列 \(A^{\dagger}\not =B^{\dagger}\) が存在すると仮定する. まず \(A^{\dagger}\) について, \(A^{\dagger} = A^{\dagger} X A^\dagger = A^\dagger(X A^\dagger)^T=A^\dagger(X B^\dagger X A^\dagger)^T=A^\dagger(X A^\dagger)^T(X B^\dagger)^T= A^\dagger X A^\dagger X B^\dagger=A^\dagger X B^\dagger\). 次に \(B^\dagger\) について, \(B^\dagger = B^\dagger X B^\dagger = (B^\dagger X)^T B^\dagger = (B^\dagger X A^\dagger X)^T B^\dagger = (A^\dagger X)^T (B^\dagger X)^T B^\dagger = A^\dagger X B^\dagger X B^\dagger = A^\dagger X B^\dagger\). 背理により, \(A^\dagger=B^\dagger\). \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;最小二乗形一般逆行列が &lt;span class="caps"&gt;MP&lt;/span&gt; 逆行列であることの証明: \(X^{\dagger}X=\underbrace{\left(X^T X\right)^{-1}X^T}_{X^\dagger} X=I\) だから \(\eqref{eq:sixth},\eqref{eq:seventh}, \eqref{eq:eigth}, \eqref{eq:ninth}\) より &lt;div class="math"&gt;\begin{eqnarray}X X^\dagger X&amp;amp;=&amp;amp;X\left(X^\dagger X\right)&amp;amp;=&amp;amp;X\\\ X^\dagger X X^\dagger&amp;amp;=&amp;amp;\left(X^\dagger X\right)X^\dagger&amp;amp;=&amp;amp;X^\dagger\\\ \left(X^\dagger X\right)^T&amp;amp;=&amp;amp;I^T&amp;amp;=&amp;amp;I&amp;amp;=&amp;amp;X^\dagger X\\\ \left(X X^\dagger\right)^T&amp;amp;=&amp;amp;\left\{X\left(X^T X\right)^{-1}X^T\right\}^T&amp;amp;=&amp;amp;X\left(X^T X\right)^{-1}X^T&amp;amp;=&amp;amp;X X^\dagger\end{eqnarray}&lt;/div&gt; なお最後の式変形では, \(\left(A B\right)^T =B^T A^T, \left(A^{-1}\right)^T=\left(A^T\right)^{-1}\) を用いた. \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;このような, \(\lambda\sum_{j=0}^{n}\left|a_j\right|^q\) で \(q=2\) の場合を Ridge 回帰という. また \(q=1\) のとき(すなわち正則化項が \(L^1\) ノルム)を Lasso 回帰という. さらに, これらの正則化項の線形結合の形式をとる Elastic Net 回帰というモデルもある(Elastic Net 回帰に関する&lt;a href="#ref1"&gt;参考文献2&lt;/a&gt;). この形式で表せる正則化項を用いる回帰をブリッジ回帰という.&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-10"&gt;
&lt;p&gt;このような, 線形性の見られるデータセットに従わず, かつ直交座標系における \(Y\) 軸方向にデータポイント \(\left(x&amp;#8217;_{ij},y_i\right)\) が外れているような点を垂直外れ値(英: vertical outlier)という. また同状況下で \(X\) 軸方向に大きく外れているような点を悪いレバレッジ点(英: bad leverage point)という. さらに, \(\left(x&amp;#8217;_{ij},y_i\right)\) が大多数のパターンに従うとき, それを良いレバレッジ点(英: good leverage point)という(\(\to\)&lt;a href="#ref4"&gt;参考文献8&lt;/a&gt;, &lt;a href="#ref5"&gt;参考文献9&lt;/a&gt;).&amp;#160;&lt;a class="footnote-backref" href="#fnref-10" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-11"&gt;
&lt;p&gt;&lt;span class="caps"&gt;LTS&lt;/span&gt; の歴史的背景および専門家らによる認識に関する言及: &lt;i&gt;Peter Rousseeuw introduced several robust regression estimators, including least median of squares (&lt;span class="caps"&gt;LMS&lt;/span&gt;) and least trimmed squares (&lt;span class="caps"&gt;LTS&lt;/span&gt;), see Rousseeuw (1984) as well as the monograph Rousseeuw and Leroy (1987). &lt;span class="caps"&gt;LTS&lt;/span&gt; converges at rate &lt;span class="math"&gt;\(n^{\frac{1}{2}}\)&lt;/span&gt; with the same assymptotic efficiency under normalityas Huber’s skip estimator. The &lt;span class="caps"&gt;LMS&lt;/span&gt; convergence rate is &lt;span class="math"&gt;\(n^{\frac{1}{3}}\)&lt;/span&gt; and its objective function is less smooth than &lt;span class="caps"&gt;LTS&lt;/span&gt;. As a consequence, as argued in Rousseeuw and van Driessen (2006), &lt;span class="caps"&gt;LTS&lt;/span&gt; is now preferred over &lt;span class="caps"&gt;LMS&lt;/span&gt;.&lt;/i&gt; &amp;#8212; &lt;a href="#ref2"&gt;参考文献7 pp.2&lt;/a&gt;, &lt;i&gt;この他にも残差の 2 乗のメディアンを最少にする &lt;span class="caps"&gt;LMS&lt;/span&gt; (least median of squares) などが提案されているが，いずれも収束が遅く，効率も高くないこともあり，Huber (2009) は根本的な問題の検討が必要と指摘している．&lt;/i&gt; &amp;#8212; &lt;a href="#ref3"&gt;参考文献5 pp.174&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-11" title="Jump back to footnote 11 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="haskell"></category></entry><entry><title>LU 分解</title><link href="https://falgon.github.io/roki.log/posts/2019/%201%E6%9C%88/01/LUDecomposition/" rel="alternate"></link><published>2019-01-01T00:00:00+09:00</published><updated>2019-01-01T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2019-01-01:/roki.log/posts/2019/ 1月/01/LUDecomposition/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解に関する網羅的なメモと実装&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解に関して初歩的な内容から網羅的にまとめた.&lt;/p&gt;
&lt;h3&gt;ガウスの消去法&lt;/h3&gt;
&lt;p&gt;ガウスの消去法は, 前進消去による上三角行列の形成と後退代入の組み合わせのことをいい, 
その本質は行列の行基本変形, すなわち中学校で習う連立方程式の解法そのものである.
例えば, 何の芸もないが,&amp;nbsp;次の連立方程式&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{cases}
x+2y&amp;amp;=&amp;amp;3  \\\
3x+4y&amp;amp;=&amp;amp;5
\end{cases}\leftrightarrow
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
3 &amp;amp; 4 &amp;amp; 5
\end{array}\right)\label{eq:sfour}\tag{1}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;をガウスの消去法では次のようにして解くのであった.&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
3 &amp;amp; 4 &amp;amp; 5
\end{array}\right)\to
\underbrace{
\left(\begin{array}{cc|c}
\overbrace{1}^{\times (-3)} &amp;amp; \overbrace{2}^{\times (-3)} &amp;amp; \overbrace{3}^{\times (-3)} \\\
\underline{3} &amp;amp; 4 &amp;amp; 5
\end{array}\right)
}_{\rm 前進消去}\to
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
0 &amp;amp; -2 &amp;amp; -4
\end{array}\right)\to
\underbrace{
\left(\begin{array}{cc|c}
1 &amp;amp; \underline{2} &amp;amp; 3 \\\
\overbrace{0}^{\times 1} &amp;amp; \overbrace{-2}^{\times 1} &amp;amp; \overbrace{-4}^{\times 1}
\end{array}\right)
}_{\rm 後退代入} \\\ \to
\left(\begin{array}{cc|c}
1 &amp;amp; 0 &amp;amp; -1 \\\
0 &amp;amp; -2 &amp;amp; -4
\end{array}\right) \\\
\therefore \left(x,y\right)=\left(-1\div 1,-4\div (-2)\right)=\left(-1,2\right)
$$&lt;/div&gt;
&lt;p&gt;この前進消去の操作は次のように行列の積で表現できる.&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{cc}
1 &amp;amp; 0 \\\
-3 &amp;amp; 1
\end{array}\right)
\left(\begin{array}{cc}
1 &amp;amp; 2 \\\
3 &amp;amp; 4
\end{array}\right)=
\left(\begin{array}{cc}
1 &amp;amp; 2 \\\
0 &amp;amp; -2
\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;これを理解しておくと後述する &lt;span class="caps"&gt;LU&lt;/span&gt; 分解の理解に容易くなる. ここで, この時間計算量について, 一般の \(n\) 次線形連立方程式
\(X\boldsymbol{a}=\boldsymbol{y}\ {\rm where}\ X\in\mathbb{R}^{n\times n}, 
\boldsymbol{a}\in\mathbb{R}^{n\times 1}, \boldsymbol{y}\in\mathbb{R}^{n\times 1}\)&amp;nbsp;を用いて考えるする.&lt;/p&gt;
&lt;div class="math"&gt;$$\left(\begin{array}{ccccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} &amp;amp; \cdots &amp;amp; x_{1n} \\\
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} &amp;amp; \cdots &amp;amp; x_{2n} \\\
x_{31} &amp;amp; x_{32} &amp;amp; x_{33} &amp;amp; \cdots &amp;amp; x_{3n} \\\
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
x_{n1} &amp;amp; x_{n2} &amp;amp; x_{n3} &amp;amp; \cdots &amp;amp; x_{nn}
\end{array}\right)
\left(\begin{array}{c}a_1 \\\ a_2 \\\ a_3 \\\ \vdots \\\ a_n\end{array}\right)=
\left(\begin{array}{c}y_1 \\\ y_2 \\\ y_3 \\\ \vdots \\\ y_n\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;まず前進消去の操作について考える.
前進消去では, \(x_{11}\) を使って残りの \(x_{21}, x_{31}, \cdots, x_{n1}\)
を掃き出していくのであった. ただし \(x_{21}, x_{31}, \cdots, x_{n1}\) は必ず &lt;span class="math"&gt;\(0\)&lt;/span&gt; 
となるのだから, これは実質の計算量として考える必要はないだろう.
すると \(x_{21}, x_{31}, \cdots, x_{n1}\) を掃きだすのに伴って,&amp;nbsp;実際の計算を要される部分というのは&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}{cccc}
x_{22} &amp;amp; x_{23} &amp;amp; \cdots &amp;amp; x_{2n} \\\
x_{32} &amp;amp; x_{33} &amp;amp; \cdots &amp;amp; x_{3n} \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
x_{n2} &amp;amp; x_{n3} &amp;amp; \cdots &amp;amp; x_{nn}
\end{array}
$$&lt;/div&gt;
&lt;p&gt;の箇所であることがいえる. 
この部分の成分数は \(\left(n-1\right)^2\)
なので, 一回目の前進消去では \(\left(n-1\right)^2\) 回の計算を行うことがわかる.
次に, 二回目の前進消去では \(x_{22}\) を使って, 
それと同列のそれよりも下の行の成分 \(x_{32},\cdots,x_{n2}\) を先と同様に消していくわけだが,
ここでも同様, \(x_{32},\cdots,x_{n2}\) は必ず &lt;span class="math"&gt;\(0\)&lt;/span&gt; なので,&amp;nbsp;実際に計算を行う部分は&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}{ccc}
x_{33} &amp;amp; \cdots &amp;amp; x_{3n} \\\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\\
x_{n3} &amp;amp; \cdots &amp;amp; x_{nn}
\end{array}
$$&lt;/div&gt;
&lt;p&gt;の箇所である. 
この部分の成分数は \(\left(n-2\right)^2\)
なので, 二回目の全身消去では \(\left(n-2\right)^2\) 回の計算を行うことがわかる.
これを繰り返すと,&amp;nbsp;計算を行う部分が残り一成分となるまで同様の計算回数がかかることがわかるから&lt;/p&gt;
&lt;p&gt;\[\left(n-1\right)^2+\left(n-2\right)^2+\cdots+2^2+1^2&amp;nbsp;=\sum^{n}_{i=1}\left(i-1\right)^2\]&lt;/p&gt;
&lt;p&gt;ここで, 高校数学の教科書にも載っている定理(証明略)
\(\sum^n_{j=1}j^2=\frac{n\left(n+1\right)\left(2n+1\right)}{6}\)
を思い出せば, 先の式は \(\sum^n_{i=1}\left(i-1\right)^2=\frac{n^3}{3}+n^2\)&amp;nbsp;と表せることがわかる.&lt;/p&gt;
&lt;p&gt;続いて, 後退代入について考える.
後退代入は, 上三角行列となっている係数行列に対して代入を繰り返し,&amp;nbsp;対角行列を形成していく操作であった.&lt;/p&gt;
&lt;div class="math"&gt;$$\left(\begin{array}{ccccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} &amp;amp; \cdots &amp;amp; x_{1n} \\\
&amp;amp; x_{22} &amp;amp; x_{23} &amp;amp; \cdots &amp;amp; x_{2n} \\\
&amp;amp; &amp;amp; x_{33} &amp;amp; \cdots &amp;amp; x_{3n} \\\
&amp;amp; &amp;amp; &amp;amp; \ddots &amp;amp; \vdots \\\
&amp;amp;&amp;amp;&amp;amp;&amp;amp; x_{nn}
\end{array}\right)
\left(\begin{array}{c}a_1 \\\ a_2 \\\ a_3 \\\ \vdots \\\ a_n\end{array}\right)=
\left(\begin{array}{c}y_1 \\\ y_2 \\\ y_3 \\\ \vdots \\\ y_n\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;この場合, まず \(x_{nn}\) を使って, 
\(x_{1n},x_{2n},x_{3n},\cdots,x_{\left(n-1\right)n}\) を消していくわけだが,
この際, 係数行列に対する操作というのはただ &lt;span class="math"&gt;\(0\)&lt;/span&gt; にしていくということだけである. 
これを \(x_{22}\) まで繰り返し行うわけだが, その間の係数行列に関する操作はただ &lt;span class="math"&gt;\(0\)&lt;/span&gt;
にしていくということだけなので, これを計算量に含む必要はない.
実際に計算が発生するのは, 右辺ベクトルの部分である.
まず \(y_n\) に対する計算は, 後退代入の操作を考えれば, 当然なにもする必要はない.
次に \(y_{n-1}\) に対する計算は
\(\left(y_{n-1}\right)&amp;#8217;=y_{n-1}-\frac{x_{\left(n-1\right)n}}{x_{nn}}y_n\) であり,
減算, 除算, 積算が各一回ずつ行われることがいえる.
次の \(y_{n-2}\) に対する計算も同様
\(y_{n-2}-\frac{x_{\left(n-2\right)n}}{x_{\left(n-1\right)n}}\left(y_{n-1}\right)&amp;#8217;\)
であり, 計算の形式は先と全く同じであるが, その前の後退代入の結果 \(\left(y_{n-1}\right)&amp;#8217;\) 
を用いている点で計算量は異なる. 
つまり, いま計算したい右辺ベクトルの成分を計算するのには, 
その一つ下の右辺ベクトルの成分に対する計算結果が必要となる(後退代入の操作そのもの)ことから,
これが \(y_1\) にまで及ぶことを考えると,&amp;nbsp;後退代入の総回数は&lt;/p&gt;
&lt;p&gt;\[1+2+\cdots+\left(n-1\right)=\frac{n\left(n-1\right)}{2}\]&lt;/p&gt;
&lt;p&gt;とかける(右辺への式変形の証明は高校数学の教科書で扱われているので略).
ガウスの消去法は前進消去と後退代入の組み合わせであるので,&amp;nbsp;その時間計算量は,&lt;/p&gt;
&lt;p&gt;\[O\left(\frac{n^3}{3}+\frac{n\left(n-1\right)}{2}\right)\label{eq:sthird}\tag{2}\]&lt;/p&gt;
&lt;p&gt;ただし各項の中で最高次の係数だけを考えればよいので,&amp;nbsp;ガウスの消去法の時間計算量は&lt;/p&gt;
&lt;p&gt;\[\frac{1}{3}O\left(n^3\right)\]&lt;/p&gt;
&lt;p&gt;である.&lt;/p&gt;
&lt;h3&gt;ガウス・ジョルダン法&lt;/h3&gt;
&lt;p&gt;ガウスの名がつく行列を用いた線形方程式の直接解法には, 
今述べたガウスの消去法のほかにガウス・ジョルダン法というものがある.
これらは明確に区別されたところであまり意味がないような気もするが,
ガウスの消去法が上記のように係数行列となる部分を単位行列でない対角行列へと変形していったのに対し,
ガウス・ジョルダン法はそれを直接単位行列となるように変形していく点で異なる.&amp;nbsp;ガウス・ジョルダン法で同様にして計算していくと,&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
3 &amp;amp; 4 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cc|c}
\overbrace{1}^{\times (-3)} &amp;amp; \overbrace{2}^{\times (-3)} &amp;amp; \overbrace{3}^{\times (-3)} \\\
\underline{3} &amp;amp; 4 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
0 &amp;amp; -2 &amp;amp; -4
\end{array}\right)\to
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
\overbrace{0}^{\times \left(-\frac{1}{2}\right)} &amp;amp; \overbrace{-2}^{\times \left(-\frac{1}{2}\right)} &amp;amp; \overbrace{-4}^{\times \left(-\frac{1}{2}\right)}
\end{array}\right) \\\ \to
\left(\begin{array}{cc|c}
1 &amp;amp; 2 &amp;amp; 3 \\\
0 &amp;amp; 1 &amp;amp; 2
\end{array}\right)\to
\left(\begin{array}{cc|c}
1 &amp;amp; \underline{2} &amp;amp; 3 \\\
\overbrace{0}^{\times (-2)} &amp;amp; \overbrace{1}^{\times (-2)} &amp;amp; \overbrace{2}^{\times (-2)}
\end{array}\right)\to
\left(\begin{array}{cc|c}
1 &amp;amp; 0 &amp;amp; -1 \\\
0 &amp;amp; 1 &amp;amp; 2
\end{array}\right) \\\
\therefore \left(x,y\right)=\left(-1,2\right)
$$&lt;/div&gt;
&lt;p&gt;これは掃き出し法とも言われることがある. 
ガウス・ジョルダン法の計算量は \(\frac{1}{2}O\left(n^3\right)\) なので(導出は省略),&amp;nbsp;ガウス・ジョルダン法をわざわざ用いるシーンはあまりない.&lt;/p&gt;
&lt;h3&gt;ピボッティング&lt;/h3&gt;
&lt;p&gt;ところで, いま示したガウスの消去法, ガウスジョルダン法の手順は, このままでは困る場合がある. 
例えば,&amp;nbsp;次の線形方程式をガウスの消去法で解いてみると&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
\overbrace{1}^{\times (-2)} &amp;amp; \overbrace{2}^{\times (-2)} &amp;amp; \overbrace{7}^{\times (-2)} &amp;amp; \overbrace{6}^{\times (-2)} &amp;amp; \overbrace{6}^{\times (-2)} \\\
\underline{2} &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
0 &amp;amp; 0 &amp;amp; -10 &amp;amp; -10 &amp;amp; -10 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
\overbrace{1}^{\times (-1)} &amp;amp; \overbrace{2}^{\times (-1)} &amp;amp; \overbrace{7}^{\times (-1)} &amp;amp; \overbrace{6}^{\times (-1)} &amp;amp; \overbrace{6}^{\times (-1)} \\\
0 &amp;amp; 0 &amp;amp; -10 &amp;amp; -10 &amp;amp; -10 \\\
\underline{1} &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
0 &amp;amp; 0 &amp;amp; -10 &amp;amp; -10 &amp;amp; -10 \\\
0 &amp;amp; 6 &amp;amp; -2 &amp;amp; -4 &amp;amp; 6 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
\overbrace{1}^{\times (-2)} &amp;amp; \overbrace{2}^{\times (-2)} &amp;amp; \overbrace{7}^{\times (-2)} &amp;amp; \overbrace{6}^{\times (-2)} &amp;amp; \overbrace{6}^{\times (-2)} \\\
0 &amp;amp; 0 &amp;amp; -10 &amp;amp; -10 &amp;amp; -10 \\\
0 &amp;amp; 6 &amp;amp; -2 &amp;amp; -4 &amp;amp; 6 \\\
\underline{2} &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
0 &amp;amp; 0 &amp;amp; -10 &amp;amp; -10 &amp;amp; -10 \\\
0 &amp;amp; 6 &amp;amp; -2 &amp;amp; -4 &amp;amp; 6 \\\
0 &amp;amp; 0 &amp;amp; -11 &amp;amp; -9 &amp;amp; -7
\end{array}\right)\to
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
0 &amp;amp; \overbrace{0}^{\times \left(-\frac{6}{0}\right)} &amp;amp; \overbrace{-10}^{\times \left(-\frac{6}{0}\right)} &amp;amp; \overbrace{-10}^{\times \left(-\frac{6}{0}\right)} &amp;amp; \overbrace{-10}^{\times \left(-\frac{6}{0}\right)} \\\
0 &amp;amp; \underline{6} &amp;amp; -2 &amp;amp; -4 &amp;amp; 6 \\\
0 &amp;amp; 0 &amp;amp; -11 &amp;amp; -9 &amp;amp; -7
\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;というように &lt;span class="math"&gt;\(0\)&lt;/span&gt; で割るということが起きてしまうのである.
これを防ぐために考えられる方法としては,
掃きだすのに利用する値がその列の中で絶対値最大となるように行を入れ替える.
これは, 部分ピボット選択付きガウスの消去法といわれる. 
ピボットとは, いま述べた掃きだすのに利用する値のことである. 
部分ピボット選択といわれる理由は, 入れ替えの操作が行に対してのみ行われるからである.
列に対する入れ替え操作をも含んだ方法は完全ピボット選択といわれるが,
当然それは行基本変形の範疇でないので,
そのまま計算を続行して単に右辺ベクトルを取り出せばよいという話ではなくなる.
完全ピボット選択は, 絶対値最大の値の選択の余地が部分ピボット選択よりも当然広がるので,
直感的に, より大きな絶対値の値をピボットとして選択できる確率が上がることは考えられるだろう.
しかしながら, このアドバンテージは当然行列に依存したものであり,
プログラムの複雑度が上がることに釣り合っていないため,&amp;nbsp;実際に用いられるようなことはあまりないと思われる.&lt;/p&gt;
&lt;p&gt;というわけで, 
下記に部分ピボット選択付きガウスの消去法による計算過程を省略することなく書き下したが,
とくに面白みもない上に長いので隠しておいた.
&lt;em onclick="obj=document.getElementById('open_gaussian_piv_com').style; obj.display=(obj.display=='none')?'block':'none';"&gt;
&lt;a style="font-style: normal; cursor:pointer;"&gt;クリックで展開.&lt;/a&gt;
&lt;/em&gt;
&lt;div id="open_gaussian_piv_com" style="display:none;clear:both;"&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{cccc|c}
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
1 &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
\overbrace{2}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{4}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{4}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{2}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{2}^{\times\left(-\frac{1}{2}\right)} \\\
\underline{1} &amp;amp; 2 &amp;amp; 7 &amp;amp; 6 &amp;amp; 6 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
1 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
\overbrace{2}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{4}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{4}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{2}^{\times\left(-\frac{1}{2}\right)} &amp;amp; \overbrace{2}^{\times\left(-\frac{1}{2}\right)} \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
\underline{1} &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 12 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
2 &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\\\ \to
\left(\begin{array}{cccc|c}
\overbrace{2}^{\times (-1)} &amp;amp; \overbrace{4}^{\times (-1)} &amp;amp; \overbrace{4}^{\times (-1)} &amp;amp; \overbrace{2}^{\times (-1)} &amp;amp; \overbrace{2}^{\times (-1)} \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
\underline{2} &amp;amp; 4 &amp;amp; 3 &amp;amp; 3 &amp;amp; 5
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 1 &amp;amp; 3
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 1 &amp;amp; 3
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 1 &amp;amp; 3
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; \overbrace{5}^{\times\frac{1}{5}} &amp;amp; \overbrace{5}^{\times\frac{1}{5}} &amp;amp; \overbrace{5}^{\times\frac{1}{5}} \\\
0 &amp;amp; 0 &amp;amp; \underline{-1} &amp;amp; 1 &amp;amp; 3
\end{array}\right)\to
\underbrace{\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right)}_{上三角行列} \\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; \underline{2} &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \overbrace{2}^{\times(-1)} &amp;amp; \overbrace{4}^{\times(-1)}
\end{array}\right) \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 1 &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; \underline{1} &amp;amp; 11 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \overbrace{2}^{\times \left(-\frac{1}{2}\right)} &amp;amp; \overbrace{4}^{\times \left(-\frac{1}{2}\right)}
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; \underline{5} &amp;amp; 5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \overbrace{2}^{\times \left(-\frac{5}{2}\right)} &amp;amp; \overbrace{4}^{\times \left(-\frac{5}{2}\right)}
\end{array}\right)\to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 0 &amp;amp; -5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; \underline{4} &amp;amp; 0 &amp;amp; -2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; \overbrace{5}^{\times \left(-\frac{4}{5}\right)} &amp;amp; \overbrace{0}^{\times \left(-\frac{4}{5}\right)} &amp;amp; \overbrace{-5}^{\times \left(-\frac{4}{5}\right)} \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 3 &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 0 &amp;amp; -5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; \underline{3} &amp;amp; 0 &amp;amp; 9 \\\
0 &amp;amp; 0 &amp;amp; \overbrace{5}^{\times \left(-\frac{3}{5}\right)} &amp;amp; \overbrace{0}^{\times \left(-\frac{3}{5}\right)} &amp;amp; \overbrace{-5}^{\times \left(-\frac{3}{5}\right)} \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \\\ \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 4 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 \\\
0 &amp;amp; 6 &amp;amp; 0 &amp;amp; 0 &amp;amp; 12 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 0 &amp;amp; -5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \to
\left(\begin{array}{cccc|c}
2 &amp;amp; \underline{4} &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 \\\
0 &amp;amp; \overbrace{6}^{\times\left(-\frac{2}{3}\right)} &amp;amp; \overbrace{0}^{\times\left(-\frac{2}{3}\right)} &amp;amp; \overbrace{0}^{\times\left(-\frac{2}{3}\right)} &amp;amp; \overbrace{12}^{\times\left(-\frac{2}{3}\right)} \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 0 &amp;amp; -5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \to
\left(\begin{array}{cccc|c}
2 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; -6 \\\
0 &amp;amp; 6 &amp;amp; 0 &amp;amp; 0 &amp;amp; 12 \\\
0 &amp;amp; 0 &amp;amp; 5 &amp;amp; 0 &amp;amp; -5 \\\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 2 &amp;amp; 4
\end{array}\right) \\\
\therefore \left(-6\div 2,12\div 6, -5\div 0, 4\div 2\right)^T =\left(-3,2,-1,2\right)^T
$$&lt;/div&gt;
&lt;p&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解&lt;/h3&gt;
&lt;p&gt;漸く本題の &lt;span class="caps"&gt;LU&lt;/span&gt; 分解(&lt;span class="caps"&gt;LR&lt;/span&gt; 分解, 三角分解)について.
簡単のために式 \(\eqref{eq:sfour}\) を使って &lt;span class="caps"&gt;LU&lt;/span&gt; 分解の導出をする.
式 \(\eqref{eq:sfour}\)&amp;nbsp;は次の式と同値である.&lt;/p&gt;
&lt;div class="math"&gt;$$
A^{(0)}\left(\begin{array}{c}x \\\ y\end{array}\right)=\boldsymbol{v}
\ {\rm where}\ A^{(0)}=\left(\begin{array}{cc}1 &amp;amp; 2 \\\ 3 &amp;amp; 4\end{array}\right),\boldsymbol{v}=\left(\begin{array}{c}3\\\ 5\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;\({A^{(0)}}^{-1}\boldsymbol{v}\) とすれば \(\left(x,y\right)^T\) は求まるが, 逆行列の計算はガウスの消去法により \(\frac{1}{3}O(n^3)\) の時間計算量がかかる.
一定の条件下でそれよりも高速に求める方法を考えることとする.
いま \(A^{(0)}\) を徐に上三角行列にすることを考えると,&amp;nbsp;ガウスの消去法の前進消去より&lt;/p&gt;
&lt;div class="math"&gt;$$
A^{(1)}=L^{(1)}A^{(0)}=\left(\begin{array}{cc}1 &amp;amp; 2 \\\ 0 &amp;amp; -2\end{array}\right)
\leftrightarrow
A^{(0)}={L^{(1)}}^{-1}A^{(1)}
\ {\rm where}\ L^{(1)}=\left(\begin{array}{cc}1 &amp;amp; 0 \\\ -3 &amp;amp; 1\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;従って&lt;/p&gt;
&lt;div class="math"&gt;$$
{L^{(1)}}^{-1}A^{(1)}\left(\begin{array}{c}x \\\ y\end{array}\right)=\boldsymbol{v}
$$&lt;/div&gt;
&lt;p&gt;ここで, \(\boldsymbol{b}=A^{(1)}\left(x,y\right)^T\) とおくと, 上の式は \({L^{(1)}}^{-1}\boldsymbol{b}=\boldsymbol{v}\) と同値であり,
この式を用いて \(\boldsymbol{b}\) について解くことができる. 
まずこの時間計算量を考えるとする.
\(L^{(1)}\) は元々前進消去のための行列であり, それは必ず下三角行列である.
正則な下三角行列の逆行列は下三角行列であり(証明略), いま \(L^{(1)}\) が正則であるとする(これが特異となるような場合には後述する &lt;span class="caps"&gt;PLU&lt;/span&gt; 分解が有効)と,
その計算は前進代入(上記後退代入の下三角行列バージョンと考えればよい)を実行すればよいので, 時間計算量は \(\frac{1}{2}O\left(n^2\right)\ \because\eqref{eq:sthird}\)&amp;nbsp;となる.&lt;/p&gt;
&lt;p&gt;その後に \(A^{(1)}\left(x,y\right)^T=\boldsymbol{b}\) を \(\left(x,y\right)^T\) について解くわけであるが,
\(A^{(1)}\) は上三角行列であるので, その計算にはガウスの消去法の後退代入を実行すれば良く, 従ってその時間計算量は 
\(\frac{1}{2}O\left(n^2\right)\ \because\eqref{eq:sthird}\)&amp;nbsp;である.&lt;/p&gt;
&lt;p&gt;よって, この一連の操作における時間計算量は \(\frac{1}{3}O\left(n^3\right)\) であり,&amp;nbsp;部分ピボットつきガウスの消去法を実行した場合と変わらない.&lt;/p&gt;
&lt;p&gt;しかし, \(L U\) を流用できる(つまり, 共通の \(A^{(0)}\) に対し異なる右辺ベクトル \(\boldsymbol{v}\) から成る連立方程式を解く)とすればどうだろう.
この場合, やらなければならない計算は前進代入および後退代入のみなので,
全体の時間計算量は \(\frac{1}{2}O\left(n^2\right)\) となり,&amp;nbsp;先よりも高速に解を得ることができる.&lt;/p&gt;
&lt;p&gt;いまの説明では, 式 \(\eqref{eq:sfour}\) において \(A^{(0)}\) を \({L^{(1)}}^{-1}\) と \(A^{(1)}\) に分解したが, これを &lt;span class="caps"&gt;LU&lt;/span&gt; 分解(\(L={L^{(1)}}^{-1},U=A^{(1)}\))といい, 
\(L^{(i)}\) が正則ならば,&amp;nbsp;一般の場合においても同様にしていうことができる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading def"&gt;&lt;a name="LU" class="disabled"&gt;&lt;span class="caps"&gt;LU&lt;/span&gt; 分解(外積形式ガウス法)&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
    すべての前進消去の行列 &amp;#92;(L^{(i)}&amp;#92;) が正則ならば &amp;#92;(A\in\mathbb{R}^{m\times n}&amp;#92;) に対する &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は 
    &amp;#92;[A=A^{(0)}=L U\ {\rm where}\ L=\prod_{i=1}^{n-1}{L^{(i)}}^{-1}, U=A^{(n-1)}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;補足すると, \(A^{(0)}\) に対し \(n-1\) 回の前進消去をするというのは, \(L^{(n-1)}\cdots L^{(2)}L^{(1)}A^{(0)}\) ということであり,
\(\lambda=L^{(n-1)}\cdots L^{(2)}L^{(1)}\) とおくと \(\lambda A^{(0)}=U=A^{(n-1)}\) だから \(A^{(0)}=\lambda^{-1}U\). 
ここで逆行列の公式 \(\left(X Y\right)^{-1}=Y^{-1} X^{-1}\) より(証明略)上式となる.
一般論を得たところで, 実際に一つ &lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解を実践してみることとする.&lt;/p&gt;
&lt;div class="math"&gt;$$
A^{(0)}=
\left(\begin{array}{ccc}
3 &amp;amp; 1 &amp;amp; 0 \\\
6 &amp;amp; 1 &amp;amp; -2 \\\
-3 &amp;amp; 0 &amp;amp; 3
\end{array}\right)\to
\underbrace{\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
-2 &amp;amp; 1 &amp;amp; 0 \\\
1 &amp;amp; 0 &amp;amp; 1
\end{array}\right)}_{L^{(1)}}
\left(\begin{array}{ccc}
3 &amp;amp; 1 &amp;amp; 0 \\\
6 &amp;amp; 1 &amp;amp; -2 \\\
-3 &amp;amp; 0 &amp;amp; 3
\end{array}\right)=
\underbrace{
\left(\begin{array}{ccc}
3 &amp;amp; 1 &amp;amp; 0 \\\
0 &amp;amp; -1 &amp;amp; -2 \\\
0 &amp;amp; 1 &amp;amp; 3
\end{array}\right)
}_{A^{(1)}} \\\
\to
\underbrace{
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
0 &amp;amp; 1 &amp;amp; 1
\end{array}\right)
}_{L^{(2)}}
A^{(1)}=
\underbrace{
\left(\begin{array}{ccc}
3 &amp;amp; 1 &amp;amp; 0 \\\
0 &amp;amp; -1 &amp;amp; -2 \\\
0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)}_{A^{(2)}}
$$&lt;/div&gt;
&lt;p&gt;より &lt;/p&gt;
&lt;div class="math"&gt;$$L=\left(L^{(2)}L^{(1)}\right)^{-1}=\left(\begin{array}{ccc} 1 &amp;amp; 0 &amp;amp; 0 \\\ 2 &amp;amp; 1 &amp;amp; 0 \\\ -1 &amp;amp; -1 &amp;amp; 1 \end{array}\right),U=A^{(2)}$$&lt;/div&gt;
&lt;p&gt;
実際には, すべてを減算で考えることで, \(\left(L^{(2)}L^{(1)}\right)^{-1}\) の計算は楽に済む(つまり
&lt;span class="math"&gt;\(A^{0}=\left(\boldsymbol{a_1}^T,\boldsymbol{a_2}^T,\boldsymbol{a_3}^T\right)^T\)&lt;/span&gt; としたとき
\(\underline{2}\boldsymbol{a_1}-\boldsymbol{a_2}, \underline{-1}\boldsymbol{a_1}-\boldsymbol{a_3}, \underline{-1}\boldsymbol{a_2}-\boldsymbol{a_3}\) より \(L\)&amp;nbsp;が導けるということ).&lt;/p&gt;
&lt;p&gt;この導出過程を見ればなんとなく &lt;span class="caps"&gt;LU&lt;/span&gt; 分解が一意となることは直感的にも納得できるが,&amp;nbsp;一応証明を与えておく.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading theo"&gt;&lt;a name="theorem1" class="disabled"&gt;定理 1&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&lt;span class="caps"&gt;LU&lt;/span&gt; 分解された &amp;#92;(L,U&amp;#92;) は一意に決まる
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;
正則行列 \(A\) の &lt;span class="caps"&gt;LU&lt;/span&gt; 分解 \(A= L U\) に対して \(A= L_{1}U_{1} = L_{2}U_{2} \leftrightarrow L_{2}^{-1}L_{1} = U_{2}U_{1}^{-1}\) とおく.
\(L\) は元々下三角行列であり下三角行列の逆行列は下三角行列, また下三角行列の積は下三角行列だから \(L_{2}^{-1}L_{1}\) は下三角行列である.
\(U\) は元々上三角行列であり上三角行列の逆行列は上三角行列, また上三角行列の積は上三角行列だから \(U_{2}U_{1}^{-1}\) は上三角行列である.
従って, 両行列は上および下三角行列でなければならず, それを満たす唯一の行列は対角行列であり, \(L\) の対角成分は元々 \(1\) であるから
\(L_{2}^{-1}L_{1} = I = U_{2}U_{1}^{-1}\). 
故に \(L_{2}=L_{1}, U_{2}=U_{1}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;次に, 次のような行列に対する &lt;span class="caps"&gt;LU&lt;/span&gt;&amp;nbsp;分解を考えてみる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
A=\left(\begin{array}{ccc}
0 &amp;amp; 1 &amp;amp; 0 \\\
-8 &amp;amp; 8 &amp;amp; 1 \\\
2 &amp;amp; -2 &amp;amp; 0
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;見てわかるように, 前進消去の段階で \(-8\div 0\) となってしまい計算できない.
しかし, これも部分ピボット選択付きガウスの消去法と同様に, 絶対値最大の値がピボットとなるように行を予め入れ替えておけば,
計算が続行できる.
そのような手続きのある &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は &lt;span class="caps"&gt;PLU&lt;/span&gt; 分解といわれ, 置換行列 \(P\in\mathbb{R}^{m\times n}\) をつかって, \(A=P L U\) とする.
以下 \(A\) をつかって導出してみることとする. \(\boldsymbol{a_1}^T\) と \(\boldsymbol{a_2}^T\)&amp;nbsp;を入れ替えれば良いので,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\underbrace{\left(\begin{array}{ccc}
0 &amp;amp; 1 &amp;amp; 0 \\\
1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)}_{P^{(1)}}A=
\underbrace{\left(\begin{array}{ccc}
-8 &amp;amp; 8 &amp;amp; 1 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
2 &amp;amp; -2 &amp;amp; 0
\end{array}\right)}_{A'}\to
\underbrace{\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
\frac{1}{4} &amp;amp; 0 &amp;amp; 1
\end{array}\right)}_{L^{(1)}}A'=
\underbrace{\left(\begin{array}{ccc}
-8 &amp;amp; 8 &amp;amp; 1 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; \frac{1}{4}
\end{array}\right)}_{A'^{(1)}}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;より &lt;/p&gt;
&lt;div class="math"&gt;$$L = {L^{(1)}}^{-1}=\left(\begin{array}{ccc}1 &amp;amp; 0 &amp;amp; 0 \\\ 0 &amp;amp; 1 &amp;amp; 0 \\\ -\frac{1}{4} &amp;amp; 0 &amp;amp; 1\end{array}\right),U={A'}^{(1)}$$&lt;/div&gt;
&lt;p&gt;とおくと \(A&amp;#8217;={L^{(1)}}^{-1}{A&amp;#8217;}^{(1)}\)&amp;nbsp;だから&lt;/p&gt;
&lt;div class="math"&gt;$$P^{(1)}A=L U$$&lt;/div&gt;
&lt;p&gt;\(P^{(1)}\) は元々置換行列であるから正則であり, また直行行列でもある. 
すなわち \({P=P^{(1)}}^{-1}={P^{(1)}}^T\)&amp;nbsp;とおけて&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
A&amp;amp;=&amp;amp;P L U\\\
\left(\begin{array}{ccc}
0 &amp;amp; 1 &amp;amp; 0 \\\
-8 &amp;amp; 8 &amp;amp; 1 \\\
2 &amp;amp; -2 &amp;amp; 0
\end{array}\right)&amp;amp;=&amp;amp;
\left(\begin{array}{ccc}
0 &amp;amp; 1 &amp;amp; 0 \\\
1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
-\frac{1}{4} &amp;amp; 0 &amp;amp; 1
\end{array}\right)
\left(\begin{array}{ccc}
-8 &amp;amp; 8 &amp;amp; 1 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; \frac{1}{4}
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで \(\boldsymbol{a}\in\mathbb{R}^{n\times 1},\boldsymbol{v}\in\mathbb{R}^{n\times 1}\) に対して
\(P L U \boldsymbol{a}=\boldsymbol{v}\) というように, &lt;span class="caps"&gt;PLU&lt;/span&gt; 分解を用いて連立方程式解くことを考えると,
\(L\underbrace{\left(U\boldsymbol{a}\right)}_{\boldsymbol{b}}=P^{-1}\boldsymbol{v}\) だから先と同様にまず前進代入によって
\(\boldsymbol{b}\) を求め(このときの \(P^{-1}\boldsymbol{v}\) は \(P^{-1}=P^{(1)}\) であり, また置換行列であるので, その計算は単に \(\boldsymbol{v}\) を並び替えるだけである),
\(U\boldsymbol{a}=\boldsymbol{b}\) を \(\boldsymbol{a}\)&amp;nbsp;について後退代入によって求めればよい.&lt;/p&gt;
&lt;p&gt;さて, 数学的な言葉では, 以上のように書き下すことで十分であるが,
これをプログラムで組むことを考えると, 様々な工夫やアプローチが考えられる.
まず \(L, U\) はそれぞれ必ず上三角行列, 
下三角行列であり &lt;span class="math"&gt;\(0\)&lt;/span&gt; や &lt;span class="math"&gt;\(1\)&lt;/span&gt; の部分をそのまま持っているのは無駄である.
従って \(L, U\)&amp;nbsp;の値は次のように一つの行列として持っておけば十分.&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{ccc}
-8 &amp;amp; 8 &amp;amp; 1 \\\
0 &amp;amp; 1 &amp;amp; 0 \\\
-\frac{1}{4} &amp;amp; 0 &amp;amp; \frac{1}{4}
\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;また, 置換行列 &lt;span class="math"&gt;\(P\)&lt;/span&gt; はただの並び替えでなので, これも各インデックスへの対応関係をテーブルにでもしておけば十分.
サンプル実装, 実行例を下記に示す.
Haskell で書いたわけだが, 普通の &lt;span class="caps"&gt;ST&lt;/span&gt; モナドによる実装とリストによる実装をそれぞれ行った.
&lt;em onclick="obj=document.getElementById('open_lu').style; obj.display=(obj.display=='none')?'block':'none';"&gt;
&lt;a style="font-style: normal; cursor:pointer;"&gt;クリックで実装を開く.&lt;/a&gt;
&lt;/em&gt;
&lt;div id="open_lu" style="display:none;clear:both;"&gt;
&lt;script src="https://gist-it.appspot.com/https://github.com/falgon/PlayLinearAlgebra/blob/7a387f803e1ee30d3e7e83915b88eea18d7e096b/src/Math/Matrix/Core.hs?slice=138:217"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;LU&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lu&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PLU&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;    &lt;span class="mf"&gt;8.0&lt;/span&gt;     &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;    &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;   &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="mf"&gt;0.25&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;luST&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PLU&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;    &lt;span class="mf"&gt;8.0&lt;/span&gt;     &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;    &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;   &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="mf"&gt;0.25&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;連立方程式を解く.
&lt;em onclick="obj=document.getElementById('open_resolveLinearEq').style; obj.display=(obj.display=='none')?'block':'none';"&gt;
&lt;a style="font-style: normal; cursor:pointer;"&gt;クリックで実装を開く.&lt;/a&gt;
&lt;/em&gt;
&lt;div id="open_resolveLinearEq" style="display:none;clear:both;"&gt;
&lt;script src="https://gist-it.appspot.com/https://github.com/falgon/PlayLinearAlgebra/blob/7a387f803e1ee30d3e7e83915b88eea18d7e096b/src/Math/Matrix/Core.hs?slice=258:305"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;resolveLinearEq&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plu&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luST&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PLU&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;plu&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mf"&gt;2.0&lt;/span&gt;     &lt;span class="mf"&gt;4.0&lt;/span&gt;     &lt;span class="mf"&gt;4.0&lt;/span&gt;     &lt;span class="mf"&gt;2.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mf"&gt;0.5&lt;/span&gt;     &lt;span class="mf"&gt;6.0&lt;/span&gt;     &lt;span class="mf"&gt;3.0&lt;/span&gt;     &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mf"&gt;0.5&lt;/span&gt;     &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="mf"&gt;5.0&lt;/span&gt;     &lt;span class="mf"&gt;5.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;    &lt;span class="mf"&gt;2.0&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="n"&gt;plu&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="n"&gt;plu&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.6666666666666667&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.6666666666666666&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fromJust&lt;/span&gt; &lt;span class="n"&gt;plu&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.666666666666667&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.8666666666666667&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ところで, &lt;span class="caps"&gt;LU&lt;/span&gt; 分解をしておくと逆行列も簡単に求めることがすぐに示せる.
逆行列とはそもそも \(A A^{-1} =I\) であり, 
\(A^{-1}=\left(\boldsymbol{a^{-1}_1},\boldsymbol{a^{-1}_2},\cdots,\boldsymbol{a^{-1}}_m\right), I=\left(\boldsymbol{I_1},\boldsymbol{I_2},\cdots,\boldsymbol{I_m}\right)\) 
とすると行列の積の定義より \(A \boldsymbol{a^{-1}_i}=\boldsymbol{I_i}\ {\rm where\ } i\in\mathbb{Z}^{+}, 1\leq i\leq m\) だから, 
\(A=L U\) と分解して \(1\) から \(m\) までのすべての \(\boldsymbol{a^{-1}}_i\) を得てそれらをそのまま 1 つの行列とすればよい.
当然ながら, 構成される方程式のうち変わる部分は \(\boldsymbol{a^{-1}}_i\) と \(I_i\) の部分だけなので, &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は一度行うだけで済む.
プログラムでの実行例. 
&lt;em onclick="obj=document.getElementById('open_inverse').style; obj.display=(obj.display=='none')?'block':'none';"&gt;
&lt;a style="font-style: normal; cursor:pointer;"&gt;クリックで実装を開く.&lt;/a&gt;
&lt;/em&gt;
&lt;div id="open_inverse" style="display:none;clear:both;"&gt;
&lt;script src="https://gist-it.appspot.com/https://github.com/falgon/PlayLinearAlgebra/blob/7a387f803e1ee30d3e7e83915b88eea18d7e096b/src/Math/Matrix/Core.hs?slice=306:324"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inverse&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただし, 逆行列の計算には今述べたようにすべての \(\boldsymbol{I^{-1}}_i\) に関して代入操作を行わなければならないので,
\(A\boldsymbol{x}=\boldsymbol{v}\) といった方程式を解く目的で逆行列 \(A^{-1}\)&amp;nbsp;を求めることはただの愚行である.&lt;/p&gt;
&lt;p&gt;また, &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は行列式の計算も簡単にする. 
\(A= L U\) ならば積の行列式は行列式の積(証明略)なので \(\left|A\right|=\left|L U\right|=\left|L\right|\left|U\right|\) であるが,
上および下三角行列の行列式は対角成分の積(証明略)であるので \(\left|L\right|=1\) である.
よって \(\left|A\right|=\prod_{i=1}^{n}\boldsymbol{u}_{ii}\) である.
置換行列 \(P\) を考慮すれば, いま \(S\) を &lt;span class="caps"&gt;LU&lt;/span&gt; 分解の過程で行の入れ替えを行った回数としたとき,
\(\left|A\right|=\left|P\right|\left|L\right|\left|U\right|=(-1)^S \prod_{i=1}^{n}\boldsymbol{u}_{ii}\) となる.
また, 後述する Crout 法では \(U\) のすべての対角成分を &lt;span class="math"&gt;\(1\)&lt;/span&gt; とするので, その場合 \(\left|A\right| = (-1)^S \prod_{i=1}^{n}\boldsymbol{l}_{ii}\) となる.
&lt;em onclick="obj=document.getElementById('open_det').style; obj.display=(obj.display=='none')?'block':'none';"&gt;
&lt;a style="font-style: normal; cursor:pointer;"&gt;クリックで実装を開く.&lt;/a&gt;
&lt;/em&gt;
&lt;div id="open_det" style="display:none;clear:both;"&gt;
&lt;script src="https://gist-it.appspot.com/https://github.com/falgon/PlayLinearAlgebra/blob/7a387f803e1ee30d3e7e83915b88eea18d7e096b/src/Math/Matrix/Core.hs?slice=326:340"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;determinant&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;toMat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="nf"&gt;λ&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;determinant&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;toMat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mf"&gt;120.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なお, &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は &lt;span class="caps"&gt;LDU&lt;/span&gt; 分解ともいわれることがある. その場合, 上記の \(U\) に含まれる対角成分を対角行列 \(D\) に分離して \(A = L D U\)&amp;nbsp;とする.&lt;/p&gt;
&lt;div class="math"&gt;$$
L D U=
\left(\begin{array}{cccc}
1 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \\\
l_{21} &amp;amp; 1 &amp;amp; \cdots &amp;amp; 0 \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\
l_{m1} &amp;amp; l_{m2} &amp;amp; \cdots &amp;amp; 1
\end{array}\right)
\mathrm{diag}\left(d_1,\cdots,d_m\right)
\left(\begin{array}{cccc}
1 &amp;amp; u_{12} &amp;amp; \cdots &amp;amp; u_{1n} \\\
0 &amp;amp; 1 &amp;amp; \cdots &amp;amp; u_{2n} \\\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\\ 
0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1
\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;ところで, \(A\in\mathbb{R}^{m\times n}\) が対称行列ならば, この &lt;span class="caps"&gt;LDU&lt;/span&gt; 分解は \(A=L D L^{T}\)&amp;nbsp;と計算することができる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading theo"&gt;&lt;a name="theorem2" class="disabled"&gt;定理 2&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(A=A^T\ {\rm where}\ A\in\mathbb{R}^{m\times n}&amp;#92;) ならば &amp;#92;(A&amp;#92;) の &lt;span class="caps"&gt;LDU&lt;/span&gt; 分解は &amp;#92;(A=L D L^{T}&amp;#92;)
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;
\(M^T = D^{-1}U\) とし \(A\) の &lt;span class="caps"&gt;LDU&lt;/span&gt; 分解を \(A= L D M^T\) とおくと \[A = A^T = \left(L D M^T\right)^T = M D L^T = L U\]
ここで, 第二辺から第三辺への変形は, 積の転置は積の左右を入れ替えた転置の積なる公式を用いた.
このとき \(M\left(D L^T\right)\) と \(L U\) は &lt;span class="caps"&gt;LU&lt;/span&gt; 分解の 2 つの表現であるが, &lt;a href="#theorem1"&gt;定理 1&lt;/a&gt; より &lt;span class="caps"&gt;LU&lt;/span&gt; 分解は一意であるから
\(M=L\) でなければならない(後述する Crout 法の &lt;span class="caps"&gt;LU&lt;/span&gt; 分解ならば \(M=L D\) でなければならない. 導かれる結論は同じ).
従って \(L D M^T = L D L^T\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;ここまで述べてきた &lt;span class="caps"&gt;LU&lt;/span&gt; 分解の方法は, 外積形式ガウス法といわれるものであるが,
&lt;span class="caps"&gt;LU&lt;/span&gt; 分解の他の方法として内積形式ガウス法(以下 Doolittle 法), クラウト法がある. 
簡単のために \(n=3\) として, 行列 \(X\) を次のように下三角行列 \(L\in\mathbb{R}^{3\times 3}\) 
と上三角行列 \(U\in\mathbb{R}^{3\times 3}\) に分解することを考える.
このとき \(X = L&amp;#8217; D U&amp;#8217;\) に対して \(L = L&amp;#8217; D\) とおいて \(X = L U&amp;#8217;\) というように分解できることを過程して行列 \(L,U&amp;#8217;\) を導出することを Doolittle 法,
また \(U=D U&amp;#8217;\) とおいて \(X = L&amp;#8217; U\) というように分解できることを過程して行列 \(L&amp;#8217; U\) を導出することを Crout&amp;nbsp;法という.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
X= L U'\leftrightarrow 
\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} \\\
x_{31} &amp;amp; x_{32} &amp;amp; x_{33}
\end{array}\right)=\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
l_{21} &amp;amp; 1 &amp;amp; 0 \\\
l_{31} &amp;amp; l_{32} &amp;amp; 1
\end{array}\right)\left(\begin{array}{ccc}
u_{11} &amp;amp; u_{12} &amp;amp; u_{13} \\\
0 &amp;amp; u_{22} &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; u_{33}
\end{array}\right)&amp;amp;:=&amp;amp;{\rm Doolittle\ 法} \\\
X= L' U\leftrightarrow 
\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} \\\
x_{31} &amp;amp; x_{32} &amp;amp; x_{33}
\end{array}\right)=\left(\begin{array}{ccc} 
l_{11} &amp;amp; 0 &amp;amp; 0 \\\
l_{21} &amp;amp; l_{22} &amp;amp; 0 \\\
l_{31} &amp;amp; l_{32} &amp;amp; l_{33} 
\end{array}\right)\left(\begin{array}{ccc}
1 &amp;amp; u_{12} &amp;amp; u_{13} \\\
0 &amp;amp; 1 &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)&amp;amp;:=&amp;amp;{\rm Crout\ 法}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;いま行列 \(X\) を Doolittle 法により &lt;span class="caps"&gt;LU&lt;/span&gt; 分解できたならば
\(L U&amp;#8217;\) を単に計算して \(X=L U&amp;#8217;\)&amp;nbsp;は次のようにかけるはずである.&lt;/p&gt;
&lt;div class="math"&gt;$$
\left(\begin{array}{ccc}
u_{11} &amp;amp; u_{12} &amp;amp; u_{13} \\\
l_{21}u_{11} &amp;amp; l_{21}u_{12}+u_{22} &amp;amp; l_{21}u_{13}+u_{23} \\\
l_{31}u_{11} &amp;amp; l_{31}u_{12}+l_{32}u_{22} &amp;amp; l_{31}u_{13}+l_{32}u_{23}+u_{33}
\end{array}\right)=
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
l_{21} &amp;amp; 1 &amp;amp; 0 \\\
l_{31} &amp;amp; l_{32} &amp;amp; 1
\end{array}\right)\left(\begin{array}{ccc}
u_{11} &amp;amp; u_{12} &amp;amp; u_{13} \\\
0 &amp;amp; u_{22} &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; u_{33}
\end{array}\right)
$$&lt;/div&gt;
&lt;p&gt;よって, 行列 \(X\) 
の成分で行列 
&lt;span class="math"&gt;\(L, U'\)&lt;/span&gt;&amp;nbsp;を次のように書き換えることができる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} \\\
x_{31} &amp;amp; x_{32} &amp;amp; x_{33} 
\end{array}\right)&amp;amp;=&amp;amp;
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\ 
\frac{x_{21}}{u_{11}} &amp;amp; 1 &amp;amp; 0 \\\
\frac{x_{31}}{u_{11}} &amp;amp; l_{32} &amp;amp; 1
\end{array}\right)
\left(\begin{array}{ccc}
u_{11} &amp;amp; u_{12} &amp;amp; u_{13} \\\
0 &amp;amp; u_{22} &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; u_{33}
\end{array}\right)\because
\begin{array}{l}
x_{21}=l_{21}u_{11}\leftrightarrow l_{21}=\frac{x_{21}}{u_{11}}, \\\
l_{31}\ {\rm についても同様}
\end{array} \\\
&amp;amp;=&amp;amp;
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
\frac{x_{21}}{x_{11}} &amp;amp; 1 &amp;amp; 0 \\\
\frac{x_{31}}{x_{11}} &amp;amp; l_{32} &amp;amp; 1
\end{array}\right)\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
0 &amp;amp; u_{22} &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; u_{33}
\end{array}\right)\because\ u_{11}=x_{11},u_{12}=x_{12},u_{13}=x_{13} \\\
&amp;amp;=&amp;amp; 
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
\frac{x_{21}}{x_{11}} &amp;amp; 1 &amp;amp; 0 \\\
\frac{x_{31}}{x_{11}} &amp;amp; l_{32} &amp;amp; 1
\end{array}\right)\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
0 &amp;amp; x_{22}-\frac{x_{21}}{x_{11}}x_{12} &amp;amp; x_{23}-\frac{x_{21}}{x_{11}}x_{13} \\\
0 &amp;amp; 0 &amp;amp; u_{33} 
\end{array}\right)\because
\begin{array}{l}
x_{22}=l_{21}u_{12}+u_{22} \leftrightarrow u_{22}=x_{22}-l_{21}u_{12},\\\
u_{23}\ {\rm についても同様}
\end{array} \\\
&amp;amp;=&amp;amp; 
\left(\begin{array}{ccc}
1 &amp;amp; 0 &amp;amp; 0 \\\
\frac{x_{21}}{x_{11}} &amp;amp; 1 &amp;amp; 0 \\\
\frac{x_{31}}{x_{11}} &amp;amp; \frac{x_{32}-\frac{x_{31}}{x_{11}}x_{12}}{x_{22}-\frac{x_{21}}{x_{11}}x_{12}} &amp;amp; 1
\end{array}\right)\left(\begin{array}{ccc}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} \\\
0 &amp;amp; x_{22}-\frac{x_{21}}{x_{11}}x_{12} &amp;amp; x_{23}-\frac{x_{21}}{x_{11}}x_{13} \\\
0 &amp;amp; 0 &amp;amp; x_{33}-\frac{x_{31}}{x_{11}}x_{13}-\frac{x_{32}-\frac{x_{31}}{x_{11}}x_{12}}{x_{22}-\frac{x_{21}}{x_{11}}x_{12}}\left(x_{23}-\frac{x_{21}}{x_{11}}x_{13}\right)
\end{array}\right)\\\
&amp;amp;\because&amp;amp;
\begin{array}{l}
x_{32}=l_{31}u_{12}+l_{32}u_{22}\leftrightarrow l_{32}=\frac{x_{32}-l_{31}u_{12}}{u_{22}}, \\\
u_{33}\ {\rm についても同様}
\end{array}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;これをみると, 一行目, 一列目, 二行目, 二列目 \(\cdots\) と展開していくことで,
芋づる式に &lt;span class="math"&gt;\(L,U'\)&lt;/span&gt; が決まっていくことがわかる.
この作業を一般化すると, \(u_{ij}\) の導出およびそれによって得られた値で \(l_{ij}\) を導出する部分に分けることができる.&amp;nbsp;それぞれをいま漸化式で書くと&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
{\rm Doolittle 法} &amp;amp;:=&amp;amp;
\begin{cases}
\begin{cases}
u_{1k}&amp;amp;=&amp;amp;x_{1k} \\\
u_{ik}&amp;amp;=&amp;amp;x_{1k}-\sum^{i-1}_{j=1}l_{ij}u_{jk},\ \left(i=2,3,\cdots,k\right)
\end{cases} \\\
l_{ik}=\frac{\left(x_{ik}-\sum^{k-1}_{j=1}l_{ij}u_{jk}\right)}{u_{kk}},\ \left(i=k+1,k+2,\cdots,n\right)
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ただし \(u_{kk}=0\) の場合は計算できないので,
実際にはピボッティングを要することになるわけであるが,
\(U\) の \(k\) 番目の行が \(L\) の対応する列の前に計算されるという Doolittle 法の性質上,
このままではどの行が \(k\) 番目に来るのかを処理以前に知ることができない.
この問題は \(l_{ik}\)&amp;nbsp;の分子を次のように計算することで自明に克服できる.&lt;/p&gt;
&lt;p&gt;\[s_i = x_{ik}-\sum^{k-1}_{j=1}l_{ij}u_{jk},\&amp;nbsp;\left(i=k,\cdots,n\right)\]&lt;/p&gt;
&lt;p&gt;これにより \(s_i\) の最大値を求め,
対応する行を入れ替えて最大の要素を \(k\) 行目に入れることができる.
交換後は \(u_{kk}=s_{k}\) となるが,
\(U\) の \(k\) 番目の行の他の要素はそれ以前と同様に計算することができ, 
対応する \(L\) の要素は \(l_{ik}=\frac{s_i}{u_{kk}}\)&amp;nbsp;と得られる.&lt;/p&gt;
&lt;p&gt;Crout 法も同様に, \(X=L&amp;#8217; U\)&amp;nbsp;を次のように書けるはずなので,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\left(\begin{array}{ccc}
l_{11} &amp;amp; l_{11}u_{12} &amp;amp; l_{11}u_{13} \\\
l_{21} &amp;amp; l_{21}u_{12}+l_{22} &amp;amp; l_{21}u_{13}+l_{22}u_{23} \\\
l_{31} &amp;amp; l_{31}u_{12}+l_{32} &amp;amp; l_{31}u_{13}+l_{32}u_{23}+l_{33}
\end{array}\right)=
\left(\begin{array}{ccc}
l_{11} &amp;amp; 0 &amp;amp; 0 \\\
l_{21} &amp;amp; l_{22} &amp;amp; 0 \\\
l_{31} &amp;amp; l_{32} &amp;amp; l_{33}
\end{array}\right)
\left(\begin{array}{ccc}
1 &amp;amp; u_{12} &amp;amp; u_{13} \\\
0 &amp;amp; 1 &amp;amp; u_{23} \\\
0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;従ってこの作業の一般形は結果的に&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
{\rm Crout 法} &amp;amp;:=&amp;amp;
\begin{cases}
l_{ik}&amp;amp;=&amp;amp;x_{ik}-\sum^{k-1}_{j=1}l_{ij}u_{jk},\ \left(i=k,k+1,\cdots,n\right)\\\
u_{kj}&amp;amp;=&amp;amp;\frac{\left(x_{kj}-\sum^{k-1}_{i=1}l_{ki}u_{ij}\right)}{l_{kk}},\ \left(j=k,k+1,\cdots,n\right)
\end{cases}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(L\) の \(k\) 番目の列の要素を計算した後に最大値を求め,
\(L\) の要素を含む最初の \(k-1\)
列に対応する行列の行を交換できるため, 
Crout&amp;nbsp;法はピボットを簡単に選択できる.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Richard Hamming (1987) &amp;#8220;Numerical Methods for Scientists and Engineers (Dover Books on Mathematics)&amp;#8221; Dover Publications, &lt;span class="caps"&gt;ISBN&lt;/span&gt;&amp;nbsp;9780486652412&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="haskell"></category></entry><entry><title>ニュートン法の視覚化</title><link href="https://falgon.github.io/roki.log/posts/2018/12%E6%9C%88/24/newtonRaphson/" rel="alternate"></link><published>2018-12-24T16:20:00+09:00</published><updated>2018-12-24T16:20:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-12-24:/roki.log/posts/2018/12月/24/newtonRaphson/</id><summary type="html">&lt;p&gt;ニュートン法の解説と d3.js&amp;nbsp;による視覚化&lt;/p&gt;</summary><content type="html">&lt;p&gt;久しぶりにまた&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;なにか d3.js で視覚化してみたくなったのだが, 
このエントリがポストされる次の日は&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%A4%E3%82%B6%E3%83%83%E3%82%AF%E3%83%BB%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%88%E3%83%B3"&gt;アイザック・ニュートン&lt;/a&gt;の誕生日らしいので, 今回はニュートン法(Newton Raphson 法)を視覚化してみることにした.
早速であるが以下がその成果物である&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. 
&lt;span class="math"&gt;\(f(x)=0\)&lt;/span&gt; となる関数 &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; とその導関数 \(f&amp;#8217;(x)\) 及びニュートン法の初期値を受け付け, 
実行をクリックすると関数とニュートン法の計算過程における接線がプロットされる.
デフォルトでは, \(\sqrt{2}\) の値を計算するように設定してある.
入力された関数を元に数値微分をしても良かったのだが, 
なんとなく導関数を入力したかったので,&amp;nbsp;そのようなことはしなかった.&lt;/p&gt;
&lt;div style="width:400px; height: 310px; margin: 0 auto;" id="vis"&gt;&lt;/div&gt;

&lt;div id="success_panel" class="alert alert-success" role="alert" style="padding: 6px; display: none;"&gt;&lt;p id="success_message" style="margin: 0; padding: 0; text-align: center;"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div id="error_panel" class="alert alert-danger" role="alert" style="padding: 6px; display: none;"&gt;&lt;p id="error_message" style="margin: 0; padding: 0; text-align: center;"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div id="formula"&gt;
&lt;form class="form-inline text-center" role="form"&gt;
    &lt;div class="form-group"&gt;
    &lt;label&gt;&amp;#92;(f(x)=&amp;#92;)&lt;/label&gt;
    &lt;input id="func" type="text" class="form-control" value="x^2-2" placeholder="e.g: x^2 - 2"&gt;
    &lt;/div&gt;&lt;br&gt;
    &lt;div class="form-group" style="margin-top: 10px;"&gt;
    &lt;label&gt;&amp;#92;(f&amp;#8217;(x)=&amp;#92;)&lt;/label&gt;
    &lt;input id="func_differential" type="text" class="form-control" value="2*x" placeholder="e.g: 2 * x"&gt;
    &lt;/div&gt;&lt;br&gt;
    &lt;div class="form-group" style="margin-top: 10px;"&gt;
    &lt;label&gt;初期値 :&lt;/label&gt;
    &lt;input id="initial_value" type="text" class="form-control" value="5" placeholder="e.g: 5"&gt;
    &lt;/div&gt;&lt;br&gt;
    &lt;input style="margin-top: 10px;" id="startNewtonRaph" class="btn btn-primary" type="button" value="実行" onclick="update()" /&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;これで終わってしまうと何とも寂しいので, 一応簡単にニュートン法について書く.
ニュートン法はとても有名な方程式の近似解を求める方法の 1 つである.
連続的関数&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; \(f(x)\) が \(f(x)=0\) となるような \(x\) を求めるときに, 
予め決めた, あるいは事前の計算で求まった切片 \(x_{n}\) における関数 \(f(x)\) への接線
\(f&amp;#8217;(x_{n})\) の切片 \(x_{n+1}\) を用いて再帰的に \(f(x)=0\) に近づけていくことで求める.
同手法は非常に単純ながらも効率的な近似解法であり, 同手法から発展されたいくつかの手法が考えられている.
いまニュートン法の漸化式を導出することを考える. 
計算で必要となるのは \(f&amp;#8217;(x_{n})\) に対する切片 \(x_{n+1}\) であるから,
いま三点 \(\left(x_{n},0\right), \left(x_{n},f(x_{n})\right), \left(x_{n+1}, 0\right)\) 
の成す直角三角形について考えると,
\(f&amp;#8217;(x_{n})=\frac{(x_{n})}{x_{n}-x_{n+1}}\) より
\[x_{n+1}=x_{n}-\frac{f(x_{n})}{f&amp;#8217;(x_{n})}\]
例えば \(\sqrt{2}\) を例にとると, \(x^2=2\Leftrightarrow x^2-2=0\) なので
\(f(x)=x^2-2,f&amp;#8217;(x)=2x\) とおいて \(x_{n}-\frac{x^2_{n}-2}{2x_{n}}\) を計算すればよい.
なお \(f&amp;#8217;(x_{n})\) が \(0\) であると, ゼロ除算になってしまうため計算することができない.
この事実は,&amp;nbsp;傾きのない場合にどちらに進んでいけば良いのかわからないという直感的な考えにおいても筋が通る.&lt;/p&gt;
&lt;p&gt;また, \(f(x)\) の解が複数あるとき, 初期値によっては望まない解が導かれることがある. 
いま \(\sqrt{2}\) の正の解を得たいとき, 初期値を \(-1\) で実行してしまうと,
得られる解は \(-\sqrt{2}\) となる. 
直感的には決められた初期値の傾き \(f&amp;#8217;(x_0)\)
によって近づいていく方向が定まってしまうからといえる.
従って同手法を適用する際は,&amp;nbsp;できる限り求めたい解に近い初期値を設定するのが望ましい.&lt;/p&gt;
&lt;p&gt;なおニュートン法は 1 変数関数のみならず多変数関数に対しても同様にして解を求めることができる.
あまり厳密には書かないが, まずは簡単のために 2 変数の関数 
\(f_{1}(x,y),f_{2}(x,y)\) を用いてそれを示すこととする.
\(f_{1}(x,y),f_{2}(x,y)\) は曲面の定義そのものであり, 
この 2 つの曲面の交わる曲線を辿っていくことで解が求まる.
1 変数のニュートン法の場合と同様に漸化式を求めていけば, 
多変数関数に対するニュートン法の漸化式も関数の値をその傾きで割る部分が出てくるが,
いま変数は複数であるので, 各方向への微小変化に対する変化量を求める必要がある. 
これを求めるには&lt;a href="https://falgon.github.io/roki.log/posts/2018/10月/04/jacobian/#mjx-eqn-eq%3Asixth"&gt;全微分&lt;/a&gt;をすればよいので,&amp;nbsp;結局&lt;/p&gt;
&lt;p&gt;\[
\left(x_{n+1},y_{n+1}\right)=\left(x_{n},y_{n}\right)^T-{\partial f(x_{n},y_{n})}^{-1}\left(f_{1}(x_{n}, y_{n}),f_{2}(x_{n},y_{n})\right)^T&amp;nbsp;\]&lt;/p&gt;
&lt;p&gt;ここで&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}\partial f(x,y):=
\left(\begin{array}{cc}
\frac{\partial f_{1}(x,y)}{\partial x} &amp;amp; \frac{\partial f_{1}(x,y)}{\partial y} \\\
\frac{\partial f_{2}(x,y)}{\partial x} &amp;amp; \frac{\partial f_{2}(x,y)}{\partial y}
\end{array}\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;なお \(\partial f(x,y)\) はヤコビ行列といわれる. 
実際にコンピュータで計算する際には, \({\partial f(x_{n},y_{n})}^{-1}\left(f_{1}(x_{n}, y_{n}),f_{2}(x_{n},y_{n})\right)^T\) を求めるのは計算量と誤差の観点から見て困難なので,
\(\partial f(x_{n},y_{n})\boldsymbol{a}=\left(f_{1}(x_{n}, y_{n}),f_{2}(x_{n},y_{n})\right)^T\) を &lt;span class="caps"&gt;LU&lt;/span&gt; 分解などで解き \(\left(x_n,y_n\right)^T-\boldsymbol{a}\)&amp;nbsp;と解くことになる.&lt;/p&gt;
&lt;p&gt;因みに, 上記で描画される接線は, 単純に ラグランジュの補完公式より
\(y-y_{1}=\frac{y_{2}-y_{1}}{x_{2}-x_{1}}\left(x-x_{1}\right)\) を用いて描いている.
具体的には接線の関数を \(g(x^{\star})\) としたとき, 接点と \(y_{2}=0\) であるときの 2 点 \(\left(x,f(x)\right),\left(x-\frac{f(x)}{f&amp;#8217;(x)},0\right)\)&amp;nbsp;を使って&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
g(x^{\star})&amp;amp;=&amp;amp;\frac{f(x)}{\frac{f(x)}{f'(x)}}\left(x^{\star}-x+\frac{f(x)}{f'(x)}\right) \\\
&amp;amp;=&amp;amp;f'(x)\left(x^{\star}-x+\frac{f(x)}{f'(x)}\right) \\\
&amp;amp;=&amp;amp;f'(x)x^{\star}-f'(x)x+f(x)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と導ける. &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;以前のエントリ, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%204月/20/Bezier-curve/"&gt;ベジェ曲線&lt;/a&gt;では d3.js を用いて二次ベジェ曲線が描かれていく過程を書いた.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://github.com/falgon/roki.log/blob/gh-pages/js/newtonRaphson.js"&gt;実装&lt;/a&gt;. ここで懺悔すると, 実はグラフの描画の実装についてはそこそこ手抜きをしている. 例えば解が第 1, 2 象限であるものの関数 \(f(x)\) の値の多くが第 3, 4 象限にあると接線が見えない. 勿論計算結果そのものは影響しない.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;連続性に関する論法 \(\to\) &lt;a href="https://falgon.github.io/roki.log/posts/2018/10月/04/jacobian/#epsilonDelta-definitionOfLimit"&gt;\(\epsilon-\delta\) 論法&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="javascript"></category></entry><entry><title>確率論で用いられる言葉の整理</title><link href="https://falgon.github.io/roki.log/posts/2018/10%E6%9C%88/28/probabilityTerms/" rel="alternate"></link><published>2018-10-28T00:00:00+09:00</published><updated>2018-10-28T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-10-28:/roki.log/posts/2018/10月/28/probabilityTerms/</id><summary type="html">&lt;p&gt;確率論で用いられる言葉のまとめ&lt;/p&gt;</summary><content type="html">&lt;p&gt;当ブログ内では, 既に確率論の話題として&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/26/bayestheorem/"&gt;ベイズの定理&lt;/a&gt;のエントリが存在するが,
今後同様にして確率論の話題を本ブログで取り上げる際に, 
用語へのリファレンスを self-contained で張れるよう, 本エントリにて一度整理しておくこととした&lt;span class="math"&gt;\(.\)&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;確率の定義&lt;/h3&gt;
&lt;p&gt;そもそも一言に「確率」といえども, それは古典的確率, 統計的確率,&amp;nbsp;公理的確率というように大別できる.&lt;/p&gt;
&lt;h4&gt;古典的確率&lt;/h4&gt;
&lt;p&gt;古典的確率は, \(\Omega\) の要素数といま注目している事象の場合の数の比を用いるもので, 
すべての事象が等確率で発生することを前提条件とする.&amp;nbsp;理想的なサイコロの出目の確率などがこれに当てはまる.&lt;/p&gt;
&lt;h4&gt;統計的確率&lt;/h4&gt;
&lt;p&gt;統計的確率は, 「\(\Omega\) の部分集合 = 事象」の発生回数と, その試行回数の比を用いるもので,&amp;nbsp;打率などがこれに当てはまる.&lt;/p&gt;
&lt;h4&gt;公理的確率&lt;/h4&gt;
&lt;p&gt;公理的確率とは, 確率の公理により定義された確率であり, 同公理における理論体系上では各事象の発生する確率が異なるものをも扱うことができる.
この確率の公理では集合論, 測度論の言葉が使われるが, 同理論に関して深堀りすると本エントリの主題から大きく逸れてしまうため,&amp;nbsp;ここではあまり深くは触れずに持ち出すこととしている.&lt;/p&gt;
&lt;p&gt;集合のあつまりを一般に集合族というが, 次に示すのはその 1 種である&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="CompletelyAdditiveClass" class="disabled"&gt;&amp;#92;(\sigma&amp;#92;)-加法族&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  標本空間 &amp;#92;(\Omega&amp;#92;) の部分集合族 &amp;#92;(\mathcal{F}&amp;#92;) が次の 3 つの性質を満足するとき, &amp;#92;(\mathcal{F}&amp;#92;) は &amp;#92;(\sigma&amp;#92;)-加法族という.
  &lt;ol&gt;
   &lt;li&gt;&amp;#92;(\emptyset\in&amp;nbsp;\mathcal{F}&amp;#92;)&lt;/li&gt;
   &lt;li&gt;&amp;#92;(A\in\mathcal{F}\Rightarrow&amp;nbsp;A^{c}\in\mathcal{F}&amp;#92;)&lt;/li&gt;
   &lt;li&gt;&amp;#92;(\displaystyle A_1,A_2,\cdots\in\mathcal{F}\Rightarrow \bigcup^{\infty}_{i=1}A_i&amp;nbsp;\in\mathcal{F}&amp;#92;)&lt;/li&gt;
  &lt;/ol&gt;
  ここで, &amp;#92;(A^{c}&amp;#92;) は集合 &amp;#92;(A&amp;#92;) の補集合.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;\(\sigma\)-加法族は, 空集合と補集合, 加算無限個の集合の和集合について閉じることを要請し,
確率の公理は, この&amp;nbsp;\(\sigma\)-加法族の関数に対して次の条件を付与する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="KolmogorovAxioms" class="disabled"&gt;コルモゴロフの公理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(\sigma&amp;#92;)-加法族 &amp;#92;(\mathcal{F}&amp;#92;) 上の関数 &amp;#92;(P&amp;#92;) が次の 3 つの性質を満足するとき, &amp;#92;(P&amp;#92;) を確率関数という.
  &lt;ol&gt;
   &lt;li&gt;&amp;#92;(0\leq P(A)\leq 1,\ ^\forall&amp;nbsp;A\in\mathcal{F}&amp;#92;)&lt;/li&gt;
   &lt;li&gt;&amp;#92;(P(\Omega) =&amp;nbsp;1&amp;#92;)&lt;/li&gt;
   &lt;li&gt;&amp;#92;(A_1,A_2,\cdots\in\mathcal{F}&amp;#92;) があって, &amp;#92;(\displaystyle \bigcap^{\infty}_{i=1}A_i = \emptyset&amp;#92;)(互いに排反)
   &amp;#92;(\displaystyle\Rightarrow P\left(\bigcup_{i=1}^\infty A_i\right)=\sum_{i=1}^\infty&amp;nbsp;P(A_i)&amp;#92;)&lt;/li&gt;
  &lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;可算無限個の事象が互いに排反な事象の和集合の値は,&amp;nbsp;各事象の値の和となる.&lt;/p&gt;
&lt;p&gt;なお, 標本空間を \(\Omega =\left\{x_1,x_2,\cdots,x_n\right\}\),
\(p_1,\dots,p_n\) がそれぞれ \(\displaystyle 0\leq p_{i}\leq 1\) で, \(\displaystyle \sum_{i=1}^{n}p_{i}=1\) であるとき,
\(\Omega\) の部分集合 \(A\) に対して関数 \(P\) を 
\(P(A)=\displaystyle\sum_{\left\{i\ |\ x_i\in A\right\}}p_i\) とすると \(P\) は確率関数となるから, 統計的確率論の問題は公理的確率論の問題として扱うことができるといえ,&amp;nbsp;自ずと公理的確率論が統計的確率論の拡張であることがいえる.&lt;/p&gt;
&lt;h3&gt;基本的な言葉&lt;/h3&gt;
&lt;style&gt;
td {
    width: 40px;
}

.min100 {
    min-width: 100px;
}
&lt;/style&gt;

&lt;div class="table-responsive"&gt;
&lt;table class="table table-hover"&gt;
&lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;用語&lt;/th&gt;
      &lt;th scope="col"&gt;意味&lt;/th&gt;
      &lt;th scope="col"&gt;表現&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;標本空間&lt;/td&gt;
      &lt;td&gt;試行に付随して決まる, 試行の取りうるすべての結果から成る &amp;#92;(\emptyset&amp;#92;) でない集合.&lt;/td&gt;
      &lt;td&gt;&amp;#92;(\Omega&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;標本&lt;/td&gt;
      &lt;td&gt;標本空間の元. 試行の結果発生しうる個々の事柄.&lt;/td&gt;
      &lt;td&gt;&amp;#92;(\omega\in\Omega&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;事象&lt;/td&gt;
      &lt;td&gt;標本空間の部分集合. 試行の結果発生しうる事柄.&lt;/td&gt;
      &lt;td&gt;&amp;#92;(A\subset\Omega&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;確率変数&lt;/td&gt;
      &lt;td&gt;ある事象が確率的に取りうる数. 
      &lt;ul&gt;
      &lt;li&gt;確率変数 &amp;#92;(X&amp;#92;) の取りうる値 &amp;#92;(x_1, x_2,\cdots&amp;#92;) それぞれに対応する確率 &amp;#92;(p_1, p_2,\cdots&amp;#92;) が存在する場合, 
      隣り合う数の間に値が存在しない確率変数(サイコロの出目など)をとくに離散型確率変数といい, 
      離散確率変数 &amp;#92;(X&amp;#92;) がある値 &amp;#92;(x&amp;#92;) をとるとき, 標本から実現値 &amp;#92;(\mathbb{R}&amp;#92;) への関数 &amp;#92;(f(x)&amp;#92;)&amp;nbsp;を確率質量関数という.&lt;/li&gt;
      &lt;li&gt;離散型確率変数でない確率型変数を連続型確率変数という(&lt;a href="https://falgon.github.io/roki.log/posts/2018/10月/04/jacobian/#epsilonDelta-definitionOfLimit"&gt;&amp;#92;(\epsilon-\delta&amp;#92;)論法&lt;/a&gt;で厳密に説明できる).&lt;/li&gt;
      &lt;/ul&gt;
    　&lt;/td&gt;
      &lt;td&gt;&amp;#92;(X&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;実現値&lt;/td&gt;
      &lt;td&gt;確率変数がとる具体的な値.&lt;/td&gt;
      &lt;td&gt;&amp;#92;(x_n&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;確率分布&lt;/td&gt;
      &lt;td&gt;
            確率変数がある値となる確率, 又はある集合に属する確率を与える関数(&lt;span class="caps"&gt;JIS&lt;/span&gt; 規格より).
      &lt;/td&gt;
      &lt;td&gt;&amp;#92;(P(A)&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr id="iid"&gt;
      &lt;td&gt;「独立同一分布に従う」&lt;/td&gt;
      &lt;td&gt;
      確率変数 &amp;#92;(X_1,X_2,\cdots,X_n&amp;#92;) が互いに&lt;a href="#isIndependence"&gt;独立&lt;/a&gt;で, かつそれらが同一の確率分布に従うことをいう. 
      &lt;ul&gt;
        &lt;li&gt;注意されたいのが, 「独立同一分布」といわれる分布はない. この用例は, 「独立同一分布」という分布に従うというようにも捉えられるかもしれないが,&amp;nbsp;そのような意味ではない.&lt;/li&gt;
        &lt;li&gt;&amp;#92;(\rm i.i.d&amp;#92;) 標本 &amp;#92;(X_1,X_2,\cdots,X_n&amp;#92;) の同時の確率密度関数は &amp;#92;(f(x_1,x_2,\cdots,x_n)=g(x_1)g(x_2)\cdots&amp;nbsp;g(x_n)&amp;#92;).&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/td&gt;
      &lt;td&gt;&amp;#92;(\rm i.i.d&amp;#92;), independent and identically distributed.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;ul class="min100"&gt;&lt;li&gt;算術平均&lt;/li&gt;&lt;li&gt;相加平均&lt;/li&gt;&lt;li&gt;単純平均&lt;/li&gt;&lt;/ulL&lt;/td&gt;
        &lt;td&gt;全体の総和をそれらの個数で割った値. &amp;#92;(\displaystyle\dfrac{1}{n}\sum^{n}_{i=1}X_i&amp;#92;).&lt;/td&gt;
        &lt;td&gt;
        &lt;ul&gt;
        &lt;li&gt;確率変数 &amp;#92;(X&amp;#92;) の平均:&amp;nbsp;&amp;#92;(\overline{X}&amp;#92;)&lt;/li&gt;
        &lt;li&gt;母平均:&amp;nbsp;&amp;#92;(\mu&amp;#92;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;期待値&lt;/td&gt;
        &lt;td&gt;
        確率変数のとりうる値にそれが起こる確率を掛けた値の総和のこと(加重平均). 
        すなわち, 確率変数 &amp;#92;(X&amp;#92;) の取り得る値 &amp;#92;(x&amp;#92;) に関する確率 &amp;#92;(P(x_i)&amp;#92;) があって, 
        \begin{cases}
        \displaystyle\sum^{n}_{i=1}x_i P(x_i) &amp;:X {\rm は離散的確率変数}&amp;#92;\
        \displaystyle\int^\infty_{-\infty} xP(x)dx &amp;:X {\rm は連続的確率変数}
        \end{cases}
        &lt;ul&gt;
            &lt;li id="LinearityExpectedValue"&gt;離散, 連続共に和の期待値は期待値の和(期待値の線形性)&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;: &amp;#92;(\displaystyle E\left[\sum_{i=1}^nX_i\right]=\sum_{i=1}^nE\left[X_i\right]&amp;#92;),&amp;nbsp;連続の場合も同様.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;dl&gt;
            &lt;dt&gt;離散&lt;/dt&gt;
            &lt;dd&gt;&lt;ul&gt;
                &lt;li&gt;&amp;#92;(n&amp;#92;) 個の &amp;#92;(P(x_1),P(x_2),\cdots,P(x_n)&amp;#92;) がすべて等しいとき &amp;#92;(P_i=\dfrac{1}{n}\ (1\leq i\leq n)&amp;#92;) となり, &amp;#92;(\overline{X}&amp;#92;)&amp;nbsp;と等しくなる.&lt;/li&gt;
            &lt;/ul&gt;&lt;/dd&gt;
            &lt;dt&gt;連続&lt;/dt&gt;
            &lt;dd&gt;&lt;ul&gt;
                &lt;li&gt;&amp;#92;(f(x)=xP(x)&amp;#92;) としたとき, &amp;#92;(f(x)&amp;#92;)&amp;nbsp;は確率密度関数といわれる.&lt;/li&gt;
                &lt;li&gt;連続型確率変数がある 1 点の値をとる確率は 0 である(0 でなければ, 連続量とはいえない: &amp;#92;(P(X=a)=\int^{a}_{a}f(x)dx=0&amp;#92;))
                から, 事象 &amp;#92;(X&amp;#92;) の確率については &amp;#92;(a\leq X\leq b&amp;#92;) と幅を持たせて表す必要がある.
                従って, (連続量が表されたグラフを思い浮かべれば想像に容易いが)その &amp;#92;([a,b]&amp;#92;) 間の面積が求まれば, 事象 &amp;#92;(X&amp;#92;) に対する確率が求まることとなるので,
                事象 &amp;#92;(X&amp;#92;) が &amp;#92;(a&amp;#92;) 以上 &amp;#92;(b&amp;#92;) 以下となる確率を &amp;#92;(P(a\leq X\leq b)=\int_a^bf(x)dx&amp;#92;)&amp;nbsp;とかける.&lt;/li&gt;
                &lt;li id="normalizationLaw"&gt;&lt;a href="#KolmogorovAxioms"&gt;コルモゴロフの公理&lt;/a&gt;より &amp;#92;(\int_{-\infty}^{\infty}f(x)dx=1&amp;#92;) がいえ,&amp;nbsp;これを規格化条件という.&lt;/li&gt;
                &lt;li id="consExpIsCons"&gt;定数 &amp;#92;(a&amp;#92;) の期待値は &amp;#92;(a&amp;#92;) である: 
                &amp;#92;(E\left[a\right]=\int^\infty_{-\infty}aP(x)dx=a\int^\infty_{-\infty}P(x)dx&amp;#92;) だから&amp;nbsp;&amp;#92;[E\left[a\right]=a\label{eq:exaxiom1}\tag{i}&amp;#92;]&lt;/li&gt;
                &lt;li&gt;定数 &amp;#92;(a&amp;#92;) と確率変数 &amp;#92;(X&amp;#92;) の和の期待値は, 確率変数 &amp;#92;(X&amp;#92;) の期待値に定数 &amp;#92;(a&amp;#92;) を加えた値である: 
                &amp;#92;(E\left[a+X\right]=\int^\infty_{-\infty}(a+x)P(x)dx=\int^\infty_{-\infty}aP(x)dx+\int^\infty_{-\infty}xP(x)dx&amp;#92;) だから&amp;nbsp;&amp;#92;[E\left[a+X\right]=a+E\left[X\right]\label{eq:exaxiom2}\tag{ii}&amp;#92;]&lt;/li&gt;
                &lt;li&gt;定数 &amp;#92;(b&amp;#92;) と確率変数 &amp;#92;(X&amp;#92;) の積の期待値は, 確率変数 &amp;#92;(X&amp;#92;) の期待値の &amp;#92;(b&amp;#92;) 倍の値である:
                &amp;#92;(E\left[bX\right]=\int^\infty_{-\infty}bxP(x)dx=b\int^\infty_{-\infty}xP(x)dx&amp;#92;) だから&amp;nbsp;&amp;#92;[E\left[bX\right]=bE\left[X\right]\label{eq:exaxiom3}\tag{iii}&amp;#92;]
                &lt;/li&gt;
                &lt;li&gt;定数 &amp;#92;(b&amp;#92;) と確率変数の積に定数 &amp;#92;(a&amp;#92;) を加えた値の期待値は, 確率変数 &amp;#92;(X&amp;#92;) の期待値の &amp;#92;(b&amp;#92;) 倍に &amp;#92;(a&amp;#92;) を加えた値である:
                &amp;#92;(\eqref{eq:exaxiom2},\eqref{eq:exaxiom3}&amp;#92;) より &amp;#92;[E\left[bX+a\right]=bE\left[X\right]+a\label{eq:exaxiom4}\tag{iv}&amp;#92;]
            &lt;/ul&gt;&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;/td&gt;
        &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;確率変数 &amp;#92;(X&amp;#92;) の期待値:&amp;nbsp;&amp;#92;(E\left[X\right]&amp;#92;)&lt;/li&gt;
            &lt;li&gt;標本平均 &amp;#92;(\overline{X}&amp;#92;) の期待値&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;: &amp;#92;(\mu&amp;#92;)
        &lt;/ul&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;条件付き確率&lt;/td&gt;
        &lt;td&gt;
            ある事象が起きる条件のもとで, 別のある事象が起こる確率. 
            &amp;#92;[P\left(A\mid B\right)=\dfrac{P\left(A\cap B\right)}{P\left(B\right)}\ \left(\because P\left(A\cap B\right):=A\ {\rm および}\ B\ {\rm が発生する確率}\right)&amp;#92;]
            &lt;ul&gt;
                &lt;li id="isIndependence"&gt;2 つの事象の確率について, 相互が一方の事象の発生確率がもう一方の事象の発生確率に影響を与えないとき, これを独立であるという. すなわち &amp;#92;(P\left(A\mid&amp;nbsp;B\right)=P\left(A\right)&amp;#92;)&lt;/li&gt;
                &lt;li&gt;2 つの事象について, 一方の事象が発生したときに, もう一方の事象は発生しないことがいえるとき, これを排反であるという. すなわち &amp;#92;(P\left(A\mid&amp;nbsp;B\right)=0&amp;#92;)&lt;/li&gt;
                &lt;li id="MulTheoremConditionalProbability"&gt;&amp;#92;(P\left(A\cap B\right)=P\left(B\right)P\left(A\mid B\right)&amp;#92;)&amp;nbsp;を条件付き確率の乗法定理という.&lt;/li&gt;
                &lt;li&gt;&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/26/bayestheorem/"&gt;ベイズの定理&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/td&gt;
        &lt;td&gt;
        &amp;#92;(B&amp;#92;) の下で &amp;#92;(A&amp;#92;) が発生する確率: &amp;#92;(P\left(A\mid B\right)&amp;#92;)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;条件付き期待値&lt;/td&gt;
        &lt;td&gt;
            確率変数 &amp;#92;(X&amp;#92;) の値が &amp;#92;(x&amp;#92;) であるときの &amp;#92;(Y&amp;#92;) の期待値. &amp;#92;(E\left[Y|X=x\right]&amp;#92;)
            &amp;#92;[E\left[Y|X=x\right]=\sum^{n}_{i=1}y_i\dfrac{P\left(Y=y_i,X=x\right)}{P\left(X=x\right)}&amp;#92;]
            &lt;ul&gt;
                &lt;li&gt;&amp;#92;(E\left[Y\right]=E\left[E\left[Y|X\right]\right]&amp;#92;) が成りたつ&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &amp;#92;(E\left[Y|X\right],\ E_Y\left[Y|X\right]&amp;#92;)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;条件付き分散&lt;/td&gt;
        &lt;td&gt;
            &amp;#92;(V[X\mid Y]=E[X^2\mid Y]-E[X\mid Y]^2&amp;#92;)
            &lt;ul&gt;
                &lt;li&gt;&amp;#92;(V\left[Y\right]=E\left[V\left[Y|X\right]\right]+V\left[E\left[Y|X\right]\right]&amp;#92;)&amp;nbsp;が成り立つ(証明略).&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &amp;#92;(V\left[Y|X\right],\ V_Y\left[Y|X\right]&amp;#92;)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;ul class="min100"&gt;&lt;li&gt;規格化&lt;/li&gt;&lt;li&gt;正規化&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        &lt;td&gt;
        ある関数が規格化条件を満足するように定数倍すること. 平均を引いて, 標準偏差で割る(&amp;#92;(\dfrac{X-\mu}{\sigma}&amp;#92;))&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;こと.
        &lt;ul&gt;
            &lt;li&gt;連続的確率変数を扱う場合にのみ使われる言葉.&lt;/li&gt;
            &lt;li&gt;例えば, &amp;#92;(f(x)=x&amp;#92;) は &amp;#92;([0,1]&amp;#92;) 上で &amp;#92;(\int_0^1xdx=\dfrac{1}{2}&amp;#92;) となってしまうため, 規格化条件を満たさないが,
            全体を 2 倍して &amp;#92;(f(x)=2x&amp;#92;) とすると, 全区間で積分して &amp;#92;(1&amp;#92;) になるので規格化条件を満たす. 従って, &amp;#92;(f(x)=2x&amp;#92;)&amp;nbsp;は確率度関数となる.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/td&gt;
        &lt;td&gt;
        N/A
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;ul class="min100"&gt;&lt;li&gt;分散&lt;/li&gt;&lt;li&gt;標本分散&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        &lt;td&gt;
        期待値とのずれを表す指標の 1 つ. ずれの総計で各々が相殺しないように二乗和をとり, その個数 &amp;#92;(n&amp;#92;) で割った値. すなわち,
        &amp;#92;[\dfrac{1}{n}\displaystyle\sum_{i=1}^n(X_i-E\left[X\right])^2=E\left[(X-E\left[X\right])^2\right]&amp;#92;]
        &lt;ul&gt;
            &lt;li&gt;ここで, 確率変数 &amp;#92;(X_1,X_2,\cdots,X_n&amp;#92;) の確率分布がすべて等しいとき,
            &amp;#92;(\displaystyle\dfrac{1}{n}\sum^{n}_{i=1}\left(X_i-\overline{X}\right)^2=\overline{X^2}-\overline{X}^2&amp;#92;)&amp;nbsp;と高校数学でよくみる形式でかける.&lt;/li&gt;
            &lt;li&gt;定数の分散は &amp;#92;(0&amp;#92;) である: &amp;#92;(V\left[a\right]=E\left[\left(a-E\left[a\right]\right)^2\right]=E\left[\left(a-a\right)^2\right]&amp;#92;) だから&amp;nbsp;&amp;#92;[E\left[0\right]=0\label{eq:exaxiom5}\tag{v}&amp;#92;]&lt;/li&gt;
            &lt;li&gt;定数 &amp;#92;(a&amp;#92;) と確率変数 &amp;#92;(X&amp;#92;) の和の分散は, 確率変数 &amp;#92;(X&amp;#92;) の分散である:
            \begin{eqnarray}
            V\left[a+X\right]&amp;=&amp;E\left[\left(a+X-E\left[a+X\right]\right)^2\right] &amp;#92;\
            &amp;=&amp;E\left[\left(a+X-E\left[a\right]-E\left[X\right]\right)^2\right] &amp;#92;\
            &amp;=&amp;E\left[\left(a+X-a-E\left[X\right]\right)^2\right]&amp;#92;\
            &amp;=&amp;E\left[\left(X-E\left[X\right]\right)^2\right]
            \end{eqnarray} だから&amp;nbsp;&amp;#92;[V\left[a+X\right]=V\left[X\right]\label{eq:exaxiom6}\tag{vi}&amp;#92;]
            &lt;/li&gt;
            &lt;li&gt;定数 &amp;#92;(b&amp;#92;) と確率変数 &amp;#92;(X&amp;#92;) の積の分散は, 確率変数 &amp;#92;(X&amp;#92;) の分散と &amp;#92;(b&amp;#92;) の二乗の積である:
            \begin{eqnarray}
            V\left[bX\right]&amp;=&amp;E\left[\left(bX-E\left[bX\right]\right)^2\right] &amp;#92;\
            &amp;=&amp;E\left[\left(bX-bE\left[X\right]\right)^2\right] &amp;#92;\
            &amp;=&amp;E\left[\left\{b\left(X-E\left[X\right]\right)\right\}^2\right] &amp;#92;\
            &amp;=&amp;E\left[b^2\left(X-E\left[X\right]\right)^2\right] &amp;#92;\
            &amp;=&amp;b^2E\left[\left(X-E\left[X\right]\right)^2\right]
            \end{eqnarray} だから&amp;nbsp;&amp;#92;[V\left[bX\right]=b^2V\left[X\right]\label{eq:exaxiom7}\tag{vii}&amp;#92;]
            &lt;/li&gt;
            &lt;li&gt;定数 &amp;#92;(b&amp;#92;) と確率変数 &amp;#92;(X&amp;#92;) の積と &amp;#92;(a&amp;#92;) の和の分散は, 確率変数 &amp;#92;(X&amp;#92;) の分散と定数 &amp;#92;(b&amp;#92;) の二乗の積である:
            &amp;#92;(\eqref{eq:exaxiom6}, \eqref{eq:exaxiom7}&amp;#92;) より&amp;nbsp;&amp;#92;[V\left[bX+a\right]=b^2V\left[X\right]\label{eq:exaxiom8}\tag{viii}&amp;#92;]&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/td&gt;
        &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;確率変数 &amp;#92;(X&amp;#92;) の分散:&amp;nbsp;&amp;#92;(V\left[X\right]&amp;#92;)&lt;/li&gt;
            &lt;li&gt;母集団の分散:&amp;nbsp;&amp;#92;(\sigma^2&amp;#92;)&lt;/li&gt;
            &lt;li&gt;標本分散:&amp;nbsp;&amp;#92;(s^2&amp;#92;)&lt;/li&gt;
            &lt;li&gt;標本平均の分散&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;:&amp;nbsp;&amp;#92;(V\left[\overline{X}\right]=\dfrac{\sigma^2}{n}&amp;#92;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;ul&gt;&lt;li&gt;分散&lt;/li&gt;&lt;li&gt;不偏分散&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
      &lt;td&gt;標本数 &amp;#92;(n&amp;#92;) で割ったのに対し, &amp;#92;(n-1&amp;#92;) で割った値. 標本分散の期待値が母分散に等しくなるように補正したもの
      (詳細は&lt;a href="#unbiasedVariance"&gt;下記&lt;/a&gt;): &amp;#92;(\displaystyle\dfrac{1}{n-1}\sum^n_{i=1}\left(X_i-E\left[X\right]\right)^2&amp;#92;)&lt;/td&gt;
      &lt;td&gt;&amp;#92;(U^2,\hat{\sigma}^2&amp;#92;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;標準偏差&lt;/td&gt;
      &lt;td&gt;分散の計算で行われた二乗を外した形.&lt;/td&gt;
      &lt;td&gt;&amp;#92;(\sqrt{V[X]},\sigma,s&amp;#92;). 各記号は, 分散の記号と同様にして用いられる慣習がある.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;不偏分散&lt;/h3&gt;
&lt;p&gt;上記の表で示した通り, 不偏分散は, 標本分散の期待値が母分散に等しくなるように補正したもののことをいう.
標本分散は, 標本のばらつきの指標を得ることが主な目的であったのに対して, 不偏分散は, 標本から母分散の推定値を得ることが主な目的であり, その点において両者は異なる.
その目的に従って, 標本分散の期待値 \(E\left[s^2\right]\) は, 母分散の \(\dfrac{n-1}{n}\) 倍となっているという事実(\(E\left[s^2\right]=\dfrac{n-1}{n}\sigma^2\not =\sigma^2\))から,
標本分散を \(\dfrac{n}{n-1}\) 倍する(しかしながら, サンプル数 \(n\) が十分に大きいとき, 両者は近似的に等しくなることが&lt;a href="#lawOfLargeNumbers"&gt;大数の弱法則&lt;/a&gt;よりいえる).&amp;nbsp;この形が不偏分散である. &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="unbiasedVariance" class="disabled"&gt;不偏分散&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;[\displaystyle\dfrac{1}{n-1}\sum^n_{i=1}\left(X_i-E\left[X\right]\right)^2&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以下, \(E\left[s^2\right]=\dfrac{n-1}{n}\sigma^2\)&amp;nbsp;を証明する.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;いま \(\rm i.i.d\) 標本 \(X_1,X_2,\cdots,X_n\) について考えると,
この標本分散は上記の表で示した通り \(\displaystyle s^2=\overline{X^2}-\overline{X}^2=\dfrac{1}{n}\sum^{n}_{i=1}\left(X_i-\overline{X}\right)^2\) で, 
母分散は \(\sigma^2=E\left[\left(X-\mu\right)^2\right]\) である. ここで, \(X_i-\overline{X}=X_i-\mu-\overline{X}+\mu\)&amp;nbsp;とおくと,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;=&amp;amp;\dfrac{1}{n}\left[\left\{\left(X_1-\mu\right)-\left(\overline{X}-\mu\right)\right\}^2+\cdots+\left\{\left(X_n-\mu\right)-\left(\overline{X}-\mu\right)\right\}^2\right] \\\
&amp;amp;=&amp;amp;\dfrac{1}{n}\left\{\left(X_1-\mu\right)^2-2\left(X_1-\mu\right)\left(\overline{X}-\mu\right)+\left(\overline{X}-\mu\right)^2+\cdots+\left(X_n-\mu\right)^2-2\left(X_n-\mu\right)\left(\overline{X}-\mu\right)+\left(\overline{X}-\mu\right)^2\right\} \\\
&amp;amp;=&amp;amp;\dfrac{1}{n}\sum_{i=1}^n\left(X_i-\mu\right)^2-2\dfrac{1}{n}\sum_{j=1}^{n}\left(X_j-\mu\right)\left(\overline{X}-\mu\right)+\left(\overline{X}-\mu\right)^2 \\\
&amp;amp;=&amp;amp;\dfrac{1}{n}\sum_{i=1}^n\left(X_i-\mu\right)^2-2\left(\overline{X}-\mu\right)^2+\left(\overline{X}-\mu\right)^2 \\\
&amp;amp;=&amp;amp;\dfrac{1}{n}\sum_{i=1}^n\left(X_i-\mu\right)^2-\left(\overline{X}-\mu\right)^2 
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;である.&amp;nbsp;この期待値は &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[s^2\right]&amp;amp;=&amp;amp;\dfrac{1}{n}\sum_{i=1}^nE\left[\left(X_i-\mu\right)^2\right]-E\left[\left(\overline{X}-\mu\right)\right] \\\
&amp;amp;=&amp;amp;\sigma^2-E\left[\left(\overline{X}-\mu\right)^2\right] \label{eq:second}\tag{1}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;で, \(\eqref{eq:second}\)&amp;nbsp;の第二項は標本平均分散だから,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
E\left[s^2\right]&amp;amp;=&amp;amp;\sigma^2-\dfrac{\sigma^2}{n}\\\
&amp;amp;=&amp;amp;\dfrac{n-1}{n}\sigma^2
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\square\)&lt;/p&gt;
&lt;h3&gt;正規分布,&amp;nbsp;ガウス分布&lt;/h3&gt;
&lt;p style="text-align:center"&gt;&lt;img width="350px" src="../../../../../images/2018/September/25/norm.png" alt="normfig" /&gt;&lt;/p&gt;

&lt;p&gt;上図&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;のような, 連続型の確率分布が左右対称である分布を正規分布といい, 
その陰関数は \(f(x)=\dfrac{1}{\sqrt{2\pi}}\exp\left(-\dfrac{1}{2}\left(\dfrac{x-\mu}{\sigma}\right)^2\right)\) であり, これを \(N(\mu,\sigma)\) とも書く.
また,&amp;nbsp;その確率密度関数は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="ProbabilityDensityFunctionOfTheNormalDistribution" class="disabled"&gt;正規分布の確率密度関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
標準偏差 &amp;#92;(\sigma&amp;#92;), 母平均 &amp;#92;(\mu&amp;#92;), 分散 &amp;#92;(\sigma^2&amp;#92;) に対して,
&amp;#92;[f(x)=\dfrac{1}{\sqrt{2\pi}\sigma}\exp\left(-\dfrac{(x-\mu)^2}{2\sigma^2}\right)\label{eq:first}\tag{2}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;である.&lt;/p&gt;
&lt;p&gt;また \(\mu=0,\sigma=1\) である正規分布をとくに標準正規分布といい(上図青で描かれた分布がそれに該当する),
その場合の陰関数は \(f(x)=\dfrac{1}{\sqrt{2\pi}}\exp\left(-\dfrac{1}{2}x^2\right)\) となる.
また, これを \(N(\mu,\sigma)=N(0,1)\) とも書く.
ここで一度, 式 \(\eqref{eq:first}\) が規格化条件を満たすことを確認する. 
確認には, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%209月/26/GaussianIntegral/#SimilarGaussianIntegral1"&gt;ガウス積分の公式&lt;/a&gt;を用いる.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命題&lt;/strong&gt;: \(\eqref{eq:first}\) は規格化条件を満たす.&lt;br&gt;
&lt;strong&gt;証明&lt;/strong&gt;: \(\eqref{eq:first}\)&amp;nbsp;が規格化条件を満たすことは次の等号式を満たすことである.&lt;/p&gt;
&lt;p&gt;\[\displaystyle\int_{-\infty}^{\infty}f(x)dx=\dfrac{1}{\sqrt{2\pi}\sigma}\int_{-\infty}^{\infty}\exp\left(-\dfrac{(x-\mu)^2}{2\sigma^2}\right)dx\]&lt;/p&gt;
&lt;p&gt;ここで, \(x-\mu=y\) と変数変換すると \[\dfrac{1}{\sqrt{2\pi}\sigma}\int_{-\infty}^{\infty}\exp\left(-\dfrac{y^2}{2\sigma^2}\right)dy\]
この積分部分は&lt;a href="https://falgon.github.io/roki.log/posts/2018/%209月/26/GaussianIntegral/#SimilarGaussianIntegral1"&gt;ガウス積分の公式&lt;/a&gt;より,
\(\sqrt{2\sigma^2\pi}\) となり \(f(x)\) を全区間で積分すると 1 となる. よって, \(\eqref{eq:first}\) は規格化条件を満たす.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;正規分布においては, 区間 \([-\sigma,\sigma]\) を 1 シグマ区間という.
平均 \(\pm{1\sigma}\) 内に収まる確率は &lt;span class="math"&gt;\(68\)&lt;/span&gt; %,  平均 \(\pm{2\sigma}\) 内に収まる確率は &lt;span class="math"&gt;\(95\)&lt;/span&gt; %, 平均 \(\pm{3\sigma}\) 内に収まる確率は &lt;span class="math"&gt;\(99.7\)&lt;/span&gt; %&amp;nbsp;であると知られている.&lt;/p&gt;
&lt;h3&gt;大数の法則&lt;/h3&gt;
&lt;p&gt;大数の法則は, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="lawOfLargeNumbers" class="disabled"&gt;大数の法則&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  期待値 &amp;#92;(\mu&amp;#92;) の &amp;#92;(\rm i.i.d&amp;#92;) 無限列 &amp;#92;(X_1,X_2,\cdots&amp;#92;) の標本平均 &amp;#92;(\displaystyle\overline{X}=\dfrac{1}{n}\sum_{i=1}^{n}X_i&amp;#92;) と定数 &amp;#92;(^\forall c\gt 0&amp;#92;) に対して,
  &amp;#92;[\lim_{n\to\infty}P\left(\left|\overline{X}_{n}-\mu\right|\gt c\right)=0&amp;#92;]
  がいえる. これを大数の弱法則という.
  また &amp;#92;[ P\left(\lim_{n\to\infty}\overline{X}_n=\mu\right)=1 &amp;#92;]
  がいえる. これを大数の強法則という.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;である. なお, この法則を確率論の用語で, \(\overline{X}_n\) が \(\mu\) に確率収束するという.
端折って解釈すると, ある母集団から無作為抽出するサンプル数を十分に大きくしたとき, それらから成る標本の平均は, 母平均そのものとみなしてもよいという主張である. 
例えば, サイコロの目の理論的な平均値は \(\frac{\sum^{6}_{i=1} i}{6}=3.5\) であるが,
サイコロを例えば 2 回降っただけではこの通りの平均値にならないかもしれない.
しかしながら, これを無限回行えば, その平均は \(3.5\) に限りなく近くということである.
ここでは簡単のために大数の弱法則についてのみの証明とする. そのために, まずマルコフの不等式,&amp;nbsp;チェビシェフの不等式の証明を行う.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="MarkovsInequality" class="disabled"&gt;マルコフの不等式&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  任意の確率変数 &amp;#92;(X&amp;#92;) と定数 &amp;#92;(c\gt 0&amp;#92;) に対して, &amp;#92;[ P\left(\left|X\right|\geq c\right)\leq \dfrac{E\left[\left|X\right|\right]}{c}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;\(X\) を連続型確率変数とすると, 確率密度関数 \(f_X(x)\)&amp;nbsp;に対して,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
cP\left(\left|X\right|\geq c\right)&amp;amp;=&amp;amp;c\int^{\infty}_{c}f_X(x)dx \\\
&amp;amp;\leq&amp;amp;\int^{\infty}_{c}\left|x\right|f_X(x)dx \\\
&amp;amp;\leq&amp;amp;\int^c_0\left|x\right|f_X(x)dx+\int^\infty_c\left|x\right|f_X(x)dx \\\
&amp;amp;=&amp;amp;\int^\infty_0\left|x\right|f_X(x)dx \\\ 
&amp;amp;=&amp;amp;E[\left|X\right|]
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\therefore P\left(\left|X\right|\geq c\right)\leq\dfrac{E[\left|X\right|]}{c}\). 
\(X\) が離散型確率変数である場合は総計により同様にして求まる.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="ChebyshevInequality" class="disabled"&gt;チェビシェフの不等式&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(E[Y]=\mu,V[Y]=\sigma^2&amp;#92;) とするとき, &amp;#92;(^\forall a\gt 0&amp;#92;) に対して, &amp;#92;[P\left(\left|Y-\mu\right|\geq a\sigma\right)\leq\dfrac{1}{a^2}\Leftrightarrow P\left(\left|Y-\mu\right|\geq a\right)\leq\dfrac{\sigma^2}{a^2}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#MarkovsInequality"&gt;マルコフの不等式&lt;/a&gt;より, \(X=(Y-\mu)^2,c=a^2\sigma^2\)&amp;nbsp;とすると
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
P\left(\left(Y-\mu\right)^2\geq a^2\sigma^2\right)&amp;amp;\leq&amp;amp;\dfrac{E\left[\left(Y-\mu\right)^2\right]}{a^2\sigma^2} \\\
&amp;amp;=&amp;amp;\dfrac{\sigma^2}{a^2\sigma^2} \\\
&amp;amp;=&amp;amp;\dfrac{1}{a^2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\therefore P\left(\left|Y-\mu\right|\geq a\sigma\right)\leq\dfrac{1}{a^2}\). 
\(c=a^2\) とすると, 同様にして \(P\left(\left|Y-\mu\right|\geq a\right)\leq\dfrac{\sigma^2}{a^2}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;準備が整ったので, 以下&lt;a href="#lawOfLargeNumbers"&gt;大数の弱法則&lt;/a&gt;を証明する.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;確率変数 \(\overline{Y}\) を \(\rm i.i.d\) 標本平均 \(\displaystyle\dfrac{1}{n}\sum_{i=1}^{n}Y_i\) とすると, 期待値の線型性より
\(E\left[\overline{Y}\right]=\mu,V\left[\overline{Y}\right]=\dfrac{\sigma^2}{n}\). 
ここで, &lt;a href="#ChebyshevInequality"&gt;チェビシェフの不等式&lt;/a&gt;より \(P\left(\left|\overline{Y}-\mu\right|\geq a\right)\leq\dfrac{\dfrac{\sigma^2}{n}}{a^2}\) だから,
\(n\to\infty\) のとき, 右辺は \(0\) に収束する.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;h3&gt;中心極限定理&lt;/h3&gt;
&lt;p&gt;中心極限定理は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="centralLimitTheorem" class="disabled"&gt;中心極限定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  平均 &amp;#92;(\mu&amp;#92;), 分散 &amp;#92;(\sigma^2&amp;#92;) の母集団から無作為抽出された標本平均 &amp;#92;(\overline{X}_n&amp;#92;) は, 母集団の分布に無関係に, &amp;#92;(n&amp;#92;) が十分に大きいとき,
  近似的に平均 &amp;#92;(\mu&amp;#92;), 分散 &amp;#92;(\dfrac{\sigma^2}{n}&amp;#92;)(標準偏差 &amp;#92;(\dfrac{\sigma}{\sqrt{n}}&amp;#92;)) に従う. 
  &amp;#92;(\Leftrightarrow \rm i.i.d&amp;#92;) 標本 &amp;#92;(X_1,X_2,\cdots,X_n&amp;#92;) があって, &amp;#92;(E\left[X_i\right]=\mu,V\left[X_i\right]=\sigma^2&amp;#92;) で, &amp;#92;(n\to\infty&amp;#92;) のとき,
  &amp;#92;(\overline{X}_n&amp;#92;) の分布は &amp;#92;(N\left(\mu,\dfrac{\sigma^2}{n}\right)&amp;#92;) に近く.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;という定理である. &lt;a href="#lawOfLargeNumbers"&gt;大数の弱法則&lt;/a&gt;とこの中心極限定理ともにサンプル平均 \(\overline{X}_n\) の振る舞いに関する定理であるが,
後者においては, サンプル平均と, 真の平均との誤差について論ずる定理である点が異なる. 
つまり, &lt;a href="#lawOfLargeNumbers"&gt;大数の弱法則&lt;/a&gt;より \(\overline{X}_n\approx\mu\) であることはわかったが, その差 \(\overline{X}_n-\mu\) はどのような挙動となるのか,
また \(0\) に近づいていくのはわかったが, どのように近づいていくのかについて論じているのが, &lt;a href="#centralLimitTheorem"&gt;中心極限定理&lt;/a&gt;である&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;.
中心極限定理は, それが正規分布に近似するといっているので,
起きた事象の珍しさを測るための指標として用いることができ, これが統計における検定に役立つ.
また, すべての平均と分散が定義できるような分布&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;に対していえることから,&amp;nbsp;様々な事象が正規分布に従うことを正当化するための理論的根拠としてよく用いられる.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href="http://www.math.kobe-u.ac.jp/HOME/higuchi/h23kogi/h23kouki/p1-11.pdf"&gt;第 2 章 独立確率変数列の極限定理&lt;/a&gt;」 2018 年 10 月 29&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://shoichimidorikawa.github.io/Lec/ProbDistr/cauchy.pdf"&gt;コーシー分布&lt;/a&gt;」 2018 年 10 月 29&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://mathtrain.jp/gaussdistribution"&gt;正規分布の基礎的な知識まとめ - 高校数学の美しい物語&lt;/a&gt;」 2018 年 9 月 27&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://mathtrain.jp/centrallimit" name="ref1"&gt;大数の法則と中心極限定理の意味と関係 - 高校数学の美しい物語&lt;/a&gt;」 2018 年 10 月 29&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://mathtrain.jp/condexpectation"&gt;条件付き期待値，分散の意味と有名公式 - 高校数学の美しい物語&lt;/a&gt;」 2018 年 11 月 12&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://mcm-www.jwu.ac.jp/~konno/pdf/statha3.pdf"&gt;3.3 条件付き期待値&lt;/a&gt;」 2018 年 11 月 12&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;\(\sigma\)-加法族は, 完全加法族, 可算加法族, \(\sigma\)-集合代数, \(\sigma\)-集合体ともいわれる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;簡単のため, 確率変数 \(X, Y\) に対して \(E\left[X,Y\right]=E\left[X\right]+E\left[Y\right]\) を示して証明とする. ここで, \(\sum_i:=\sum^n_{i=1},\sum_j:=\sum^n_{j=1}\) とし, 確率変数 \(X\) がその取り得る値 \(x_i\) となる確率を \(P(x_i)\), 同様に \(Y\) がその取り得る値 \(y_j\) となる確率を \(P(y_j)\) とする. また, そのどちらもが同時に発生する確率を \(P(x_i,y_j)\) とする. &lt;div class="math"&gt;\begin{eqnarray} E\left[X+Y\right]&amp;amp;=&amp;amp;\sum_i\sum_j\left(x_i+y_j\right)P(x_i,y_j) \\\ &amp;amp;=&amp;amp;\sum_i\sum_j x_iP(x_i,y_j)+\sum_i\sum_j y_jP(x_i,y_j) \\\ &amp;amp;=&amp;amp;\sum_i x_i\sum_j P(x_i,y_j)+\sum_j y_j\sum_i P(x_i,y_j) \\\ &amp;amp;=&amp;amp;\sum_i x_iP(x_i)\sum_j y_jP(y_j) \\\ &amp;amp;=&amp;amp; E\left[X\right]+E\left[Y\right] \end{eqnarray}&lt;/div&gt; 連続的確率変数に対しても, 積分の線型性から同様. \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;\(\eqref{eq:exaxiom3}\) および&lt;a href="#LinearityExpectedValue"&gt;期待値の線形性&lt;/a&gt;より &lt;div class="math"&gt;\begin{eqnarray}E\left[\overline{X}\right]&amp;amp;=&amp;amp;E\left[\dfrac{1}{n}\sum^n_{i=1}X_i\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{n}E\left[X_1+\cdots+X_n\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{n}n\mu \\\ &amp;amp;=&amp;amp;\mu \end{eqnarray}&lt;/div&gt; \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;簡単のため, 連続型確率変数 \(X,Y\) に対する &lt;span class="math"&gt;\(E\left[Y\right]=E\left[E\left[Y|X\right]\right]\)&lt;/span&gt; を示して証明とする. &lt;span class="math"&gt;\(E\left[Y\right]\)&lt;/span&gt; は条件付き期待値の定義から &lt;div class="math"&gt;$$E\left[Y\right]=\int^\infty_{-\infty}\int^\infty_{-\infty}yf(x,y)dxdy$$&lt;/div&gt; ここで, \(f(x,y)\) は \(X,Y\) の同時確率密度関数である. 従って, &lt;div class="math"&gt;\begin{eqnarray}E\left[Y\right]&amp;amp;=&amp;amp;\int^\infty_{-\infty}\int^\infty_{-\infty}yf(x,y)dxdy \\\ &amp;amp;=&amp;amp;\int^\infty_{-\infty}\int^\infty_{-\infty}y\dfrac{f(x,y)}{f(x)}f(x)dxdy \\\ &amp;amp;=&amp;amp;\int^\infty_{-\infty}\left[\int^\infty_{-\infty}yf(y|x)dx\right]f(x)dx \\\ &amp;amp;=&amp;amp; \int^\infty_{-\infty}E\left[X|y\right]f(x)dydx \\\ &amp;amp;=&amp;amp;E\left[E\left[Y|X\right]\right]\end{eqnarray}&lt;/div&gt; \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;平均 \(\mu\), 分散 \(\sigma^2\) の確率変数 \(X\) を正則化した変数 \(Z=\dfrac{X-\mu}{\sigma}\) の期待値と分散を確認してみると, 平均は \(\eqref{eq:exaxiom2}, \eqref{eq:exaxiom3}\) より &lt;div class="math"&gt;\begin{eqnarray}E\left[Z\right]&amp;amp;=&amp;amp;E\left[\dfrac{X-\mu}{\sigma}\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{\sigma}E\left[X-\mu\right] \\\ &amp;amp;=&amp;amp; \dfrac{1}{\sigma}\left(E\left[X\right]-\mu\right) \\\ &amp;amp;=&amp;amp;\dfrac{1}{\sigma}\left(\mu-\mu\right) \\\ &amp;amp;=&amp;amp;0\end{eqnarray}&lt;/div&gt; 分散は \(\eqref{eq:exaxiom6}, \eqref{eq:exaxiom7}\) より &lt;div class="math"&gt;\begin{eqnarray}V\left[Z\right]&amp;amp;=&amp;amp;V\left[\dfrac{X-\mu}{\sigma}\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{\sigma^2}V\left[X-\mu\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{\sigma^2}V\left[X\right] \\\ &amp;amp;=&amp;amp;\dfrac{\sigma^2}{\sigma^2} \\\ &amp;amp;=&amp;amp; 1\end{eqnarray}&lt;/div&gt; となり標準正規分布に従うことがわかる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;\(\eqref{eq:exaxiom7}\) および&lt;a href="#LinearityExpectedValue"&gt;期待値の線形性&lt;/a&gt;より &lt;div class="math"&gt;\begin{eqnarray}V\left[\overline{X}\right]&amp;amp;=&amp;amp;V\left[\dfrac{1}{n}\sum^n_{i=1}X_i\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{n^2}V\left[X_1+\cdots+X_n\right] \\\ &amp;amp;=&amp;amp;\dfrac{1}{n^2}n\sigma^2 \\\ &amp;amp;=&amp;amp;\dfrac{\sigma^2}{n}\end{eqnarray}&lt;/div&gt; \(\square\)&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;matplotlib 等で&lt;a href="https://gist.github.com/falgon/63bfa6f2039ad25379d441831f4bb648"&gt;生成&lt;/a&gt;. 標準偏差 \(\sigma\) を \([1,5]\) としたとき.&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="#ref1"&gt;参考文献&lt;/a&gt;から一部引用: &lt;i&gt;ベーシックな大数の弱法則は中心極限定理から導出することができます。→&lt;a href="http://www.dklevine.com/archive/strong-law.pdf"&gt;The Laws of Large Numbers Compared&lt;/a&gt;(snip) しかし，より一般的な（仮定を弱めた）大数の弱法則は中心極限定理から導出することはできません。つまり「中心極限定理が大数の法則を包含している」と言うことはできないのです。&lt;/i&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;平均, 分散が定義できない分布の例としてよく挙げられるものの 1 つ: コーシー分布.&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Probability theory"></category></entry><entry><title>ヤコビアン</title><link href="https://falgon.github.io/roki.log/posts/2018/10%E6%9C%88/04/jacobian/" rel="alternate"></link><published>2018-10-04T00:00:00+09:00</published><updated>2018-10-04T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-10-04:/roki.log/posts/2018/10月/04/jacobian/</id><summary type="html">&lt;p&gt;ヤコビアンに関するまとめ&lt;/p&gt;</summary><content type="html">&lt;p&gt;以前のエントリ, &lt;a href="/roki.log/posts/2018/%209/26/GaussianIntegral/"&gt;ガウス積分の公式とその証明&lt;/a&gt;で, 
暗に極座標での微小面積が &lt;span class="math"&gt;\(rdrd\theta\)&lt;/span&gt;
であるとして書いていたので, その内容についても一応書いておこうというのと,
筆者自身の学習/再整理も兼ねて, ヤコビアンに関して書くこととした(&lt;i&gt;ただ, 筆者は数学科でも化学科でも, ましてや理学部系の人でもありません. 極力ないようにはしていますが, もし間違い等ありましたらご教示くださるとありがたいです&lt;/i&gt;).&lt;/p&gt;
&lt;h3&gt;極座標の微小面積&lt;/h3&gt;
&lt;p&gt;まず唐突であるが, 直交座標から極座標へ移行する際に,&amp;nbsp;その微小面積はどうなるかについて考察する.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;img width="500px" src="../../../../../images/2018/September/26/cube_and_cross_section.png" alt="立方体とその断面" /&gt;
&lt;/div&gt;

&lt;p&gt;上図&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;は, \(1\times 1\times 1\) の立方体があって, その断面をそれぞれ極座標と直交座標で示しているだけであるが,
この断面図のマスの広がり方を見るだけで, 少なくとも極座標における微小面積が \(drd\theta\) とはならないことに納得できる.
単に \(drd\theta\) としてしまうと, \(r\)&amp;nbsp;が大きくなればなるほど微小面積も伸びて大きくなっていってしまうだろうというラフな想像がつく.&lt;/p&gt;
&lt;p&gt;ここで微小面積を導出するために, \(r,\theta\) をともに少しだけ動かして, その幅をそれぞれ \(\Delta r,\Delta \theta\) で表した, 次のような配置を考える&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;img src="../../../../../images/2018/September/26/smallarea.png" alt="微小面積の導出fig" /&gt;
&lt;/div&gt;

&lt;p&gt;\(r\) の距離と \(\theta\) の角度で構成された面積, 
つまり上図の \(\Delta s\) が微小面積に対応することがわかる. \(\Delta s\) の面積は, 
単に全体の扇形の面積から, \(r\) と \(\Delta\theta\)&amp;nbsp;で構成された扇形の面積を引けばよいので,&lt;/p&gt;
&lt;p&gt;\[\Delta s=\dfrac{1}{2}\left(r+\Delta r\right)^2\Delta\theta-\dfrac{1}{2}r^2\Delta\theta
=r\Delta r\Delta\theta+\dfrac{1}{2}\left(\Delta&amp;nbsp;r\right)^2\Delta\theta\]&lt;/p&gt;
&lt;p&gt;\(\displaystyle\lim_{\Delta\theta,\Delta r\to 0} \) を考えれば,
微小量 \(\Delta r\Delta\theta\) の高次の項を無視してよい.
よってこれを微小増分に書き換えれば, \(\Delta s\) は \(rdrd\theta\)&amp;nbsp;となることがいえる.&lt;/p&gt;
&lt;p&gt;&amp;#8230;というように, ここまでは幾何学的なイメージを用いて,
直交座標と極座標間における微小面積の遷移について考察したが,
異なる座標系への変換をしようとする度にいちいち図などを用いて考察するのは面倒であり,
従って, より機械的/一般的にこれを実行する手法について考えることは自然な流れと言える.
よって,&amp;nbsp;以降はそれを主題として話を進めていく.&lt;/p&gt;
&lt;p&gt;ところで微積分では, 今もそうして行ったように, 極限の概念を多大に用いるので,&amp;nbsp;ここで本題に入る前にその定義に関して触れておくこととする.&lt;/p&gt;
&lt;h3&gt;\(\epsilon-\delta\)&amp;nbsp;論法&lt;/h3&gt;
&lt;p&gt;\(\epsilon-\delta\) 論法とは簡単にいえば, 無限小, 無限大といった実数の範囲では定義できない曖昧な概念を, 実数値のみを用いて議論する方法で,&amp;nbsp;同論法上で極限の式との同値関係を示した定義が次のとおりである.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="epsilonDelta-definitionOfLimit" class="disabled"&gt;&amp;#92;(\epsilon-\delta&amp;#92;) 論法の定義する極限の式との同値関係&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(f&amp;#92;) を実数の部分集合 &amp;#92;(D&amp;#92;) で定義された実数値関数, &amp;#92;(c&amp;#92;) を &amp;#92;(D&amp;#92;) の極限点, &amp;#92;(L&amp;#92;) を実数としたとき,
  &amp;#92;[\displaystyle
  \lim_{x\to c}f(x)=L\Leftrightarrow\left(^\forall\epsilon\gt 0,^\exists\delta\gt 0,^\forall x\in D,0\lt\left|x-c\right|\lt\delta\Rightarrow\left|f(x)-L\right|\lt\epsilon\right)&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;\(D=[a,b]\) または \(D=\mathbb{R}\) ならば, 閉じた実区間と実数直線は完全集合となり, \(c\) は自動的に極限点であるという条件が満たされるので,
簡単のためにこれを \(D=\mathbb{R}\) として書き直すと, \(\epsilon-\delta\)&amp;nbsp;論法は&lt;/p&gt;
&lt;p&gt;\[^\forall\epsilon\gt 0,^\exists\delta\gt 0,\ {\rm s.t.}\ ^\forall x\in\mathbb{R},&amp;nbsp;\left|x-c\right|\lt\delta\Rightarrow\left|f(x)-L\right|\lt\epsilon\]&lt;/p&gt;
&lt;p&gt;となる. 日本語で記述すると「任意の実数 \(^\forall x\in\mathbb{R}\) に対して, \(\left|x-c\right|\lt\delta\) を満たすならば, すべての正の実数 \(\epsilon\) に対して
\(\left|f(x)-L\right|\lt\epsilon\) を満たすような \(\delta\) が存在する.」となる. 
つまりこの言葉で, 関数 \(f(x)\) が \(x=c\) で連続であることの定義をいうことができるのである.
これをグラフで表すと, 次のように描けるだろう.
関数 \(y=f(x)\) のとる値を赤の線として, \(x=c\) のときの Y 座標の値を \(L\) とし,
いま \(\epsilon\) を適当に取ってきて, \(c\) からの幅 \(\delta\) を \(L\)&amp;nbsp;との幅よりも小さくなるようにとると&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/d/d1/L%C3%ADmite_01.svg" alt="limite" width="300px" /&gt;
&lt;p style="font-size: 0.3rem;"&gt;By User:HiTe [&lt;a href="https://en.wikipedia.org/wiki/en:public_domain"&gt;Public domain&lt;/a&gt;], &lt;a href="https://commons.wikimedia.org/wiki/File:L%C3%ADmite_01.svg"&gt;from Wikimedia&amp;nbsp;Commons&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;となり, これは, さきに書いた論理式を満たすことがわかる. 上図の \(\epsilon\) を見ると, この値はそこそこの大きさがあるように見えるが,
これをさらに小さい値で取ったとしても, \(\delta\) をそれよりもさらに小さい幅で取ることができる(=上の論理式が満たされる).
従って, 上で描いた関数 \(f(x)\) は \(x=c\) で連続であると言える. 逆に, \(\delta\) をそれよりもさらに小さい幅で取ることができないのならば, それは連続でないといえることもわかる.
いまこれらを言うのに, 極限の概念を用いることはなかった.
このようにして, 表向きに極限を用いずとも, 関数の連続性の定義ができたということが, \(\epsilon-\delta\) 論法の主要な存在意義の 1 つである&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;ところで, この「任意の実数 \(^\forall x\in\mathbb{R}\) に対して, \(\left|x-c\right|\lt\delta\) を満たすならば, すべての正の実数 \(\epsilon\) に対して
\(\left|f(x)-L\right|\lt\epsilon\) を満たすような \(\delta\) が存在する.」というのは, \(x\) を \(c\) に近づけていくとき, \(f(x)\) 自体が \(L\) と同じであろうがなかろうが,
\(L\) でない他のどのような値と比べても, より \(L\) に近づいていくものであるともいえる. 
そのようにより近づいていく値を, その値そのものと同値であるとみなすことが, \(\epsilon-\delta\) 論法における極限であるともいえるのである.
つまり, \(\epsilon-\delta\) 論法は, &lt;strong&gt;どんなに小さな任意の \(\epsilon\) を考えても, \(\left|x-c\right|\lt\delta\) であるとき,
\(\left|f(x)-L\right|\lt\epsilon\) になるような \(\delta\) があるならば, 関数 \(f(x)\) の \(x\to c\) の極限値 \(\displaystyle\lim_{x\to c}f(x)\) を \(L\) と同値とみなす&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;より一般的な変数変換&lt;/h3&gt;
&lt;p&gt;極限に関して厳密な定義ができたところで, 本題に入るが,
問題そのものを的確に把握することは, 問題を解く上で最も重要な過程であるので,&amp;nbsp;異なる座標系への移行という行為が一体どういうことなのかについてここで整理しておく. &lt;/p&gt;
&lt;h4&gt;異なる座標系への移行とは何か&lt;/h4&gt;
&lt;p&gt;唐突であるが, \(D\) を \(x,y\) 平面の閉領域として, \[
\int\int_{D}(x-y)e^{x+y}dxdy, D=\left\{(x,y)|0\leq x+y\leq 2, 0\leq x-y\leq 2\right\}
\] 
の積分値を計算せよと言われたら, どのように解けば良いのだろうか. 
そのまま計算するよりも, \(u=x+y,v=x-y\) とおくと楽なので, 
いま\(D\) に変わる新しい領域 \(E\) を \(u,v\) 平面の閉領域として \[
\int\int_{E}ve^ududv, E=\left\{(u,v)|0\leq u\leq 2,0\leq v\leq 2\right\}
\]
と書きたくなるが, この積分値は元の領域と等しくない&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;. 1 次元のときの変数変換を思い出せば, 例えば \(x=\phi(t)\) と変数変換したときに, 
\[\displaystyle\int_{x_1}^{x_2}f(x)dx\not =\int_{t_1}^{t^2}f(\phi(t))dt\] で \[\displaystyle\int_{x_1}^{x_2}f(x)dx =\int_{t_1}^{t^2}f(\phi(t))\phi&amp;#8217;(t)dt\]
だったのと同様, 変数変換における双方の対応関係から成る比率で, 埋めあわせをしなければならなかった.
2 重積分においてこの比率は, 元の領域との&lt;strong&gt;面積比&lt;/strong&gt;に相当することになる.
つまり, その一般解を得ることで,&amp;nbsp;異なる座標系間での移行が可能となるのである.&lt;/p&gt;
&lt;h4&gt;幾何学的なアプローチ&lt;/h4&gt;
&lt;p&gt;微積分学的な言葉を使ったアプローチを行う前に,&amp;nbsp;図形的意味を重視してまず書くこととする.&lt;/p&gt;
&lt;p&gt;そもそも重積分というのは, ある座標系における微小面積と, ある関数 \(f\) との値の積の総和の極限を取ることであった.
\(u,v\) 座標系というものがあれば, その座標系/定義域における微小面積で, 今述べた操作を行うのである.
というわけで, まず直交座標から一般の座標系への写像となる関数を, \(x=\phi(u,v), y=\psi(u,v)\)&amp;nbsp;として考察することとする.&lt;/p&gt;
&lt;p&gt;早速であるが, \(u\) とそこから少し動いた \(u+\Delta u\), \(v\) とそこから少し動いた \(v+\Delta v\) から成る四角形について考える.
これが, \(u,v\) 座標系における微小面積である. 
この四角形のそれぞれの頂点は, 直交座標の言葉で(\(\phi, \psi\)&amp;nbsp;関数を使って),
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{l}
O\left(\phi(u,v),\psi(u,v)\right) \\\
A\left(\phi(u+\Delta u, v), \psi(u+\Delta u,v)\right) \\\
B\left(\phi(u,v+\Delta v), \psi(u,v+\Delta v)\right) \\\
C\left(\phi(u+\Delta u,v+\Delta v), \psi(u+\Delta,v+\Delta v)\right)
\end{array}&lt;/div&gt;
&lt;p&gt;
などと書き表わせる(頂点それぞれに, 適当に記号を割り振った. また, わかり易さのために頂点 \(C\) を書いたが,&amp;nbsp;今回これは使わない).&lt;/p&gt;
&lt;p&gt;さて, これらの頂点から成る四角形は, 極限の基で近似的に平行四辺形となるということを予めここで言ってしまおう. 
従って, その平行四辺形の面積 \(S\) を求めるために, &lt;span class="math"&gt;\(\left(\overrightarrow{OA}, \overrightarrow{OB}\right)\)&lt;/span&gt; の行列式を求めることとする&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.
まず, &lt;span class="math"&gt;\(\overrightarrow{OA}\)&lt;/span&gt; について考える. これは単に, \(A\) の座標から \(O\) の座標を引けば良いが, これは&lt;a href="#PartialDerivative"&gt;偏微分&lt;/a&gt;そのもので,&amp;nbsp;線形近似により,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\phi(u+\Delta u, v)-\phi(u,v)&amp;amp;\approx&amp;amp;\dfrac{\partial \phi}{\partial u}\Delta u \\\
\psi(u+\Delta u, v)-\psi(u,v)&amp;amp;\approx&amp;amp;\dfrac{\partial \psi}{\partial u}\Delta u
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と書ける. 従って, &lt;span class="math"&gt;\(\overrightarrow{OB}\)&lt;/span&gt;&amp;nbsp;についても同様に,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\overrightarrow{OA}&amp;amp;\approx&amp;amp;\left(\dfrac{\partial \phi}{\partial u}\Delta u,\dfrac{\partial \psi}{\partial u}\Delta u\right) \\\
\overrightarrow{OB}&amp;amp;\approx&amp;amp;\left(\dfrac{\partial \phi}{\partial v}\Delta v,\dfrac{\partial \psi}{\partial v}\Delta v\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;と書ける. あとは,&amp;nbsp;これらから成る行列の行列式の絶対値を求めれば良いから,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
S&amp;amp;\approx&amp;amp;\left|{\rm det}\left(
\begin{array}{cc}
\dfrac{\partial \phi}{\partial u}\Delta u&amp;amp;\dfrac{\partial \phi}{\partial v}\Delta v \\\
\dfrac{\partial \psi}{\partial u}\Delta u&amp;amp;\dfrac{\partial \psi}{\partial v}\Delta v
\end{array}
\right)\right| \\\
&amp;amp;\approx&amp;amp;\left|{\rm det}\left(
\begin{array}{cc}
\dfrac{\partial \phi}{\partial u}&amp;amp;\dfrac{\partial \phi}{\partial v} \\\
\dfrac{\partial \psi}{\partial u}&amp;amp;\dfrac{\partial \psi}{\partial v}
\end{array}
\right)\right|\Delta u\Delta v
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\Delta u, \Delta v\) の無限小の極限をとり,&amp;nbsp;微小増分の式に書き換えれば,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;\approx&amp;amp;\left|{\rm det}\left(
\begin{array}{cc}
\dfrac{\partial \phi}{\partial u}&amp;amp;\dfrac{\partial \phi}{\partial v} \\\
\dfrac{\partial \psi}{\partial u}&amp;amp;\dfrac{\partial \psi}{\partial v}
\end{array}
\right)\right|dudv\label{eq:jacobian}\tag{1}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\eqref{eq:jacobian}\) の行列式の絶対値がヤコビアンである.
いま求めた式 \(\eqref{eq:jacobian}\) は,&amp;nbsp;後に述べている全微分といわれる操作に相当している.&lt;/p&gt;
&lt;h4&gt;全微分&lt;/h4&gt;
&lt;p&gt;全微分は, 偏微分に関してもう一度考えることで納得できる.
(先に線形代数的アプローチで, 偏微分は自明なものとして使ってしまったが)そもそも偏微分はなんだったかといえば, 多変数関数の特定の変数以外を定数と捉えて微分することであった.&amp;nbsp;つまり, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="PartialDerivative" class="disabled"&gt;偏微分&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(U&amp;#92;) を &amp;#92;(R^n&amp;#92;) の開部分集合とし, 函数 &amp;#92;(f:U\to R&amp;#92;) に対して,
&amp;#92;({\bf x}=\left(x_1, \cdots, x_n\right) \in U&amp;#92;) の &amp;#92;(i&amp;#92;) 番目の変数 &amp;#92;(x_i&amp;#92;) における
&amp;#92;(f&amp;#92;) の偏微分は &amp;#92;[\displaystyle
\dfrac{\partial}{\partial x_i}f({\bf x}) := \lim_{\Delta x_i\to 0}\dfrac{f\left(x_1,\cdots,x_i+\Delta x_i,\cdots,x_n\right)-f\left(x_1,\cdots,x_i,\cdots,x_n\right)}{\Delta x_i}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;である. 要するに, \(f\) が 2&amp;nbsp;変数関数であれば, 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\frac{\partial f(x, y)}{\partial x} &amp;amp;:=&amp;amp; \lim_{\Delta \to 0} \frac{f(x + \Delta, y) - f(x, y)}{\Delta}\\\
\frac{\partial f(x, y)}{\partial y} &amp;amp;:=&amp;amp; \lim_{\Delta \to 0} \frac{f(x, y + \Delta) - f(x, y)}{\Delta}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;である. これを踏まえて, 2 変数関数における全微分を導出することを考える.
簡単に言ってしまえば, 
偏微分が 2 変数以上の関数のただ 1 つを変数とみなして, 
その微小変化に対する変化量を求めることであったのに対し,
全微分は, 全ての変数の微小変化に対する変化量を求めることである.
まず変数 \(x, y\) が各々で微小量 \(\Delta x,\Delta y\) だけ変化するとき, 
その全体の変化量 \(\Delta f\)&amp;nbsp;を次のように表せる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\Delta f&amp;amp;=&amp;amp;f(x+\Delta x, y+\Delta y)-f(x,y) \\\
&amp;amp;=&amp;amp;f(x+\Delta x, y+\Delta y)-f(x,y+\Delta y)+f(x,y+\Delta y)-f(x,y) \label{eq:first}\tag{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;式 \(\eqref{eq:first}\)&amp;nbsp;の改行位置を変えるとわかりやすいが,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\Delta f&amp;amp;=&amp;amp;f(x+\Delta x, y+\Delta y)-f(x,y+\Delta y) \label{eq:second}\tag{3}\\\
&amp;amp;+&amp;amp;f(x,y+\Delta y)-f(x,y) \label{eq:third}\tag{4}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;いま, それぞれの部分に着目すると, \(\eqref{eq:second}\) 部分は \(x\) のみを変化させたときの \(f\) の変化量で,
\(\eqref{eq:third}\) 部分は \(y\) のみを変化させたときの \(f\) の変化量となっていることがわかる.
この式 \(\eqref{eq:first}\)&amp;nbsp;をさらに変形させると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\displaystyle
\Delta f&amp;amp;=&amp;amp;\dfrac{f(x+\Delta x, y+\Delta y)-f(x,y+\Delta y)}{\Delta x}\Delta x \\\
&amp;amp;+&amp;amp;\dfrac{f(x,y+\Delta y)-f(x,y)}{\Delta y}\Delta y
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;この式が微分の定義式と酷似していることに気づけば, 
\(\Delta x,\Delta y\) の無限小の極限をとり,&amp;nbsp;微小増分の式に書き換えて,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\displaystyle
df&amp;amp;=&amp;amp;\lim_{dx,dy\to 0}\dfrac{f(x+dx, y+dy)-f(x,y+dy)}{dx}dx \label{eq:fourth}\tag{5} \\\
&amp;amp;+&amp;amp;\lim_{dx,dy\to 0}\dfrac{f(x,y+dy)-f(x,y)}{dy}dy \label{eq:fifth}\tag{6}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;\(\displaystyle\lim_{dx,dy\to 0}\) を考えると,
\(\eqref{eq:fourth}\) 部分はもはや \(\displaystyle\lim_{dx,dy\to 0}\dfrac{f(x+dx, y)-f(x,y)}{dx}\) と同然であるので,
すべての値 \(\eqref{eq:fourth},\eqref{eq:fifth}\) が, 特定以外の変数を変化させない微分となっていることがわかる.
ここで, 記号 \(\partial\) を導入して, いまの式を \[df=\dfrac{\partial f}{\partial x}dx+\dfrac{\partial f}{\partial y}dy\label{eq:sixth}\tag{7}\] と書くと, 
これが全微分/完全微分の定義になる. 
多変数関数 \(f\) の無限小変化を式 \(\eqref{eq:sixth}\) のように表せるとき, 多変数関数 \(f\)&amp;nbsp;はその変数において全微分可能であるという.&lt;/p&gt;
&lt;h4&gt;全積分とヤコビアン&lt;/h4&gt;
&lt;p&gt;先に \(x=\phi(u,v), y=\psi(u,v)\) としていたので, \(x,y\)&amp;nbsp;の全微分は
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
dx&amp;amp;=&amp;amp;\dfrac{\partial\phi}{\partial u}du+\dfrac{\partial\phi}{\partial v}dv \\\
dy&amp;amp;=&amp;amp;\dfrac{\partial\psi}{\partial u}du+\dfrac{\partial\psi}{\partial v}dv
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる.&amp;nbsp;いまこれを行列で表すと,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{pmatrix}
dx \\\
dy
\end{pmatrix}=
\begin{pmatrix}
\dfrac{\partial\phi}{\partial u}&amp;amp;\dfrac{\partial\phi}{\partial u} \\\
\dfrac{\partial\psi}{\partial v}&amp;amp;\dfrac{\partial\psi}{\partial v}
\end{pmatrix}
\begin{pmatrix}
du \\\
dv
\end{pmatrix}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;となる.&amp;nbsp;この行列の行列式 &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
{\rm det}
\left(
\begin{array}{cc}
\dfrac{\partial\phi}{\partial u}&amp;amp;\dfrac{\partial\phi}{\partial v} \\\
\dfrac{\partial\psi}{\partial u}&amp;amp;\dfrac{\partial\psi}{\partial v}
\end{array}
\right)
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;はヤコビアンといわれ(\(\eqref{eq:jacobian}\) と同じ), \(\dfrac{\partial(\phi,\psi)}{\partial{u,v}}\), また \({\rm J}(u, v)\) と表される.&amp;nbsp;一般に,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="Jacobian" class="disabled"&gt;ヤコビアン&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(n&amp;#92;) 変数関数の全微分を行列で表した式
\begin{eqnarray}
\begin{pmatrix}
f_1 &amp;#92;\
\vdots &amp;#92;\
f_n
\end{pmatrix}=
\begin{pmatrix}
\dfrac{\partial f_1}{\partial x_1}&amp;\cdots&amp;\dfrac{\partial f_1}{\partial x_n} &amp;#92;\
\vdots&amp;\ddots&amp;\vdots &amp;#92;\
\dfrac{\partial f_n}{\partial x_1}&amp;\cdots&amp;\dfrac{\partial f_n}{\partial x_n}
\end{pmatrix}
\begin{pmatrix}
dx_1 &amp;#92;\
\vdots &amp;#92;\
dx_n
\end{pmatrix}
\end{eqnarray}
の行列の行列式
\begin{eqnarray}
{\rm det}\left(
\begin{array}{ccc}
\dfrac{\partial f_1}{\partial x_1}&amp;\cdots&amp;\dfrac{\partial f_1}{\partial x_n} &amp;#92;\
\vdots&amp;\ddots&amp;\vdots &amp;#92;\
\dfrac{\partial f_n}{\partial x_1}&amp;\cdots&amp;\dfrac{\partial f_n}{\partial x_n}
\end{array}\right)
\end{eqnarray}
を &amp;#92;(\dfrac{\partial(f_1,\cdots,f_n)}{\partial(x_1,\cdots,x_n)}&amp;#92;) また &amp;#92;({\rm J}(x_1,\cdots,x_n)&amp;#92;) と書く.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;冒頭で述べた直交座標から極座標への変換をこのヤコビアンを使って導くならば,&amp;nbsp;まず二次元直交座標系から二次元極座標系への対応関係は, &lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\begin{pmatrix}
x \\ y
\end{pmatrix}= 
\begin{pmatrix}
r \cos\theta \\  r \sin\theta
\end{pmatrix}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;で, 二次元極座標の変数は \(r, \theta\)&amp;nbsp;なのでこれをヤコビアンに与えて,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
J(r,\theta)={\rm det}\left(\begin{array}{cc}
\cos\theta &amp;amp; -r\sin\theta \\\
\sin\theta &amp;amp; r\cos\theta
\end{array}\right)=r
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;一般の 2&amp;nbsp;重積分は&lt;/p&gt;
&lt;p&gt;\[\int\int_D f(x,y)dxdy=\int\int_E f\left(\phi(u,v),\psi(u,v)\right)J(u,v)dudv\] なので, 
極座標における全体の微小面積は \(rdrd\theta\) となり, 冒頭で行った図形的解釈のもとに導き出した解と一致することがわかる.&amp;nbsp;「異なる座標系への移行とは何か」の冒頭で挙げた例題&lt;/p&gt;
&lt;p&gt;\[\int\int_{D}(x-y)e^{x+y}dxdy, D=\left\{(x,y)|0\leq x+y\leq 2, 0\leq x-y\leq&amp;nbsp;2\right\}\]&lt;/p&gt;
&lt;p&gt;も, \(u=x+y, v=x-y\)&amp;nbsp;とおいてヤコビアンに与えれば,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
{\rm J}(u,v)&amp;amp;=&amp;amp;{\rm det}\left(\begin{array}{rr} \dfrac{1}{2}&amp;amp;\dfrac{1}{2} \\\
\dfrac{1}{2}&amp;amp;-\dfrac{1}{2}\end{array}\right)&amp;amp;=&amp;amp;-\dfrac{1}{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;絶対値を考えれば良いので,&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;=&amp;amp;\left|{\rm det}\left(\begin{array}{rr} \dfrac{1}{2}&amp;amp;\dfrac{1}{2} \\\ \dfrac{1}{2}&amp;amp;-\dfrac{1}{2}\end{array}\right)\right|&amp;amp;=&amp;amp;\dfrac{1}{2}
\end{eqnarray}&lt;/div&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\therefore\int\int_D(x-y)e^{x+y}dxdy&amp;amp;=&amp;amp;\int^2_0\int^2_0ve^u\dfrac{1}{2}dudv \\\
&amp;amp;=&amp;amp;\dfrac{1}{2}\int^2_0\left[ve^u\right]^2_0dv \\\
&amp;amp;=&amp;amp;\dfrac{1}{2}\int^2_0\left(ve^2-v\right)dv \\\
&amp;amp;=&amp;amp;\dfrac{1}{2}\left[\dfrac{e^2}{2}v^2-\dfrac{1}{2}v^2\right]^2_0 \\\
&amp;amp;=&amp;amp;e^2-1
\end{eqnarray}&lt;/div&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a href="http://mathforum.org/library/drmath/view/74707.html"&gt;Why Does dxdy = rdrd(theta)? Why Not Just drd(theta)?&lt;/a&gt;&amp;#8221; 2018 年 10 月 4&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="http://simanezumi1989.hatenablog.com/entry/2015/06/22/133411"&gt;GeoGebraを使ってε-δ論法を可視化してみた&lt;/a&gt;」 2018 年 10 月 4&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="https://jsciencer.com/unimath/bisekibun/3611/" name="ref1"&gt;微分の順序&lt;/a&gt;」 2018 年 10 月 4 日アクセス.
&lt;li&gt;「&lt;a href="http://eman-physics.net/analytic/total_dif.html"&gt;全微分&lt;/a&gt;」 2018 年 10 月 4 日アクセス.
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a href="https://euler.genepeer.com/determinants"&gt;The Jacobian &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Determinants - Euler, Erdős&lt;/a&gt;&amp;#8221; 2018 年 10 月 4 日アクセス.
&lt;/ul&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;図は matplotlib 等で&lt;a href="https://gist.github.com/falgon/e867c610ebdf957a827e2d26bd2ea451"&gt;生成&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;図は &lt;a href="https://www.draw.io/"&gt;draw.io&lt;/a&gt; で作成.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;完全に蛇足であるが, 連続性の定義は, 他の様々な前提のための重要な要素となりうる. 例えば, いま, \(f_x:=\dfrac{\partial f}{\partial x}, f_y:=\dfrac{\partial f}{\partial y}\) という記法を導入すると, 関数 \(f(x,y)\) の偏導関数 \(f_{x}(x,y), f_{y}(x,y)\) がそれぞれ偏微分可能であるとき, 4 つの 2 次偏導関数, &lt;div class="math"&gt;\begin{eqnarray} f_{xx}&amp;amp;=&amp;amp;\dfrac{\partial^2f}{\partial x^2}&amp;amp;=&amp;amp;\dfrac{\partial}{\partial x}\dfrac{\partial f}{\partial x} \\\ f_{xy}&amp;amp;=&amp;amp;\dfrac{\partial^2f}{\partial y\partial x}&amp;amp;=&amp;amp;\dfrac{\partial}{\partial y}\dfrac{\partial f}{\partial x} \\\ f_{yx}&amp;amp;=&amp;amp;\dfrac{\partial^2f}{\partial x\partial y}&amp;amp;=&amp;amp;\dfrac{\partial}{\partial x}\dfrac{\partial f}{\partial y} \\\ f_{yy}&amp;amp;=&amp;amp;\dfrac{\partial^2f}{\partial y^2}&amp;amp;=&amp;amp;\dfrac{\partial}{\partial y}\dfrac{\partial f}{\partial y} \\\ \end{eqnarray}&lt;/div&gt; を考えることができるが,  \(f\) にこの \(f_{xy}, f_{yx}\) が存在して, ともに連続であるといえれば, 偏微分の順序交換法則(\(f_{xy}=f_{yx}\)) が成り立つことを示せる. この証明は, &lt;a href="https://ja.wikipedia.org/wiki/%E5%B9%B3%E5%9D%87%E5%80%A4%E3%81%AE%E5%AE%9A%E7%90%86"&gt;平均値の定理&lt;/a&gt;を補題として証明した上で行わなければならなく大変だが, &lt;a href="#ref1"&gt;参考文献&lt;/a&gt;にわかりやすい証明がされている.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;正しい解答は末尾にて.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;補足: 2 つの二次元ベクトル \(a_1, a_2\) から成る 2 次正方行列の行列式の絶対値は, \(a_1,a_2\) が定める平行四辺形の面積に等しいのであった.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Python"></category></entry><entry><title>ガウス積分の公式とその証明</title><link href="https://falgon.github.io/roki.log/posts/2018/%209%E6%9C%88/26/GaussianIntegral/" rel="alternate"></link><published>2018-09-26T00:00:00+09:00</published><updated>2018-09-26T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-09-26:/roki.log/posts/2018/ 9月/26/GaussianIntegral/</id><summary type="html">&lt;p&gt;ガウス積分の公式と証明の学習&lt;/p&gt;</summary><content type="html">&lt;p&gt;当ブログ内でガウス積分(オイラー＝ポアソン積分)の公式を用いる際に self-contained でリファレンスを張るためと, 
個人的な学習の記録として, 本エントリにてガウス積分の公式とその証明について書く&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;span class="math"&gt;\(.\)&lt;/span&gt;
筆者自身にとっての分かりやすさを優先しているため,&amp;nbsp;若干冗長的な記述があるかもしれない点に注意.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="GaussianIntegral" class="disabled"&gt;ガウス積分の公式&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(x\in\mathbb{R}&amp;#92;) のとき &amp;#92;[\displaystyle\int_{-\infty}^{\infty}e^{-x^2}dx=\sqrt{\pi}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;\[I=\displaystyle\int_{-\infty}^{\infty}e^{-x^2}dx\] とおく. 
ここで, 最終的に \(\pi\) を出現させるために, 直交座標系から極座標系への移行を行いたい.
そのために,&amp;nbsp;まず二乗して&lt;/p&gt;
&lt;p&gt;\[I^2=\displaystyle\left(\int_{-\infty}^{\infty}e^{-x^2}dx\right)^2=
\left(\int_{-\infty}^{\infty}e^{-x^2}dx\right)\cdot\left(\int_{-\infty}^{\infty}e^{-x^2}dx\right)&amp;nbsp;\]&lt;/p&gt;
&lt;p&gt;文字を変えても積分値に変わりはないから&lt;/p&gt;
&lt;p&gt;\[I^2=\left(\int_{-\infty}^{\infty}e^{-x^2}dx\right)\cdot\left(\int_{-\infty}^{\infty}e^{-y^2}dy\right)=&amp;nbsp;\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}e^{-\left(x^2+y^2\right)}dxdy\]&lt;/p&gt;
&lt;p&gt;\(x=r\cos\theta,\ y=r\sin\theta, dx\ dy=rdrd\theta\) とし&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
I^2&amp;amp;=&amp;amp;\int_{0}^{2\pi}\int_{0}^{\infty}e^{-r^2}rdrd\theta \\\
&amp;amp;=&amp;amp;\int_{0}^{2\pi}d\theta\int_{0}^{\infty}re^{-r^2}dr \\\
&amp;amp;=&amp;amp;2\pi\left[\dfrac{1}{2}e^{-r^2}\right]^{\infty}_{0} \\\
&amp;amp;=&amp;amp;\pi
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
もともと \(I\) は被積分関数の関数形であり, 
定義域は \(I &amp;gt; 0\) だから, \(I=\sqrt{\pi}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;2 乗して \(x^2+y^2=r^2\)&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; を出現させ, 極座標での表現を開始する流れは, 胸熱であった.
さて, 以下はガウス積分の公式に関連した,&amp;nbsp;いくつかの等式について示すこととする.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="SimilarGaussianIntegral1" class="disabled"&gt;ガウス積分の類似形 1&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(x\in\mathbb{R}, a\in\mathbb{R}^{+}&amp;#92;) のとき, &amp;#92;[\displaystyle\int_{-\infty}^{\infty}e^{-ax^2}dx=\sqrt{\dfrac{\pi}{a}}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;\(y=\sqrt{a}x, dy=\sqrt{a}dx\)&amp;nbsp;とし,&lt;/p&gt;
&lt;p&gt;\[\int_{-\infty}^{\infty}e^{-ax^2}dx=\int_{-\infty}^{\infty}e^{-y^2}\cdot\dfrac{1}{\sqrt{a}}dy=\dfrac{1}{\sqrt{a}}\int_{-\infty}^{\infty}e^{-y^2}dy\label{eq:first}\tag{1}\]
\(\eqref{eq:first}\) の最右辺をみると&lt;a href="#GaussianIntegral"&gt;ガウス積分の公式&lt;/a&gt;と全く同じなので, \(\eqref{eq:first}=\sqrt{\dfrac{\pi}{a}}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="SimilarGaussianIntegral2" class="disabled"&gt;ガウス積分の類似形 2&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(x\in\mathbb{R}, a\in\mathbb{R}^{+}&amp;#92;) のとき, &amp;#92;[\displaystyle\int_{0}^{\infty}e^{-ax^2}dx=\dfrac{1}{2}\sqrt{\dfrac{\pi}{a}}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;単に&lt;a href="#SimilarGaussianIntegral1"&gt;ガウス積分の類似形 1&lt;/a&gt;の半分の領域となるだけなので,
\(\displaystyle\int_{0}^{\infty}e^{-ax^2}dx=\dfrac{1}{2}\sqrt{\dfrac{\pi}{a}}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a name="ref1" href="https://mathtrain.jp/gauss"&gt;ガウス積分の公式の 2 通りの証明&lt;/a&gt;」 2018 年 9 月 26&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a href="http://www.chem.tsukuba.ac.jp/kazuya/kazuya/AppC.pdf"&gt;C. 極座標&lt;/a&gt;」 2018 年 9 月 26&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;証明内では, &lt;a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%93%E3%83%8B%E3%81%AE%E5%AE%9A%E7%90%86"&gt;フビニの定理&lt;/a&gt;を暗黙に使っている. 恥ずかしながら, 筆者は測度論について全くの素人であるので, これを暗に用いることはあまりよくないと思うのだが, これが&lt;a href="#ref1"&gt;&lt;i&gt;シグマの二重和が分解できることの一般形&lt;/i&gt;&lt;/a&gt;であると理解して, 今回はこれを用いた.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;補足: 極座標系において, \(\theta\) の変域は \([0,2\pi]\), \(r\) の変域は \([0,\infty]\) である. また, 極座標での微小面積は \(drd\theta\) ではなく \(rdrd\theta\) であることに注意. これについては, 後日のエントリ, &lt;a href="/roki.log/posts/2018/10/04/jacobian/"&gt;ヤコビアン&lt;/a&gt;にて取り扱っている.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;一応書いておくと, この裏付けは三平方の定理より \(\cos^2+\sin^2=1\).&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Python"></category></entry><entry><title>三角関数の公式の導出</title><link href="https://falgon.github.io/roki.log/posts/2018/%209%E6%9C%88/06/The_definition_of_Trignometric_function/" rel="alternate"></link><published>2018-09-06T00:00:00+09:00</published><updated>2018-09-06T00:00:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-09-06:/roki.log/posts/2018/ 9月/06/The_definition_of_Trignometric_function/</id><summary type="html">&lt;p&gt;ある文書を読むための個人的な三角関数の復習&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="#ref1"&gt;参考文献 1&lt;/a&gt; では, 高木貞治氏の書いた&lt;a href="#ref2"&gt;解析概論&lt;/a&gt;の緒言として示されている三角関数の古典的な導入法の問題点と,
それに対する合理的な導入, 定義に関する記述があり, 興味深かったので読んでいたのだが, 
ふと高校数学 Ⅲ  の「普通な」加法定理や積和, 和積の公式, 導関数の導出などが頭から抜けていたので, 復習がてら書くことにした.
一応, このエントリで言う三角関数 \(\cos\theta,\sin\theta\) の定義は高校数学の範囲で言われる定義と同様であり,&amp;nbsp;次のとおりである.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;
  &lt;a name="hs_trignometric" class="disabled"&gt;高校数学における &amp;#92;(\cos\theta,\sin\theta&amp;#92;) の定義&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
直行座標平面上の原点 &amp;#92;(O\left(0,0\right)&amp;#92;) を中心とする半径 &amp;#92;(1&amp;#92;) の円 &amp;#92;(C&amp;#92;) の &amp;#92;(x\geq 0,y\geq 0&amp;#92;) の部分を &amp;#92;(C_{+}&amp;#92;) としたとき,
弧度法によると, 点 &amp;#92;(A\left(1,0\right)&amp;#92;), &amp;#92;(C_{+}&amp;#92;) 上の点 &amp;#92;(P\left(x,y\right)&amp;#92;) を角 &amp;#92;(A O P&amp;#92;) が &amp;#92;(\theta\ \left(0\lt\theta\leq\frac{\pi}{2}\right)&amp;#92;) となるようにとれば,
孤 &amp;#92;(A P&amp;#92;) の長さは 角 &amp;#92;(A O P&amp;#92;) そのもの, すなわち &amp;#92;(\theta&amp;#92;) である. このとき &amp;#92;(x=\cos\theta,y=\sin\theta&amp;#92;) である.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;よくよく考えてみれば, &lt;a href="#hs_trignometric"&gt;この定義&lt;/a&gt;では,
孤 \(A P\) の長さおよび実数 \(0\lt\theta\leq\frac{\pi}{2}\) に対し孤 \(A P\) の長さが \(\theta\) となる \(C_{+}\) 上の点 
\(P\) が存在することについて, 特に説明しておらず, 定義としては不十分な点があることが考えられる.
&lt;a href="#ref1"&gt;参考文献 1&lt;/a&gt; にはこの問題に対する考察が綴られており, 読みやすい文体で書かれているので興味があれば読んでみることを勧める.
本エントリはそのような意味で, 特に面白みもなくただ単に高校数学 Ⅲ までの三角関数の内容を復習しているだけのものとなっているので,&amp;nbsp;その点は悪しからず.&lt;/p&gt;
&lt;h3&gt;加法定理&lt;/h3&gt;
&lt;p&gt;この間で余弦定理を暗に認めたものとして利用する.&lt;/p&gt;
&lt;div style="text-align:center;"&gt;
&lt;a title="三村周平 [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:%E5%8A%A0%E6%B3%95%E5%AE%9A%E7%90%86.png"&gt;&lt;img width="330" alt="加法定理" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/%E5%8A%A0%E6%B3%95%E5%AE%9A%E7%90%86.png/512px-%E5%8A%A0%E6%B3%95%E5%AE%9A%E7%90%86.png"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;単位円上の二点 \(P\left(\cos p,\sin p\right),Q\left(\cos q,\sin q\right)\) がある.
上図のように, 原点 \(O\) に対し, \(O P\) と \(x\) 軸の成す角を \(p\), 
\(O Q\) と \(x\) 軸の成す角を \(q\) とする. 線分 \(P Q\)&amp;nbsp;の長さを座標成分で表すと, 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
P Q^2&amp;amp;=&amp;amp;\left(\cos q-\cos p\right)^2+\left(\sin q-\sin p\right)^2\\\
&amp;amp;=&amp;amp;\cos^2 q-2\cos q\cos p+\cos^2 p+\sin^2 q-2\sin q\sin p+\sin^2 p\\\
&amp;amp;=&amp;amp;\left(\sin^2 p+\cos^2 p\right)+\left(\sin^2 q+\cos^2 q\right)-2\cos q\cos p-2\sin q\sin p\\\
&amp;amp;=&amp;amp;2-2\left(\sin p\sin q+\cos p\cos q\right)\label{eq:first}\tag{1}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
また,&amp;nbsp;余弦定理より
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
P Q^2&amp;amp;=&amp;amp;O P^2+O Q^2-2 O P\cdot O Q\cos\left(p-q\right)\\
&amp;amp;=&amp;amp;1^2+1^2-2\cdot 1\cdot 1\cdot \cos\left(p-q\right)\\
&amp;amp;=&amp;amp;2-2\cos\left(p-q\right)\label{eq:second}\tag{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\eqref{eq:first},\eqref{eq:second}\) より
\[2-2\cos\left(p-q\right)=2-2\left(\cos p\cos q+\sin p\sin q\right)\leftrightarrow \cos\left(p-q\right)=\cos p\cos q+\sin p\sin q\label{eq:third}\tag{3}\]
ここで, \(\eqref{eq:third}\) の \(q\) を \(q+\frac{\pi}{2}\) とすると, 三角関数の定義より
\[
\cos\left\{p-\left(q+\frac{\pi}{2}\right)\right\}=\cos p\cos\left(q+\frac{\pi}{2}\right)+\sin p\sin\left(q+\frac{\pi}{2}\right)\leftrightarrow\sin\left(p-q\right)=\sin p\cos q-\cos p\sin q
\]
\(q=-q\) とおくと \[\sin\left(p+q\right)=\sin p\cos q+\cos p\sin q\label{eq:fourth}\tag{4}\]&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;h3&gt;三角関数の導関数&lt;/h3&gt;
&lt;p&gt;まず \(f(x)=\sin x\) の導関数 \(f&amp;#8217;(x)\) について,&amp;nbsp;導関数の定義より
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\sin(x+h)-\sin x}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\sin x\cos h+\cos x\sin h-\sin x}{h}\ \because{\rm 加法定理}\ \eqref{eq:fourth}\ {\rm より}\label{eq:sixth}\tag{5}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\sin x\left(\cos h-1\right)+\cos x\sin h}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\left\{\frac{\sin x\left(\cos h-1\right)}{h}+\frac{\cos x\sin h}{h}\right\}\\ 
&amp;amp;=&amp;amp;\lim_{h\to 0}\left(\sin x\underbrace{\frac{\cos h - 1}{h}}_{A}+\cos x\frac{\sin h}{h}\right)\label{eq:fifth}\tag{6}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;項 \(A\)&amp;nbsp;について&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\frac{\cos h-1}{h}\cdot\frac{\cos h+1}{\cos h+1}&amp;amp;=&amp;amp;\frac{\cos^2h-1}{h\left(\cos h+1\right)}\\
&amp;amp;=&amp;amp;\frac{-\sin^2 h}{h\left(\cos h+1\right)}\ \because\sin^2+\cos^2=1\\
&amp;amp;=&amp;amp;\frac{-\sin h\cdot\sin h}{h\left(\cos h+1\right)}\cdot\frac{h}{h}\\
&amp;amp;=&amp;amp;-\frac{\sin h}{h}\cdot\frac{\sin h}{h}\cdot\frac{h}{\cos h+1}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;ここで, \(\displaystyle\lim_{h\to 0}-\frac{\sin h}{h}\cdot\frac{\sin h}{h}\cdot\frac{h}{\cos h+1}=0\) だから,
\(\eqref{eq:fifth}\) より \[f&amp;#8217;(x)=\sin x\cdot 0+\cos x\cdot 1=\cos x\label{eq:tenth}\tag{7}\]
次に \(f(x)=\cos x\) の導関数 \(f&amp;#8217;(x)\) について,&amp;nbsp;導関数の定義より&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\cos(x+h)-\cos x}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\cos x\cos h-\sin x\sin h-\cos x}{h}\ \because{\rm 加法定理}\ \eqref{eq:third}\ {\rm より}\label{eq:ninth}\tag{8}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\cos x\left(\cos h-1\right)-\sin x\sin h}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\left\{\frac{\cos x\left(\cos h-1\right)}{h}-\frac{\sin x\sin h}{h}\right\}\\ 
&amp;amp;=&amp;amp;\lim_{h\to 0}\left(\cos x\frac{\cos h - 1}{h}-\sin x\frac{\sin h}{h}\right)\\
&amp;amp;=&amp;amp;\cos x\cdot 0-\sin x\cdot 1\\
&amp;amp;=&amp;amp;-\sin x\label{eq:eleventh}\tag{9}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;次に \(f(x)=\tan x\) の導関数 \(f&amp;#8217;(x)\) について,
これは \(f&amp;#8217;(x)=\left(\tan x\right)&amp;#8217;=\left(\frac{\sin x}{\cos x}\right)&amp;#8217;\)&amp;nbsp;だから
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\left(\frac{\sin x}{\cos x}\right)'\\
&amp;amp;=&amp;amp;\frac{\left(\sin x\right)'\cos x-\sin x\left(\cos x\right)'}{\cos^2 x}\\
&amp;amp;=&amp;amp;\frac{\cos x\cos x-\sin x\left(-\sin x\right)}{\cos^2 x}\ \because\eqref{eq:tenth},\eqref{eq:eleventh}\ {\rm より}\\
&amp;amp;=&amp;amp;\frac{\cos^2 x+\sin^2 x}{\cos^2 x}\\
&amp;amp;=&amp;amp;\frac{1}{\cos^2 x}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;最後に \(f(x)=\frac{1}{\tan x}\) の導関数 \(f&amp;#8217;(x)\) について,
これは \(f&amp;#8217;(x)=\frac{1}{\tan x}=\left(\frac{\cos x}{\sin x}\right)&amp;#8217;\)&amp;nbsp;だから
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\left(\frac{\cos x}{\sin x}\right)'\\
&amp;amp;=&amp;amp;\frac{\left(\cos x\right)'\sin x-\cos x\left(\sin x\right)'}{\sin^2 x}\\
&amp;amp;=&amp;amp;\frac{-\sin x\sin x-\cos x\cos x}{\sin^2 x}\ \because\eqref{eq:tenth},\eqref{eq:eleventh}\ {\rm より}\\
&amp;amp;=&amp;amp;-\frac{\sin^2x+\cos^2x}{\sin^2x}\\
&amp;amp;=&amp;amp;-\frac{1}{\sin^2x}
\end{eqnarray}&lt;/div&gt;
&lt;h3&gt;和積の公式を用いた方法&lt;/h3&gt;
&lt;p&gt;\(\eqref{eq:sixth},\eqref{eq:ninth}\) の部分では加法定理を用いたが, 加法定理より導出できる和積の公式を用いても同様にして導出できる.
\(\eqref{eq:fourth}\)&amp;nbsp;より
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\sin\left(p+q\right)&amp;amp;=&amp;amp;\sin p\sin q+\cos p\sin q\label{eq:seventh}\tag{10}\\
\sin\left(p-q\right)&amp;amp;=&amp;amp;\sin p\sin q-\cos p\sin q\label{eq:eightth}\tag{11}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\eqref{eq:seventh}+\eqref{eq:eightth}\) より \[\sin\left(p+q\right)+\sin\left(p-q\right)=2\sin p\cos q\leftrightarrow \sin p\cos q=\frac{\sin\left(p+q\right)+\sin\left(p-q\right)}{2}\label{eq:thirteenth}\tag{12}\]
また, \(\eqref{eq:third}\)&amp;nbsp;より
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\cos\left(p+q\right)&amp;amp;=&amp;amp;\cos p\cos q-\sin p\sin q\label{eq:fifteenth}\tag{13}\\
\cos\left(p-q\right)&amp;amp;=&amp;amp;\cos p\cos q+\sin p\sin q\label{eq:sixteenth}\tag{14}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
\(\eqref{eq:fifteenth}-\eqref{eq:sixteenth}\) より 
\[\cos\left(p+q\right)-\cos\left(p-q\right)=-2\sin p\sin q\leftrightarrow \sin p\sin&amp;nbsp;q=-\frac{\cos\left(p+q\right)-\cos\left(p-q\right)}{2}\label{eq:seventeenth}\tag{15}\]&lt;/p&gt;
&lt;p&gt;\(\eqref{eq:thirteenth},\eqref{eq:seventeenth}\) は積和の公式といわれる (あともう 1 つ積和の公式と言われるものがあるが, 今回は利用しないので省略). 
ここで, \(\eqref{eq:thirteenth}\) に対し \(p=\frac{x-y}{2},q=\frac{x+y}{2}\)&amp;nbsp;とすると,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\sin\frac{x-y}{2}\cos\frac{x+y}{2}&amp;amp;=&amp;amp;\frac{\sin\left(\frac{x-y}{2}+\frac{x+y}{2}\right)+\sin\left(\frac{x-y}{2}-\frac{x+y}{2}\right)}{2}\\
&amp;amp;=&amp;amp;\frac{\sin x-\sin y}{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
ゆえに
\[\sin x-\sin y=2\cos\frac{x+y}{2}\sin\frac{x-y}{2}\label{eq:twelvth}\tag{16}\]
また \(\eqref{eq:seventeenth}\) に対し \(p=\frac{x+y}{2},q=\frac{x-y}{2}\)&amp;nbsp;とすると,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
\sin\frac{x+y}{2}\sin\frac{x-y}{2}&amp;amp;=&amp;amp;-\frac{\cos\left(\frac{x+y}{2}+\frac{x-y}{2}\right)-\cos\left(\frac{x+y}{2}-\frac{x-y}{2}\right)}{2}\\
&amp;amp;=&amp;amp;-\frac{\cos x-\cos y}{2}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
ゆえに
\[\cos x-\cos y=-2\sin\frac{x+y}{2}\sin\frac{x-y}{2}\label{eq:fourteenth}\tag{17}\]
\(\eqref{eq:twelvth},\eqref{eq:fourteenth}\) が和積の公式である (あともう 2 つ和積の公式と言われるものがあるが, 今回は利用しないので省略).
\(\eqref{eq:twelvth}\) をつかって \(\displaystyle f&amp;#8217;(x)=\lim_{h\to 0}\frac{\sin\left(x+h\right)-\sin x}{h}\)&amp;nbsp;を変形すると,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\sin\left(x+h\right)-\sin x}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{2\cos\left(\frac{2x+h}{2}\right)\sin\frac{h}{2}}{h}\ \because\eqref{eq:twelvth}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\cos\left(\frac{2x+h}{2}\right)\sin\frac{h}{2}}{\frac{h}{2}}\\
&amp;amp;=&amp;amp;\cos\left(\frac{2x}{2}\right)\\
&amp;amp;=&amp;amp;\cos x
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
と \(\eqref{eq:tenth}\) と同様の結果が得られる. 
また, \(\eqref{eq:fourteenth}\) をつかって \(\displaystyle f&amp;#8217;(x)=\lim_{h\to 0}\frac{\cos\left(x+h\right)-\cos x}{h}\)&amp;nbsp;を変形すると,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
f'(x)&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{\cos\left(x+h\right)-\cos x}{h}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}\frac{-2\sin\left(\frac{2x+h}{2}\right)\sin\frac{h}{2}}{h}\ \because\eqref{eq:fourteenth}\\
&amp;amp;=&amp;amp;\lim_{h\to 0}-\frac{\sin\left(\frac{2x+h}{2}\right)\sin\frac{h}{2}}{\frac{h}{2}}\\
&amp;amp;=&amp;amp;-\sin\left(\frac{2x}{2}\right)\\
&amp;amp;=&amp;amp;-\sin x
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
と \(\eqref{eq:eleventh}\)&amp;nbsp;と同様の結果が得られる.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;『&lt;a name="ref1" href="http://www.ms.u-tokyo.ac.jp/~t-saito/jd/%E4%B8%89%E8%A7%92%E9%96%A2%E6%95%B0.pdf"&gt;三角関数とは何か&lt;/a&gt;』2018 年 9 月 6&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;a name="ref2" class="disabled"&gt;高木貞治 (1983)&amp;nbsp;『解析概論』岩波書店&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category></entry><entry><title>ベイズの定理</title><link href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/26/bayestheorem/" rel="alternate"></link><published>2018-07-26T00:32:00+09:00</published><updated>2018-07-26T00:32:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-07-26:/roki.log/posts/2018/ 7月/26/bayestheorem/</id><summary type="html">&lt;p&gt;ベイズの定理の学習メモ&lt;/p&gt;</summary><content type="html">&lt;p&gt;ベイズの定理の導出から,&amp;nbsp;モンティ・ホール問題への応用まで.&lt;/p&gt;
&lt;h3&gt;ベイズの定理の導出&lt;/h3&gt;
&lt;p&gt;事象 &lt;span class="math"&gt;\(A\)&lt;/span&gt;
が発生する確率を「\(P(A) = A\) が発生する確率 \(\div\) すべての事象の数」と書くとき,&amp;nbsp;ベイズの定理は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="baysestheorem" class="disabled"&gt;ベイズの定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  事象 &amp;#92;(B&amp;#92;) のもとで事象 &amp;#92;(A&amp;#92;) が発生する確率
&amp;#92;[P(A\mid B)=\dfrac{P(B\mid A)P(A)}{P(B)}\ \left(P(B)\gt 0\right)&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;と定義される. 以下ベイズの定理を導出する. 
例として, 起こり得る全ての事象の数を &lt;span class="math"&gt;\(200\)&lt;/span&gt;, 
事象 &lt;span class="math"&gt;\(A\)&lt;/span&gt;, 事象 &lt;span class="math"&gt;\(B\)&lt;/span&gt;(以下単に &lt;span class="math"&gt;\(A\)&lt;/span&gt;, &lt;span class="math"&gt;\(B\)&lt;/span&gt; と書く)が発生した回数をそれぞれ &lt;span class="math"&gt;\(60,\ 40\)&lt;/span&gt; とし,
&lt;span class="math"&gt;\(A\)&lt;/span&gt; および &lt;span class="math"&gt;\(B\)&lt;/span&gt; が発生した確率を &lt;span class="math"&gt;\(10\)&lt;/span&gt; とする.
簡単のために, この事象関係を表すベン図を次に示す&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;img alt="ある事象を表したベン図" src="../../../../../images/2018/July/bayes_venn.png"/&gt;
&lt;/div&gt;

&lt;p&gt;まず, &lt;span class="math"&gt;\(A\)&lt;/span&gt; および &lt;span class="math"&gt;\(B\)&lt;/span&gt; が発生する確率 &lt;span class="math"&gt;\(P(A\cap B) = P(B\cap A)\)&lt;/span&gt; を求める.
&lt;span class="math"&gt;\(A,\ B\)&lt;/span&gt;&amp;nbsp;がそれぞれ発生する確率は,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lcl}
P(A)&amp;amp;=&amp;amp;\dfrac{60}{200}=\dfrac{3}{10}\\\ P(B)&amp;amp;=&amp;amp;\dfrac{40}{200}=\dfrac{1}{5}
\end{array}&lt;/div&gt;
&lt;p&gt;
である&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. 
&lt;span class="math"&gt;\(B\)&lt;/span&gt; の下で &lt;span class="math"&gt;\(A\)&lt;/span&gt; が発生する確率と, &lt;span class="math"&gt;\(A\)&lt;/span&gt; の下で &lt;span class="math"&gt;\(B\)&lt;/span&gt;&amp;nbsp;が発生する確率は,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lclcl}
P(A\mid B)&amp;amp;=&amp;amp;\dfrac{10}{40}&amp;amp;=&amp;amp;\dfrac{1}{4}\\\
P(B\mid A)&amp;amp;=&amp;amp;\dfrac{10}{60}&amp;amp;=&amp;amp;\dfrac{1}{6}
\end{array}&lt;/div&gt;
&lt;p&gt;
である. そもそも, &lt;span class="math"&gt;\(B\)&lt;/span&gt; が発生しなければ, &lt;span class="math"&gt;\(A\)&lt;/span&gt; および &lt;span class="math"&gt;\(B\)&lt;/span&gt; が発生するということはないし,
&lt;span class="math"&gt;\(A\)&lt;/span&gt; が発生しなければ, &lt;span class="math"&gt;\(B\)&lt;/span&gt; および &lt;span class="math"&gt;\(A\)&lt;/span&gt;&amp;nbsp;が発生するということはないので,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lclclcl}
P(A\cap B)&amp;amp;=&amp;amp;P(A\mid B)P(B)&amp;amp;=&amp;amp;\dfrac{1}{4}\cdot\dfrac{1}{5}&amp;amp;=&amp;amp;\dfrac{1}{20}\\\
P(B\cap A)&amp;amp;=&amp;amp;P(B\mid A)P(A)&amp;amp;=&amp;amp;\dfrac{1}{6}\cdot\dfrac{3}{10}&amp;amp;=&amp;amp;\dfrac{1}{20}
\end{array}&lt;/div&gt;
&lt;p&gt;
である.&amp;nbsp;あとは変形すれば良いだけで,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lcl}
P(A\mid B)P(B)&amp;amp;=&amp;amp;P(A\cap B)\\\
P(A\mid B)&amp;amp;=&amp;amp;\dfrac{P(A\cap B)}{P(B)}\\\
P(A\mid B)&amp;amp;=&amp;amp;\dfrac{P(B\mid A)P(A)}{P(B)}
\end{array}&lt;/div&gt;
&lt;h3&gt;モンティ・ホール問題&lt;/h3&gt;
&lt;p&gt;確率論的な話となるとよく挙げられる有名な問題, モンティ・ホール問題をベイズの定理で解く.&amp;nbsp;モンティ・ホール問題は, &lt;/p&gt;
&lt;blockquote&gt;
(snip)プレーヤーの前に閉まった3つのドアがあって、1つのドアの後ろには景品の新車が、2つのドアの後ろには、はずれを意味するヤギがいる。プレーヤーは新車のドアを当てると新車がもらえる。プレーヤーが1つのドアを選択した後、司会のモンティが残りのドアのうちヤギがいるドアを開けてヤギを見せる。

ここでプレーヤーは、最初に選んだドアを、残っている開けられていないドアに変更してもよいと言われる。プレーヤーはドアを変更すべきだろうか？(snip)&lt;br&gt;
&lt;strong&gt;ゲームのルール:&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;3つのドア (A, B, C)&amp;nbsp;に（景品、ヤギ、ヤギ）がランダムに入っている。&lt;/li&gt;
&lt;li&gt;プレーヤーはドアを1つ選ぶ。&lt;/li&gt;
&lt;li&gt;モンティは残りのドアのうち1つを必ず開ける。&lt;/li&gt;
&lt;li&gt;モンティの開けるドアは、必ずヤギの入っているドアである。&lt;/li&gt;
&lt;li&gt;モンティはプレーヤーにドアを選びなおしてよいと必ず言う。&lt;/li&gt;
&lt;/ol&gt;
&amp;#8212; &lt;a href="https://ja.wikipedia.org/w/index.php?title=%E3%83%A2%E3%83%B3%E3%83%86%E3%82%A3%E3%83%BB%E3%83%9B%E3%83%BC%E3%83%AB%E5%95%8F%E9%A1%8C&amp;oldid=69027845"&gt;&lt;i&gt;モンティ・ホール問題 - wikipedia&lt;/i&gt;&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;いま, この問題をモンティがヤギのドアを開けた後に, 
プレーヤーが景品のドアを開ける条件付き確率問題とし,
プレーヤーが初手で &lt;span class="math"&gt;\(A\)&lt;/span&gt; を選択, それに対しモンティが &lt;span class="math"&gt;\(B\)&lt;/span&gt; を選択したとする&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;. 
モンティが &lt;span class="math"&gt;\(B\)&lt;/span&gt; を選択したということは, 景品のドアは &lt;span class="math"&gt;\(A\)&lt;/span&gt; または &lt;span class="math"&gt;\(C\)&lt;/span&gt; である.
すなわち, プレーヤーが &lt;span class="math"&gt;\(A\)&lt;/span&gt; を選択し, この選択を変えずに &lt;span class="math"&gt;\(A\)&lt;/span&gt; が景品のドアである確率は 
\(P(A\mid B)\),
選択を変え &lt;span class="math"&gt;\(C\)&lt;/span&gt; が景品のドアである確率は
\(P(C\mid B)\) と書ける.
このそれぞれの条件付き確率を, 上で導出したベイズの定理の式に当てはめて求めればよい&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モンティは, プレーヤーが選択した &lt;span class="math"&gt;\(2\)&lt;/span&gt; つのドア以外のどちらかを選択するから, \(P(B)=\dfrac{1}{2}\)&amp;nbsp;である.&lt;/li&gt;
&lt;li&gt;プレーヤーが初手で選ぶ段階では, 景品のドアを選ぶ確率は均等であるから, \(P(A)=P(C)=\dfrac{1}{3}\)&amp;nbsp;である. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらを基に, まず \(P(A\mid B)\)&amp;nbsp;について式にすると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lclclcl}
P(A\mid B) &amp;amp;=&amp;amp; \dfrac{P(B\mid A)P(A)}{P(B)} &amp;amp;=&amp;amp; \dfrac{\dfrac{1}{2}\cdot\dfrac{1}{3}}{\dfrac{1}{2}}&amp;amp;=&amp;amp;\dfrac{1}{3}
\end{array}&lt;/div&gt;
&lt;p&gt;\(P(A\mid B)\) とは先も述べたように, \(A\) 
が景品のドアであると踏んだときに, それが景品のドアである確率である.&amp;nbsp;よって,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(A\)&lt;/span&gt; が景品のドアであれば, モンティは \(B\) と \(C\) どちらを選択しても良いことになるので,  \(P(B\mid A)=\dfrac{1}{2}\)&amp;nbsp;である.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;から上式のようになる. 
次に, \(P(C\mid B)\)&amp;nbsp;について式にすると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lclclcl}
P(C\mid B) &amp;amp;=&amp;amp; \dfrac{P(B\mid C)P(C)}{P(B)}&amp;amp;=&amp;amp;\dfrac{1\cdot \dfrac{1}{3}}{\dfrac{1}{2}}&amp;amp;=&amp;amp;\dfrac{2}{3}
\end{array}&lt;/div&gt;
&lt;p&gt;\(P(C\mid B)\) とは先も述べたように, \(C\) 
が景品のドアであると踏んだときに, それが景品のドアである確率である.&amp;nbsp;よって,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(C\)&lt;/span&gt; が景品のドアであれば, モンティは \(B\) しか選ぶことができないから, \(P(B\mid C)=1\)&amp;nbsp;である.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;から上式のようになる.
よって, ドアの選択を変えるべきであるという解が導かれる. 
Wikipedia にも似たような図があるが, 
折角なので, &lt;span class="math"&gt;\(1000\)&lt;/span&gt; 回モンティ・ホール問題を試行した場合において, 
選択を変えて景品のドアを当てた回数と,
選択を変えずに景品のドアを当てた回数をプロットしてみた&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;img alt="モンティ・ホール問題の視覚化図" src="../../../../../images/2018/July/montyhalll.png" /&gt;
&lt;/div&gt;

&lt;p&gt;当たり前ではあるのだが, この図からも, 
&lt;span class="math"&gt;\(C\)&lt;/span&gt;&amp;nbsp;に変えた方が当たる回数が多くなっていることを確認できる.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;図は matplotlib_venn 他で&lt;a href="https://gist.github.com/falgon/d88e3c0d7d691ab9d97b453e2cec918b"&gt;生成&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;自明であるが, これを &lt;span class="math"&gt;\(P(A)=P(A\mid\Omega), P(B)=P(B\mid\Omega)\)&lt;/span&gt; と書くこともできる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;他のどのようなドアの組み合わせをとっても, プレーヤーが &lt;span class="math"&gt;\(1\)&lt;/span&gt; つドアを選択し, モンティが &lt;span class="math"&gt;\(1\)&lt;/span&gt; つヤギのドアを選択するという規則には影響しないから, この前提による一般性の欠如を懸念する必要はない.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;注: 一応述べておくと, ベイズの定理で使われている変数 \(A, B, C\) は, このドア \(A, B, C\) とは無関係である.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;図は matplotlib で&lt;a href="https://gist.github.com/falgon/5deb211abce5ac715257f55402a22307"&gt;生成&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Probability theory"></category><category term="math"></category><category term="Python"></category></entry><entry><title>オイラーの定理とカーマイケルの定理</title><link href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/25/EulersAndCarmichelsTheorem/" rel="alternate"></link><published>2018-07-25T00:32:00+09:00</published><updated>2018-07-25T00:32:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-07-25:/roki.log/posts/2018/ 7月/25/EulersAndCarmichelsTheorem/</id><summary type="html">&lt;p&gt;群論的観点をふまえたオイラーの定理,&amp;nbsp;およびカーマイケルの定理について.&lt;/p&gt;</summary><content type="html">&lt;p&gt;以前の記事, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/"&gt;エルガマル暗号&lt;/a&gt;では,
エルガマル暗号に関する諸々の前提の説明と, その実装について示した. 
同エントリ内で, フェルマーの小定理&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;については取り扱ったものの, 
その一般形であるオイラーの定理およびカーマイケルの定理について&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#fn-5"&gt;特に触れなかった&lt;/a&gt;ため,
本エントリでそれらに関してまとめる. しばしば値の確認には, 簡単のため Haskell&amp;nbsp;を使う.&lt;/p&gt;
&lt;h3&gt;オイラーの定理&lt;/h3&gt;
&lt;p&gt;いま, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#fermattest"&gt;フェルマーテスト&lt;/a&gt;を定義したとき, \(FT_n(a)\) をパスするには(すなわち, フェルマーの小定理が示す合同式が成り立つには), 要件として,
既約剰余類郡 \(\mathbb{Z}^{\ast}_n\) の各要素と
\(^\exists a\ \in\mathbb{Z}\) の積が全て異なり, 
&lt;span class="math"&gt;\(\bmod n\)&lt;/span&gt; の既約代表系のすべての積と合同でなければならない.
たとえば, 法 &lt;span class="math"&gt;\(n=8\)&lt;/span&gt; による合同関係で構成する剰余類の完全代表系&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;は
\(0,1,2,3,4,5,6,7\) であるが,
\(a=2\) としてしまうと, 既約剰余類郡が構成できていないので, 次のようにしても完全代表系が得られない(積をわざわざ示していないが, 非合同でないことは,&amp;nbsp;各要素の積が全て異なっていない時点で明白である).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そこで, 先に述べた剰余類の既約代表系を考える. これは &lt;span class="math"&gt;\(\phi(8)=4\)&lt;/span&gt; 個&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;で, &lt;span class="math"&gt;\(1,3,5,7\)&lt;/span&gt; である.
これを同じように, \(\left\{1\cdot a,\ 3\cdot a,\ 5\cdot a,\ 7\cdot a\right\}\) とし, 
先の要件を確認すると, 
&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#lem2"&gt;この補題2&lt;/a&gt;より, 
&lt;span class="math"&gt;\(\bmod 8\)&lt;/span&gt; で全体として \(\left\{1,3,5,7\right\}\) と一致していて,
\[1\cdot 3\cdot 5\cdot 7\equiv 1\cdot 3\cdot 5\cdot 7\cdot a^4\pmod{8}\label{eq:first}\tag{1}\]
&lt;span class="math"&gt;\(\gcd(1\cdot 3\cdot 5\cdot 7,8)=1\)&lt;/span&gt; だから, &lt;span class="math"&gt;\(1\cdot 3\cdot 5\cdot 7\)&lt;/span&gt; を約して,
\[a^4\equiv 1\pmod{8}\label{eq:second}\tag{2}\] 
これは, &lt;span class="math"&gt;\(\gcd(a,n)=1\)&lt;/span&gt; ということの他に, &lt;span class="math"&gt;\(a\)&lt;/span&gt; および &lt;span class="math"&gt;\(n\)&lt;/span&gt; の値に依存した論ではない.&amp;nbsp;すなわち,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="eulerstheorem" class="disabled"&gt;オイラーの定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;[a^{\phi(n)}\equiv 1\pmod{n}\ \left(2\leq n\in\mathbb{Z}^{+},\ \gcd(a,n)=1\right)&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;がいえる&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;euler&amp;#39;sTheorem&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totient&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;euler&amp;#39;sTheorem&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; であるとき, &lt;span class="math"&gt;\(\phi(p)=p-1\)&lt;/span&gt; で, フェルマーの小定理&lt;sup id="fnref2-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;となる&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;ラグランジュの定理&lt;/h3&gt;
&lt;p&gt;いま述べた&lt;a href="#eulerstheorem"&gt;オイラーの定理&lt;/a&gt;は, 
ラグランジュの定理を使っても証明できる.&amp;nbsp;ラグランジュの定理は,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="lagrangestheorem" class="disabled"&gt;ラグランジュの定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  有限郡 &amp;#92;(G&amp;#92;) の部分郡 &amp;#92;(H&amp;#92;) の位数 &amp;#92;(\mid H\mid&amp;#92;) は, &amp;#92;(G&amp;#92;) の位数 &amp;#92;(\mid G\mid&amp;#92;) 
  の約数となる.
  &amp;#92;[\mid G\mid\ =\ \mid G:H\mid \mid H\mid&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;である. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: 有限郡 \(G\) の部分郡 \(H\) による類別が \(\displaystyle G=\bigcup_i^r a_iH\) であるとき, \(\mid G\mid=r\mid H\mid\) といえる. この \(r\) は \(r=\mid G:H\mid\) 
そのものなので, \(\mid G\mid\ =\ \mid G:H\mid\mid H\mid\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;ごく直感的な定理である. これを使えば, &lt;a href="#eulerstheorem"&gt;オイラーの定理&lt;/a&gt;は次のように証明できる.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;補題1&lt;/strong&gt;: 有限郡 &lt;span class="math"&gt;\(G\)&lt;/span&gt; とその元 &lt;span class="math"&gt;\(^\forall g\in G\)&lt;/span&gt; に対し, &lt;span class="math"&gt;\(g^{\mid G\mid}=e\)&lt;/span&gt;. &lt;span class="math"&gt;\(e\in G\)&lt;/span&gt;&amp;nbsp;は単位元. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;:
巡回部分郡 &lt;span class="math"&gt;\(H=\lt g\gt\)&lt;/span&gt; の元 &lt;span class="math"&gt;\(g\)&lt;/span&gt; の位数 &lt;span class="math"&gt;\(\mid H\mid\)&lt;/span&gt; は,
巡回して &lt;span class="math"&gt;\(g^i=e\)&lt;/span&gt; となる最小の &lt;span class="math"&gt;\(i\in\mathbb{N}\)&lt;/span&gt; であるといえる. すなわち
\[g^{\mid H\mid}=e\]
ここで, 商集合の位数を両辺に次のように与える.
\[\left(g^{\mid H\mid}\right)^{\mid G:H\mid}=(e)^{\mid G:H\mid}\]
左辺は指数法則により, また右辺は単位元の繰り返しだから, これを次のようにかける.
\[g^{\mid H\mid\mid G:H\mid}=e\]
ラグランジュの定理より
\[g^{\mid G\mid}=e\]&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;オイラーの定理の証明&lt;/strong&gt;:
&lt;a href="#eulerstheorem"&gt;オイラーの定理&lt;/a&gt;を仮定したとき, 脚注&lt;sup id="fnref2-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;より剰余類 \(\overline{a}\) は法 \(n\) に関する既約剰余類郡 \(\mathbb{Z}^{\ast}_{n}\) に含まれる.  \(\mid\mathbb{Z}^{\ast}_{n}\mid=\phi(n)\) だから補題 1 より 
\(\overline{a}^{\phi(n)}=\overline{a^{\phi(n)}}=\overline{1}\).&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;h3&gt;カーマイケルの定理&lt;/h3&gt;
&lt;p&gt;&lt;a href="#eulerstheorem"&gt;オイラーの定理&lt;/a&gt;で用いる &lt;span class="math"&gt;\(\phi\)&lt;/span&gt; 関数は, 
&lt;span class="math"&gt;\(a^{m}\equiv 1\pmod{n}\ (m\in{N}, \gcd(a,n)=1\)&lt;/span&gt; を成立させる最小の整数 &lt;span class="math"&gt;\(m\)&lt;/span&gt; を持ち得ない.
たとえば, &lt;span class="math"&gt;\(n=8\)&lt;/span&gt; では, 先の通り確かに &lt;span class="math"&gt;\(m=\phi(8)=4\)&lt;/span&gt; で合同式が満足できたが, 
&lt;span class="math"&gt;\(m=2\)&lt;/span&gt; としても,&amp;nbsp;これを満足できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;カーマイケルの \(\lambda\) 関数は, 与えられた整数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; に対して同合同式を満足する最小の
&lt;span class="math"&gt;\(m\)&lt;/span&gt;&amp;nbsp;を定義より自明に与える.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="lagrangestheorem" class="disabled"&gt;カーマイケルの &amp;#92;(\lambda&amp;#92;) 関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  扱う文字を全て整数とし, &amp;#92;(\lambda(n)&amp;#92;) は
  \begin{array}{lcl}
  \DeclareMathOperator{\lcm}{lcm}
  \lambda(1)&amp;:=&amp;1&amp;#92;\
  \lambda(2)&amp;:=&amp;1&amp;#92;\
  \lambda(4)&amp;:=&amp;4&amp;#92;\
  \lambda(2^k)&amp;:=&amp;\phi(2^k)\ \left(0\leq k\leq 2\right)&amp;#92;\
  \lambda(2^k)&amp;:=&amp;2^{k-2}=\dfrac{\phi(2^k)}{2}\ \left(e\geq 3\right)&amp;#92;\
  \lambda(p^h)&amp;:=&amp;\phi(p^h)=(p-1)\cdot p^{h-1}\ \left(p\ is\ an\ odd\ prime, h\geq 1\right)&amp;#92;\
  \lambda\left(2^kp_1^{h_1}p_2^{h_2}p_3^{h_3}\cdots p_t^{h_t}\right)&amp;:=&amp;\lcm\left(\lambda(2^k),\lambda(p_1^{h_1}),\lambda(p_2^{h_2}),\lambda(p_3^{h_3}),\cdots,\lambda(p_t^{h_t})\right)\ \left(p_n\ is\ an\ odd\ prime, k\geq 0, h_n\geq 1\right)
  \end{array}
  と定義する.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="carmichelstheorem" class="disabled"&gt;カーマイケルの定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;[a^{\lambda(n)}\equiv 1\pmod{n}\ (2\leq n\in\mathbb{Z}^{+},\ \gcd(a,n)=1)&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;実装して確かめよう.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;carmichael&amp;#39;sLambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;carmichael&amp;#39;sTheorem&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carmichael&amp;#39;sLambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;carmichael&amp;#39;sTheorem&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;証明: &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#fermatstheorem"&gt;フェルマーの小定理&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;補足. 郡 &lt;span class="math"&gt;\(G\)&lt;/span&gt; とその部分郡 &lt;span class="math"&gt;\(H\)&lt;/span&gt; があるとき, &lt;span class="math"&gt;\(H\)&lt;/span&gt; は郡であるから単位元 &lt;span class="math"&gt;\(e\in H\)&lt;/span&gt; を含む. よって, &lt;span class="math"&gt;\(^\exists a\in G\)&lt;/span&gt; の剰余類を &lt;span class="math"&gt;\(aH=\left\{ah\mid h\in H\right\}\)&lt;/span&gt; としたとき(簡単のため, 左剰余類として式をおいたが, これに深い意味はない.), &lt;span class="math"&gt;\(a=ae\in aH\)&lt;/span&gt; より &lt;span class="math"&gt;\(a\in aH\)&lt;/span&gt; である. この &lt;span class="math"&gt;\(a\)&lt;/span&gt; を剰余類 &lt;span class="math"&gt;\(aH\)&lt;/span&gt; の代表という. また郡 &lt;span class="math"&gt;\(G\)&lt;/span&gt; は, 異なる \(a_i\) を代表とした剰余類 \(a_iH\) によって類別できる(\(\displaystyle G=\bigcup_i a_iH\)). この \(\mid G:H\mid\) 個の類別に対して, 各剰余類から代表の元を取り, 構成した集合を, &lt;span class="math"&gt;\(G\)&lt;/span&gt; の &lt;span class="math"&gt;\(H\)&lt;/span&gt; に対する代表系という.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;ここで, &lt;span class="math"&gt;\(\phi\)&lt;/span&gt; は, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#totientf"&gt;オイラーのトーシェント関数&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;コード内の&lt;code&gt;totient&lt;/code&gt;と&lt;code&gt;modExp&lt;/code&gt;は, それぞれ以前の投稿のうち, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#totientf"&gt;オイラーのトーシェント関数の実装部分&lt;/a&gt;と, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#modexpref"&gt;カーマイケル数を得るための実装&lt;/a&gt;を利用.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;この補足は冗長的かもしれないが, &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; である場合, \(\mathbb{Z}_p^{\ast}\) が構成されるから, これから取った代表は素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; と互いに素であることから, 既約代表である. この事実も, 一般に \(\eqref{eq:first}\) から \(\eqref{eq:second}\) へのような式変形が実行できることとの整合を示す.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Elementary number theory"></category><category term="Group theory"></category><category term="math"></category></entry><entry><title>エルガマル暗号</title><link href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/13/elgamalEncryption/" rel="alternate"></link><published>2018-07-13T22:50:00+09:00</published><updated>2018-07-13T22:50:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-07-13:/roki.log/posts/2018/ 7月/13/elgamalEncryption/</id><summary type="html">&lt;p&gt;エルガマル暗号についての学習メモと実装&lt;/p&gt;</summary><content type="html">&lt;p&gt;エルガマル暗号が離散対数問題の応用であることは認知していたものの, 
きっちりと自分でまとめたことが無かったと思うので, 
それに関連する諸々の前提についてもふまえて, 一度書くことにした. 
また, その処理系を&lt;a href="#impl"&gt;実装した&lt;/a&gt;.
本エントリでは, 同暗号プロトコルの話の前にまず前提を示し, 
その後,&amp;nbsp;実装するという観点から見た要点を示す.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;※ 内容にはできる限り注意を払っておりますが, 筆者は暗号プロトコル等に関する専門家ではないため, 注意してください. 間違った箇所, 不自然な箇所等があれば,&amp;nbsp;ご報告いただけると幸いです.&lt;/i&gt;&lt;/p&gt;
&lt;h3&gt;ユークリッドの互除法&lt;/h3&gt;
&lt;p&gt;これは, とても有名なアルゴリズムだと思われるので, 
わざわざ特別取り上げる必要はないようにも思ったのだが,
本エントリでは最大公約数を存分に利用するので, これを自明として取り上げないのも頂けない. 
したがって, 簡単に説明, 証明をして終わりとする.&amp;nbsp;ユークリッドの互除法は,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="euclidean" class="disabled"&gt;ユークリッドの互除法&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(2&amp;#92;) つの自然数 &amp;#92;(a, b\in\mathbb{N}&amp;#92;) の最大公約数を求めるアルゴリズム.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;である. 最大公約数を求める方法として, 素因数分解をひたすら行うのには, 計算量的に限界がある.
そこで, 古代ギリシャの数学者ユークリッドは, 
この問題を幾何学的に考察した(図示された例は調べるとたくさんある).
たとえば &lt;span class="math"&gt;\(a=12345678,\ b=87654321\)&lt;/span&gt;
の最大公約数を求めるとする(以下これを &lt;span class="math"&gt;\(\gcd(a,b)=c\)&lt;/span&gt; と書く).&amp;nbsp;これをユークリッドの互除法は,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{rr}
87654321&amp;amp;=&amp;amp;12345678\cdot 7&amp;amp;+&amp;amp;1234575\\\
12345678&amp;amp;=&amp;amp;1234575\cdot 9&amp;amp;+&amp;amp;1234503\\\
1234575&amp;amp;=&amp;amp;1234503&amp;amp;+&amp;amp;72\\\
1234503&amp;amp;=&amp;amp;72\cdot 17145&amp;amp;+&amp;amp;63\\\
72&amp;amp;=&amp;amp;63&amp;amp;+&amp;amp;9\\\
63&amp;amp;=&amp;amp;\underbrace{9}_{c}\cdot 7
\end{array}&lt;/div&gt;
&lt;p&gt;より \(\gcd(a,b)=9\) というように解く.&amp;nbsp;これで最大公約数を求まる根拠を以下証明する.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading lemma"&gt;&lt;a class="disabled" id="lemma1"&gt;補題 1&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(\gcd(a,b)=\gcd(a-b, b)=\gcd(a-2b,b)=\gcd(a-3b,b)=\cdots\ (a, b\in\mathbb{N})&amp;#92;) が成り立つ.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: &lt;span class="math"&gt;\(a,\ b\)&lt;/span&gt; の公約数を &lt;span class="math"&gt;\(d\)&lt;/span&gt; とすると, 
&lt;span class="math"&gt;\(d\mid a\land d\mid b \Rightarrow d\mid a-b\)&lt;/span&gt;.
また &lt;span class="math"&gt;\(a-b\)&lt;/span&gt; と &lt;span class="math"&gt;\(b\)&lt;/span&gt; の公約数を &lt;span class="math"&gt;\(e\)&lt;/span&gt; とすると, &lt;span class="math"&gt;\(e\mid a-b\land e\mid b\Rightarrow e\mid (a-b)+b=e\mid a\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;\(\therefore\) 公約数の全体が一致するから, 最大公約数も一致して, 
&lt;span class="math"&gt;\(\gcd(a,b)=\gcd(a-b,b)\)&lt;/span&gt;. これを繰り返すと \[
\gcd(a,b)=\gcd(a-b,b)=\gcd(a-2b,b)=\gcd(a-3b,b)=\cdots
\]&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading prop"&gt;&lt;a class="disabled" id="prop1"&gt;命題 1&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  ユークリッドの互除法により &amp;#92;(c&amp;#92;) が最大公約数となる.
  &lt;/div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: \(a, b\in\mathbb{Z}^{+}\) があるとき, 除算は
\(a=bq+r,\ 0\leq r\lt b\) と表せる.
&lt;a href="#lemma1"&gt;補題 1&lt;/a&gt; より, &lt;span class="math"&gt;\(\gcd(a,b)=\gcd(a-bq,b)=\gcd(b,r)\)&lt;/span&gt; がいえる.&amp;nbsp;ここで, 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{ll}
a&amp;amp;=&amp;amp;bq_1+r_1&amp;amp; (0\lt r_1\lt b),&amp;amp; \gcd(a,b)&amp;amp;=&amp;amp;\gcd(b,r_1)\\\
b&amp;amp;=&amp;amp;r_1q_2+r_2&amp;amp; (0\lt r_2\lt r_1),&amp;amp; \gcd(b,r_1)&amp;amp;=&amp;amp;\gcd(r_1,r_2)\\\
r_1&amp;amp;=&amp;amp;r_2q_3+r_3&amp;amp; (0\lt r_3\lt r_2),&amp;amp; \gcd(r_1,r_2)&amp;amp;=&amp;amp;\gcd(r_2,r_3)\\\
\cdots &amp;amp;&amp;amp;&amp;amp; \cdots &amp;amp;&amp;amp;&amp;amp; \cdots \\\
r_i&amp;amp;=&amp;amp;r_{i+1}q_{i+2}+r_{i+2}&amp;amp; (0\lt r_{i+2}\lt r_{i+1}),&amp;amp; \gcd(r_i,r_{i+1})&amp;amp;=&amp;amp;\gcd(r_{i+1},r_{i+2})\\\
\cdots &amp;amp;&amp;amp;&amp;amp; \cdots &amp;amp;&amp;amp;&amp;amp; \cdots \\\
r_{n-2}&amp;amp;=&amp;amp;r_{n-1}q_n+r_n&amp;amp;(0\lt r_n\lt r_{n-1}),&amp;amp;\gcd(r_{n-2},r_{n-1})&amp;amp;=&amp;amp;\gcd(r_{n-1},r_n)\\\
r_{n-1}&amp;amp;=&amp;amp;r_nq_{n+1}&amp;amp;&amp;amp; \gcd(r_{n-1},r_n)&amp;amp;=&amp;amp;r_n
\end{array}&lt;/div&gt;
&lt;p&gt;
として, &lt;span class="math"&gt;\((n+1)\)&lt;/span&gt; 回で割り切れたとすると, &lt;span class="math"&gt;\(r_n\)&lt;/span&gt; が最大公約数 &lt;span class="math"&gt;\(c\)&lt;/span&gt; となる.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;h3&gt;ガロア体&lt;/h3&gt;
&lt;p&gt;ある集合に対して, 加法および乗法における結合律の満足と分配律の成立が両立する演算を定義する. この公理を体の公理といい,
それを満たす集合を体, とくに位数が有限である体を有限体, ガロア体といい, これを素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; を位数として &lt;span class="math"&gt;\(GF(p)\)&lt;/span&gt;&amp;nbsp;と書く. &lt;/p&gt;
&lt;p&gt;このような体は位数を素数で構成すると簡単に構成でき&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, これを素体という. いま, &lt;span class="math"&gt;\(k\in\mathbb{Z}\)&lt;/span&gt; と合同な整数の全体を &lt;span class="math"&gt;\(\overline{k}\)&lt;/span&gt; と表し, これを &lt;span class="math"&gt;\(k\)&lt;/span&gt; を含む剰余類という.  なお, 一般に &lt;span class="math"&gt;\(a\equiv b\pmod{c} \Leftrightarrow \overline{a}=\overline{b}\)&lt;/span&gt; である.
ガロア体は, \(\mathbb{Z}/p\mathbb{Z}\)(以下これを簡単のため, \(\mathbb{Z}_p\) と書く.) を整数を &lt;span class="math"&gt;\(p\)&lt;/span&gt; で割った余りから構成される素体として, 次のように構成することで, その同型となる.
\[\mathbb{Z}_p=\left\{\overline{0},\cdots, \overline{p-1} \pmod{p}&amp;nbsp;\right\}\]&lt;/p&gt;
&lt;p&gt;例えば, &lt;span class="math"&gt;\(GF(2) = \{0, 1\}\)&lt;/span&gt; であり, このときの四則演算は「整数の世界で四則演算をして, それを &lt;span class="math"&gt;\(2\)&lt;/span&gt; で割った余り」と定義する&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
なおこの演算規則は加算が &lt;span class="caps"&gt;XOR&lt;/span&gt; に, 乗算が &lt;span class="caps"&gt;AND&lt;/span&gt;&amp;nbsp;に対応する.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;finitef&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;オイラーの &lt;span class="math"&gt;\(\phi\)&lt;/span&gt;&amp;nbsp;関数&lt;/h3&gt;
&lt;p&gt;オイラーの &lt;span class="math"&gt;\(\phi\)&lt;/span&gt; (トーシェント)関数は, 正整数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; に対する &lt;span class="math"&gt;\(1\)&lt;/span&gt; から &lt;span class="math"&gt;\(n\)&lt;/span&gt; までの自然数のうち
&lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素なものの個数を &lt;span class="math"&gt;\(\phi(n)\)&lt;/span&gt; として与えることによって定まる乗法的関数&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;である. 
この関数は \(p_i\) を &lt;span class="math"&gt;\(n\)&lt;/span&gt; の素因数として, 次の式で定義できる&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="totientf" class="disabled"&gt;オイラーの &amp;#92;(\phi&amp;#92;) 関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;[\phi(n)=n\displaystyle\prod_{i=1}^k(1-\dfrac{1}{p_i})&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;例えば &lt;span class="math"&gt;\(\phi(14) = 6\)&lt;/span&gt; である(&lt;span class="math"&gt;\(14 = 2 \cdot 7\)&lt;/span&gt; だから, &lt;span class="math"&gt;\(14\left(1-\dfrac{1}{2}\right)\left(1-\dfrac{1}{7}\right) = 6\)&lt;/span&gt;. これを列挙すると, &lt;span class="math"&gt;\(1,3,5,9,11,13\)&lt;/span&gt;). 
特に, &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数である場合, &lt;span class="math"&gt;\(1\)&lt;/span&gt; から &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; のうち &lt;span class="math"&gt;\(n\)&lt;/span&gt; の素因数である 
&lt;span class="math"&gt;\(n\)&lt;/span&gt; を因数としてもつことはないから &lt;span class="math"&gt;\(\phi(n) = n - 1\ \left(n\ is\ prime\right)\)&lt;/span&gt;&amp;nbsp;が成り立つ.&lt;/p&gt;
&lt;p&gt;以下で, 先頭から &lt;span class="math"&gt;\(100\)&lt;/span&gt; 個の素数 
\(p_i=p_0,p_1,p_2,\cdots,p_{99}\ \left(p\ is\ prime\right)\)
に対して, \(\phi(p_i)=p_i - 1\)&amp;nbsp;であることを確認する. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Numbers.Primes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.List&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Tuple.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Ratio&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;numerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;primeFactors&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;primeFactors&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;xxs&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;quotRem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
                &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;xxs&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="nf"&gt;totient&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;totient&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numerator&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;nub&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;primeFactors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;totient&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;フェルマーの小定理&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading lemma"&gt;&lt;a class="disabled" id="lemma2"&gt;補題 2&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
奇素位数 $p$ のガロア体 &amp;#92;(&lt;span class="caps"&gt;GF&lt;/span&gt;(p)&amp;#92;) の既約剰余類郡を 
&amp;#92;(\mathbb{Z}^{\ast}\_{p}=\left&amp;#92;{\overline{1},\overline{2},\cdots,\overline{p-1}\right&amp;#92;}&amp;#92;) としたとき, 
&amp;#92;(^\exists b,^\exists c \in \mathbb{Z}^{\ast}\_{p} \left(b \neq c\right)&amp;#92;) があって,
&amp;#92;(ba\equiv ca\pmod{p}&amp;#92;) となる &amp;#92;(a \in \mathbb{Z}^{\ast}\_{p}\ \left(\gcd(a, p)=1\right)&amp;#92;) は存在せず, 
&amp;#92;(\mathbb{Z}^{\ast}\_{p}&amp;#92;) の異なる項は非合同.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: &lt;span class="math"&gt;\(\gcd(a, p) = 1\)&lt;/span&gt; であるから &lt;span class="math"&gt;\(ba\equiv ca\pmod{p}\)&lt;/span&gt; の両辺から &lt;span class="math"&gt;\(a\)&lt;/span&gt; を約せて &lt;span class="math"&gt;\(b\equiv c\pmod{p}\)&lt;/span&gt;. 
&lt;span class="math"&gt;\(b &amp;lt; p\)&lt;/span&gt; および &lt;span class="math"&gt;\(c &amp;lt; p\)&lt;/span&gt; から従い &lt;span class="math"&gt;\(b = c\)&lt;/span&gt; となり不条理.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a name="fermatstheorem" class="disabled"&gt;フェルマーの小定理&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;&amp;#92;(p&amp;#92;) が素数 &amp;#92;(\Rightarrow\ ^\forall a\ \left(\gcd(a,p) = 1\right)&amp;#92;) に対して, &amp;#92;[a^{p-1}\equiv 1\pmod{p}\label{eq:second}\tag{2}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: &lt;a href="#lemma1"&gt;補題 2&lt;/a&gt; より従って, \(\mathbb{Z}^{\ast}_{p}\) の各要素と &lt;span class="math"&gt;\(a\)&lt;/span&gt; の積は全て異なり, かつ \(\mathbb{Z}^{\ast}_{p}\) はそれらで尽くされる. 
また, それらの積の &lt;span class="math"&gt;\(\pmod{p}\)&lt;/span&gt; は &lt;span class="math"&gt;\(\pmod{p}\)&lt;/span&gt; の既約代表系 \(\{1, 2, \cdots, p-1\}\)&amp;nbsp;のすべての積と合同:
&lt;/p&gt;
&lt;div class="math"&gt;$$1\cdot 2\cdot\cdots\cdot(p-1)\equiv (a)(2a)\cdots(p-1)a\pmod{p}$$&lt;/div&gt;
&lt;div class="math"&gt;$$(p-1)!\equiv (p-1)!\cdot a^{p-1}\pmod{p}$$&lt;/div&gt;
&lt;p&gt;
&lt;span class="math"&gt;\(\gcd((p-1)!, p) = 1\)&lt;/span&gt; であるから,&amp;nbsp;両辺からこれを約し, &lt;/p&gt;
&lt;p&gt;\[a^{p-1}\equiv 1\pmod{p} \]&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;簡単に確認&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Primes&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Primes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fermatLT&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;fermatLT&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Primes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fermatLT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;
&lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;原始元&lt;/h3&gt;
&lt;p&gt;&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;位数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
\(n \in\mathbb{Z}^{+},\ a \in\mathbb{Z},\ \gcd(n, a) = 1\) に対して \(a^d\equiv 1\pmod{n}\) のような最小の \(d\in\mathbb{Z}^{+}\) を \(a\) の\(\pmod{n}\) での位数&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;といい, これを \(d=\DeclareMathOperator*{\ord}{ord}\ord_n(a)\) と書く. 
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;ただし, 以下添え字 &lt;span class="math"&gt;\(n\)&lt;/span&gt; は明確である場合には省くこととする. 
たとえば &lt;span class="math"&gt;\(p=7\)&lt;/span&gt; としたときの &lt;span class="math"&gt;\(1 \leq a\leq 6\)&lt;/span&gt; の &lt;span class="math"&gt;\(a\)&lt;/span&gt; の冪&lt;span class="math"&gt;\(\pmod 7\)&lt;/span&gt;&amp;nbsp;を一覧にすると次のとおりである.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6 乗ですべて &lt;span class="math"&gt;\(\equiv 1\pmod{7}\)&lt;/span&gt; というのが, 先に述べたフェルマーの小定理 &lt;span class="math"&gt;\(\eqref{eq:second}\)&lt;/span&gt; であるが,
それよりも前に &lt;span class="math"&gt;\(\equiv 1\pmod{7}\)&lt;/span&gt; となる数があることがわかる.
これをいま述べた \(\DeclareMathOperator*{\ord}{ord}\ord\) で表せば, 
\(\DeclareMathOperator*{\ord}{ord} \ord(1)=1, \ord(2)=3, \ord(3)=6, \ord(4)=3, \ord(5)=6, \ord(6)=2\) である. 
また, この結果が &lt;span class="math"&gt;\(\phi(6) = 2\)&lt;/span&gt; と整合であることが確認できる. \(\DeclareMathOperator*{\ord}{ord}\ord(3), \ord(5)\) が他と相違なる部分は, &lt;span class="math"&gt;\(1\)&lt;/span&gt; から &lt;span class="math"&gt;\(6\)&lt;/span&gt; までの数がちょうど &lt;span class="math"&gt;\(1\)&lt;/span&gt; 回ずつ現れることである.&amp;nbsp;このように,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a name="primitive_root" class="disabled"&gt;原始根&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(\pmod{n}&amp;#92;) での位数が &amp;#92;(\phi(n)&amp;#92;) である整数
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;を &lt;span class="math"&gt;\(n\)&lt;/span&gt;&amp;nbsp;の原始根という.&lt;/p&gt;
&lt;p&gt;同様に, 原始元とは, 奇素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; と元 &lt;span class="math"&gt;\(a \in \mathbb{Z}^{+} \left(a &amp;lt; p\right)\)&lt;/span&gt; があって,
&lt;span class="math"&gt;\(p\)&lt;/span&gt; を法とする剰余類で累乗していくと, &lt;span class="math"&gt;\(1\)&lt;/span&gt; から &lt;span class="math"&gt;\(p-1\)&lt;/span&gt; のすべての元をつくす郡(巡回郡)を構成する元 &lt;span class="math"&gt;\(a\)&lt;/span&gt; をいう.&amp;nbsp;これは, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a^{p-1}\)&lt;/span&gt; で初めて &lt;span class="math"&gt;\(a^{n} \equiv 1\pmod{p}\)&lt;/span&gt; となるような元 &lt;span class="math"&gt;\(a\)&lt;/span&gt;(生成元であるから)&lt;/li&gt;
&lt;li&gt;位数が&lt;span class="math"&gt;\(p-1\)&lt;/span&gt; となる元 &lt;span class="math"&gt;\(a\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ともいえる. &lt;/p&gt;
&lt;p&gt;とくになにも考えず, 与えられた素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; に対する &lt;span class="math"&gt;\(GF(p)\)&lt;/span&gt;&amp;nbsp;の原始元を素朴に生成してみる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.List&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;findIndices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Numbers.Primes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;primitiveElem&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;primitiveElem&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="p"&gt;[((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; 
            &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;findIndices&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; 
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
                &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;primitiveElem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://wandbox.org/permlink/1ESn07fY95vwqEpv" name="thiscode"&gt;実行結果&lt;/a&gt;&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;. 
上の冪の一覧のとおり, 素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; を位数とするガロア体はその原始元を &lt;span class="math"&gt;\(a\)&lt;/span&gt;&amp;nbsp;として
&lt;/p&gt;
&lt;div class="math"&gt;$$GF(p)= \left\{0, 1, a, a^{2}, \cdots, a^{p-2}\label{eq:third}\tag{3}\right\}$$&lt;/div&gt;
&lt;p&gt; と構成されることがわかる.
&lt;span class="math"&gt;\(p=7\)&lt;/span&gt; であれば, 原始根は &lt;span class="math"&gt;\(\phi(6)=2\)&lt;/span&gt; であり, その &lt;span class="math"&gt;\(1\)&lt;/span&gt; つは &lt;span class="math"&gt;\(g=3\)&lt;/span&gt; であるからこの冪乗 &lt;span class="math"&gt;\(n\equiv g^{f}\pmod{7}\)&lt;/span&gt; で &lt;span class="math"&gt;\(p-1=6\)&lt;/span&gt; までの全て, 
すなわち先の \(\DeclareMathOperator*{\ord}{ord}\ord(3)\)&amp;nbsp;の縦の列が得られる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;離散対数問題&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\eqref{eq:third}\)&lt;/span&gt; を前提とし &lt;span class="math"&gt;\(g^{f}\equiv n\pmod{p}\ \left(1\leq n \leq p-1\right)\)&lt;/span&gt; を満たす
&lt;span class="math"&gt;\(f\)&lt;/span&gt; は &lt;span class="math"&gt;\(0\leq f\leq p-2\)&lt;/span&gt; のうち, ただ &lt;span class="math"&gt;\(1\)&lt;/span&gt; つだけ存在する. これを &lt;span class="math"&gt;\(n\)&lt;/span&gt; の指数または離散対数といい, 
\(f=\log_{g}n\pmod{p}\) および \(\DeclareMathOperator*{\Ind}{Ind}f=\Ind_{g}(n)\) と書く. 
この &lt;span class="math"&gt;\(n\)&lt;/span&gt; を真数, または離散真数という. 
以下は, \(3\leq p \leq 19\ \left(p\ is\ prime\right)\) でその最小の原始根 &lt;span class="math"&gt;\(g\)&lt;/span&gt; の冪乗
\(n\equiv g^f\pmod{p}\) の昇順を &lt;span class="math"&gt;\(x\)&lt;/span&gt; 軸, 
\(\DeclareMathOperator*{\Ind}{Ind}f=\Ind_{g}(n)\) を &lt;span class="math"&gt;\(y\)&lt;/span&gt; 軸として,
それぞれの各離散対数をプロットした図&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;である.&lt;/p&gt;
&lt;p&gt;&lt;img alt="離散対数を視覚化した図" src="../../../../../images/2018/June/fig.png"&gt;&lt;/p&gt;
&lt;p&gt;これを見てもわかるように, &lt;span class="math"&gt;\(f\)&lt;/span&gt; の値に規則性は見られず, 予測困難な振る舞いをすることがわかる.
例えば, &lt;span class="math"&gt;\(p=19,\ g=2,\ n=3\)&lt;/span&gt;&amp;nbsp;とすると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;より &lt;span class="math"&gt;\(f=13\)&lt;/span&gt; であることがわかる. この場合, まだ &lt;span class="math"&gt;\(p\)&lt;/span&gt; が小さい素数であるからこそ, 
このような総当たりで解が得られるのだが,
大きな &lt;span class="math"&gt;\(p\)&lt;/span&gt; に対する総当たりでは, 実用的な時間で解を得ることができない.
これを離散対数問題という.
エルガマル暗号は, &lt;span class="math"&gt;\(g\)&lt;/span&gt; と &lt;span class="math"&gt;\(f\)&lt;/span&gt; から &lt;span class="math"&gt;\(n\)&lt;/span&gt; を求めることは容易であるが,
いま述べたように &lt;span class="math"&gt;\(g\)&lt;/span&gt; と &lt;span class="math"&gt;\(n\)&lt;/span&gt; から &lt;span class="math"&gt;\(f\)&lt;/span&gt; を求めることは困難であるという事実を利用することで,
公開鍵暗号方式としての成立および暗号学的安全性の担保を確立する&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name="genencanddec" class="disabled"&gt;暗号の生成と解読&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;以上を前提として, 暗号の生成とその解読方法について示す.&amp;nbsp;受信者は下準備として次の手順で公開鍵と秘密鍵を生成する:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大きな素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt;&amp;nbsp;を選ぶ.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\phi(p-1)\)&lt;/span&gt; 個の &lt;span class="math"&gt;\(p\)&lt;/span&gt; の原始根のうち, 任意の &lt;span class="math"&gt;\(1\)&lt;/span&gt; つ &lt;span class="math"&gt;\(g\)&lt;/span&gt;&amp;nbsp;を選ぶ.&lt;/li&gt;
&lt;li&gt;任意の正整数 \(a\in\mathbb{Z}^{+},\ \left(a &amp;lt; p\right)\)&amp;nbsp;を選ぶ.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(y\equiv g^a\pmod{p}\)&lt;/span&gt;&amp;nbsp;を計算する.&lt;/li&gt;
&lt;li&gt;公開鍵を \(\left\{p, g, y\right\}\), 秘密鍵を \(\left\{a\right\}\)&amp;nbsp;とする.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;平文の列を \(x_1,x_2,\cdots,x_t\ \left(x_i &amp;lt; p\right)\), 最初の平文を &lt;span class="math"&gt;\(x\)&lt;/span&gt; とし,&amp;nbsp;発信者は次の手順で暗号文を生成する:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意の正整数 \(k\in\mathbb{Z}^{+}\)&amp;nbsp;を選ぶ.&lt;/li&gt;
&lt;li&gt;\(\alpha\equiv g^k\pmod{p}\)&amp;nbsp;を計算する.&lt;/li&gt;
&lt;li&gt;\(z\equiv y^k\pmod{p}\) と \(\beta\equiv xz\pmod{p}\) を計算し, &lt;span class="math"&gt;\(x\)&lt;/span&gt; に対する \(\gamma =\left\{\alpha,\ \beta\right\}\)&amp;nbsp;を得る.&lt;/li&gt;
&lt;li&gt;\(x_t\) に到達するまで 1 から 3 の手順を繰り返す. 到達すれば,&amp;nbsp;暗号文の生成は完了である.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;受信者は次の手順で暗号を解く:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\gamma\)&lt;/span&gt; から &lt;span class="math"&gt;\(x\)&lt;/span&gt; を得るためには, &lt;span class="math"&gt;\(y^k\)&lt;/span&gt; を要する. 秘密鍵 &lt;span class="math"&gt;\(a\)&lt;/span&gt; を使い, &lt;span class="math"&gt;\(z\equiv y^k \equiv \left(g^a\right)^k\equiv\left(g^k\right)^a\equiv\alpha^a\pmod{p}\)&lt;/span&gt;&amp;nbsp;と計算する.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x\equiv \dfrac{\beta}{z}\pmod{p}\)&lt;/span&gt; であるので, &lt;span class="math"&gt;\(\pmod{p}\)&lt;/span&gt; で &lt;span class="math"&gt;\(z\)&lt;/span&gt; のモジュラ逆数 &lt;span class="math"&gt;\(zq\equiv 1\pmod{p},\ q\equiv\dfrac{1}{z}\pmod{p}\)&lt;/span&gt;&amp;nbsp;を計算する.&lt;/li&gt;
&lt;li&gt;\(x\equiv\dfrac{\beta}{z}\equiv\beta q\equiv u\pmod{p}\ \left(u&amp;lt; p\right)\) を計算する. ここで, &lt;span class="math"&gt;\(x&amp;lt; p\)&lt;/span&gt; であるから,&amp;nbsp;この結果が平文である.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;実際にこれを手計算で実行してみる.
&lt;span class="math"&gt;\(p=97\)&lt;/span&gt; とする. 従って &lt;span class="math"&gt;\(g=5\)&lt;/span&gt; となる. ここで &lt;span class="math"&gt;\(a=7\)&lt;/span&gt; とする.
&lt;span class="math"&gt;\(y\equiv 5^7\pmod{97}\)&lt;/span&gt; より &lt;span class="math"&gt;\(y\equiv 5^7\equiv 40\pmod{97}\)&lt;/span&gt; だから, 公開鍵は \(\left\{97,5,40\right\}\),
秘密鍵は \(\left\{7\right\}\) である. 次に暗号文を作成する.
平文は,&amp;nbsp;次のアスキーコードで表現された文字列とする.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここで &lt;span class="math"&gt;\(x=79,\ k = 5\)&lt;/span&gt; とする. 
&lt;span class="math"&gt;\(\alpha\equiv 5^5\equiv 21\pmod{97}\)&lt;/span&gt; また
&lt;span class="math"&gt;\(z\equiv 40^5\equiv 10\pmod{97}\)&lt;/span&gt; より &lt;span class="math"&gt;\(\beta\equiv 79\cdot 10\equiv 14\pmod{97}\)&lt;/span&gt;.
従って, \(\gamma=\left\{21, 14\right\}\) となる. 
&lt;span class="math"&gt;\(x=95\)&lt;/span&gt; にも同様の計算(&lt;span class="math"&gt;\(k\)&lt;/span&gt; は毎度ランダムに選ぶ. 次は &lt;span class="math"&gt;\(k=6\)&lt;/span&gt; であったとした.)を施して, 
全体の暗号文を&lt;code&gt;[21, 14, 8, 73]&lt;/code&gt;とする. これを解読する.
&lt;span class="math"&gt;\(z\equiv 21^7\equiv 10\pmod{97}\)&lt;/span&gt; で, &lt;span class="math"&gt;\(z\equiv y^k\pmod{97}\)&lt;/span&gt;.
&lt;span class="math"&gt;\(10q\equiv 1\pmod{97}\)&lt;/span&gt; だから &lt;span class="math"&gt;\(q\equiv\dfrac{1}{10}\equiv 68\pmod{97}\)&lt;/span&gt;.
ここで &lt;span class="math"&gt;\(u\equiv 14\cdot 68\equiv 97\pmod{p}\)&lt;/span&gt; で, &lt;span class="math"&gt;\(u&amp;lt; p\)&lt;/span&gt; だから &lt;span class="math"&gt;\(x\equiv u\pmod{p}\)&lt;/span&gt;.
よって &lt;span class="math"&gt;\(1\)&lt;/span&gt; 文字目は &lt;span class="math"&gt;\(79\)&lt;/span&gt;. 同様に &lt;span class="math"&gt;\(2\)&lt;/span&gt; 文字目も計算し, 全体の平文が手に入る.
解読の段階で &lt;span class="math"&gt;\(a=7\)&lt;/span&gt; を知らなかった場合, 離散対数問題を解くことに相当するため,&amp;nbsp;平文を得るのは非常に困難となる.&lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;p&gt;ここからは, これをプログラムとして実装することを考える.
第一に必要となるものは, 大きな素数の生成器である.
方法としては, ランダムに奇数を生成し, Miller-Rabin 素数判定法などの確率的素数判定法を用いることが実例として多い&lt;sup id="fnref-10"&gt;&lt;a class="footnote-ref" href="#fn-10"&gt;10&lt;/a&gt;&lt;/sup&gt;ので, ひとまず素数生成には Miller-Rabin&amp;nbsp;素数判定法を使うこととする. &lt;/p&gt;
&lt;h4&gt;フェルマーテスト, Miller-Rabin&amp;nbsp;素数判定法&lt;/h4&gt;
&lt;p&gt;Miller-Rabin 素数判定法は, フェルマーテストの改良と言えるので, まずその説明から行う.
フェルマーテストは, 先に述べたフェルマーの小定理 &lt;span class="math"&gt;\(\eqref{eq:second}\)&lt;/span&gt; の対偶&lt;sup id="fnref-11"&gt;&lt;a class="footnote-ref" href="#fn-11"&gt;11&lt;/a&gt;&lt;/sup&gt;を利用した判定方法であるといえる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled" name="fermattest"&gt;フェルマーテスト&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(FT_n(a): =\gcd(a, n)=1&amp;#92;) を満たす &amp;#92;(n \in\mathbb{Z}^{+}&amp;#92;) と底 &amp;#92;(a\in\mathbb{Z}^{+}&amp;#92;) があって, &amp;#92;(a^{n-1}\equiv 1\pmod{n}&amp;#92;) が成り立つか.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;この答えが yes であるとき &lt;span class="math"&gt;\(n\)&lt;/span&gt; は \(FT_n(a)\) をパスしたといえば, 
フェルマーの小定理は, 「&lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数ならば, &lt;span class="math"&gt;\(n\)&lt;/span&gt; は &lt;span class="math"&gt;\(^\forall a\left(\gcd(a,n)=1\right)\)&lt;/span&gt; に対する \(FT_n(a)\) をパスした」といい, この対偶をとると,「\(FT_n(a)\) をパスしない &lt;span class="math"&gt;\(\gcd(a,n)=1\)&lt;/span&gt; の &lt;span class="math"&gt;\(a\)&lt;/span&gt; があれば, &lt;span class="math"&gt;\(n\)&lt;/span&gt; は素数ではない」といえる. 
たとえば, &lt;span class="math"&gt;\(n=15\)&lt;/span&gt; とすると &lt;span class="math"&gt;\(2^{15-1}\equiv 2^{14}\equiv 4\not\equiv 1\pmod{15}\)&lt;/span&gt; であるから &lt;span class="math"&gt;\(15\)&lt;/span&gt; は素数ではない. しかしながら, &lt;span class="math"&gt;\(^\forall a\left(\gcd(a,n)=1\right)\)&lt;/span&gt; に対して \(FT_n(a)\) をパスしても &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数であるとは断言できない.&amp;nbsp;このような&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;カーマイケル数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(^\forall a\left(\gcd(n, a)=1\right)&amp;#92;) に対して &amp;#92;(FT_n(a)&amp;#92;) をパスする合成数
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をカーマイケル数という. 一般的に, そのような &lt;span class="math"&gt;\(n\)&lt;/span&gt; は少ないことが知られている.
ところで,&amp;nbsp;カーマイケル数は奇数である.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading prop"&gt;&lt;a class="disabled" id="prop2"&gt;命題 2&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
    カーマイケル数は奇数
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: &lt;span class="math"&gt;\(a^n\equiv a\pmod{n}\)&lt;/span&gt; に &lt;span class="math"&gt;\(a=n-1\)&lt;/span&gt; を代入すると &lt;span class="math"&gt;\((-1)^n\equiv -1\pmod{n}\)&lt;/span&gt; となるが,
このとき &lt;span class="math"&gt;\(n\)&lt;/span&gt; を偶数とすると &lt;span class="math"&gt;\(1\equiv -1\pmod{n}\)&lt;/span&gt; となってしまい不条理. &lt;span class="math"&gt;\(\therefore\)&lt;/span&gt; 背理により題意は示された.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;一方, 
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;\(a\) を底とする偽素数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
\(\gcd(n, a)=1\) のある \(a\) に対して \(FT_n(a)\) をパスする合成数
  &lt;/div&gt;
&lt;/div&gt;
を &lt;span class="math"&gt;\(a\)&lt;/span&gt;&amp;nbsp;を底とする偽素数という. &lt;/p&gt;
&lt;p&gt;以下で, 取り敢えず &lt;span class="math"&gt;\(200\)&lt;/span&gt; 個の偽素数(結果的にはカーマイケル数)を&lt;a class="disabled" name="modexpref"&gt;得てみた&lt;/a&gt;&lt;sup id="fnref-12"&gt;&lt;a class="footnote-ref" href="#fn-12"&gt;12&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Numbers.Primes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Bits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;{-# INLINE modExp #-}&lt;/span&gt;
&lt;span class="nf"&gt;modExp&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Integral&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Bits&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;modExp&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="cm"&gt;{-# INLINE isFermat #-}&lt;/span&gt;
&lt;span class="nf"&gt;isFermat&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Integral&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Bits&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;isFermat&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nf"&gt;pseudoprimes&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;pseudoprimes&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;tryFermat&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isFermat&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tryFermat&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- Testing 100 times&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;pseudoprimes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行結果.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1729&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2821&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8911&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10585&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;29341&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41041&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;46657&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;52633&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;62745&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;63973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;75361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115921&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;126217&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;162401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;172081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;188461&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;252601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;278545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;294409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;314821&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;334153&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;340561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;399001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;410041&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;449065&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;488881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;512461&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;530881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;552721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;656601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;658801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;670033&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;748657&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;825265&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;838201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;852841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;997633&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1024651&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1033669&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1050985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1082809&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1152271&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1193221&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1461241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1569457&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1615681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1773289&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1857241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1909001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2100901&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2113921&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2433601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2455921&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2508013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2531845&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2628073&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2704801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3057601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3146221&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3224065&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3581761&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3664585&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3828001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4335241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4463641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4767841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4903921&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4909177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5031181&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5049001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5148001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5310721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5444489&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5481451&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5632705&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5968873&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6049681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6054985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6189121&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6313681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6733693&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6840001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6868261&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7207201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7519441&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7995169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8134561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8341201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8355841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8719309&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8719921&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8830801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8927101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9439201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9494101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9582145&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9585541&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9613297&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9890881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10024561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10267951&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10402561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10606681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10837321&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10877581&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11119105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11205601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11921001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11972017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12261061&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12262321&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12490201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12945745&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13187665&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13696033&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13992265&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14469841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14676481&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14913991&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15247621&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15403285&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15829633&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15888313&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16046641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16778881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17098369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17236801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17316001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17586361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17812081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18162001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18307381&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18900973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19384289&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19683001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20964961&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21584305&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22665505&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23382529&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25603201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26280073&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26474581&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26719701&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26921089&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26932081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27062101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27336673&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27402481&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28787185&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;29020321&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;29111881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31146661&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31405501&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31692805&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32914441&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;33302401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;33596641&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34196401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34657141&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34901461&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;35571601&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;35703361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;36121345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;36765901&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;37167361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;37280881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;37354465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;37964809&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;38151361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;38624041&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;38637361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;39353665&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40160737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40280065&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40430401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40622401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40917241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41298985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41341321&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41471521&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42490801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43286881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43331401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43584481&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43620409&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44238481&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;45318561&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;45877861&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;45890209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;46483633&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;47006785&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;48321001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;48628801&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;49333201&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いて, Miller-Rabin 法について述べる. 
前述したように, Miller-Rabin 法は, フェルマーテストの改良である. 
そもそも, いま判定する &lt;span class="math"&gt;\(n\)&lt;/span&gt; は奇数である前提をおいて十分であるから &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; は偶数となり,
かつ &lt;span class="math"&gt;\((n-1) \div 2\)&lt;/span&gt; の結果は整数とすることができる. 
したがって \[\displaystyle a^{n-1}\equiv 1\pmod{n}\Rightarrow {\underbrace{\left(a^{(n-1)/2}\bmod n\right)}_{x}}^2 \equiv 1\pmod{n}\label{eq:fourth}\tag{4}\] がいえる. 
例えば, &lt;span class="math"&gt;\(\eqref{eq:fourth}\)&lt;/span&gt; の右側の式に着目し, &lt;span class="math"&gt;\(n=35\)&lt;/span&gt; とすると, &lt;span class="math"&gt;\(x\)&lt;/span&gt; は &lt;span class="math"&gt;\(\overline{1},\overline{6},\overline{29},\overline{34}\)&lt;/span&gt; が &lt;span class="math"&gt;\(2\)&lt;/span&gt; 乗すると &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; となるため, 有りうる.
しかし, &lt;span class="math"&gt;\(n\)&lt;/span&gt; が奇素数であるとき, その剰余類は &lt;span class="math"&gt;\(\pm{\overline{1}}\)&lt;/span&gt; しか有りえないのである. 
これは,&amp;nbsp;次の命題の証明によって証明される.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading prop"&gt;&lt;a class="disabled" id="prop3"&gt;命題 3&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
法 &amp;#92;(n&amp;#92;) が奇素数であるとき, その剰余において「&amp;#92;(1&amp;#92;) の自明でない平方根は存在しない. 
&amp;#92;(\Leftrightarrow\ x&amp;#92;) は &amp;#92;(\pm{1}&amp;#92;) しか存在しえない.」.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;証明&lt;/strong&gt;: &lt;span class="math"&gt;\(n\)&lt;/span&gt; を法とした剰余において &lt;span class="math"&gt;\(1\pmod{n}\)&lt;/span&gt; の非自明な平方根を &lt;span class="math"&gt;\(x\)&lt;/span&gt; とすると \[x^2\equiv 1\pmod{n}=x^2-1\equiv 0\pmod{n}=\left(x-1\right)\left(x+1\right)\equiv 0\pmod{n}\] において, &lt;span class="math"&gt;\(n\)&lt;/span&gt; は素数であるから &lt;span class="math"&gt;\(x-1\)&lt;/span&gt; または &lt;span class="math"&gt;\(x+1\)&lt;/span&gt; で割り切れなければならないが, &lt;span class="math"&gt;\(x\)&lt;/span&gt; が &lt;span class="math"&gt;\(\pm{1}\)&lt;/span&gt; でないとすると, &lt;span class="math"&gt;\(x-1\)&lt;/span&gt; も &lt;span class="math"&gt;\(x+1\)&lt;/span&gt; も &lt;span class="math"&gt;\(n\)&lt;/span&gt; で割り切れず矛盾. &lt;span class="math"&gt;\(\therefore\)&lt;/span&gt; 背理により, 題意は示された.&amp;nbsp;\(\square\)&lt;/p&gt;
&lt;p&gt;Miller-Rabin 法は, この性質を利用して, つまり &lt;span class="math"&gt;\(1\pmod{n}\)&lt;/span&gt; の自明でない平方根を求めることで, 合成数を判別する. 先に述べたように &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; は偶数であるから, 何度か必ず &lt;span class="math"&gt;\(2\)&lt;/span&gt; で割り切ることができる. 
割り切る回数を &lt;span class="math"&gt;\(s\)&lt;/span&gt;&amp;nbsp;とすると, &lt;/p&gt;
&lt;div class="math"&gt;$$n-1 = 2^s \cdot d\ (s\in\mathbb{N}, d\ is\ odd)\label{eq:fifth}\tag{5}$$&lt;/div&gt;
&lt;p&gt; と表せる. 
このときの &lt;span class="math"&gt;\(d\)&lt;/span&gt; は, &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; を繰り返し &lt;span class="math"&gt;\(2\)&lt;/span&gt; で割った結果そのものである.
フェルマーの小定理 &lt;span class="math"&gt;\(\eqref{eq:second}\)&lt;/span&gt; を &lt;span class="math"&gt;\(\eqref{eq:fifth}\)&lt;/span&gt;&amp;nbsp;と関連づけると,
&lt;/p&gt;
&lt;div class="math"&gt;$$a^{n-1}\equiv a^{2^s\cdot d}\equiv 1\pmod{n}$$&lt;/div&gt;
&lt;p&gt; がいえる. 
&lt;a href="#prop3"&gt;命題 3&lt;/a&gt; より, この平方根は &lt;span class="math"&gt;\(\pm{1}\pmod{n}\)&lt;/span&gt; である.&amp;nbsp;つまり, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading theo"&gt;&lt;a class="disabled"&gt;Miller-Rabin 素数判定法&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&amp;#92;(^\forall a \in \mathbb{Z}^{\ast}_{n}&amp;#92;) について $$a^d\equiv 1\pmod{n}$$ または $$a^{2^r\cdot d}\equiv -1\pmod{n}\ (0\leq r\leq s-1)$$ が成り立つ. 
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これは, 予め &lt;span class="math"&gt;\(a^d\)&lt;/span&gt; から始めて次々に &lt;span class="math"&gt;\(2\)&lt;/span&gt; 乗して得られる列
\(a^d,\underbrace{\cdots, a^{2^{s-1}\cdot d}}_{s}, a^{2^s\cdot d}=a^{n-1}\) を想像すると,&amp;nbsp;考えるに容易い. &lt;/p&gt;
&lt;p&gt;例として, 先に確認できた最小のカーマイケル数である
&lt;span class="math"&gt;\(561\)&lt;/span&gt; をこのミラーラビン法で判定してみるとする. 
&lt;span class="math"&gt;\(n=561,\ a=2\)&lt;/span&gt; としたとき, &lt;span class="math"&gt;\(561-1=2^4\cdot 35\)&lt;/span&gt; であるから, 
&lt;span class="math"&gt;\(2^{35}\equiv 263\pmod{561}\)&lt;/span&gt;, &lt;span class="math"&gt;\(2^{2\cdot 35}\equiv 263^2\equiv 166\pmod{561}\)&lt;/span&gt;,
&lt;span class="math"&gt;\(2^{4\cdot 35}\equiv 166^2\equiv 67\pmod{561}\)&lt;/span&gt;, 
&lt;span class="math"&gt;\(2^{8\cdot 35}\equiv 67^2\equiv 1\pmod{561}\)&lt;/span&gt; より条件を満たさない.
よって &lt;span class="math"&gt;\(a=2\)&lt;/span&gt; により, &lt;span class="math"&gt;\(n=561\)&lt;/span&gt;&amp;nbsp;が合成数であることがわかった.&lt;/p&gt;
&lt;p&gt;いま述べたように, この手続きで &lt;span class="math"&gt;\(n\)&lt;/span&gt; が合成数であることがわかったとき,
&lt;span class="math"&gt;\(a\)&lt;/span&gt; を &lt;i&gt;witness&lt;/i&gt; と言い, そうでないとき &lt;span class="math"&gt;\(a\)&lt;/span&gt; を &lt;i&gt;strong liar&lt;/i&gt;, 
&lt;span class="math"&gt;\(n\)&lt;/span&gt; を &lt;i&gt;strong pseudoprime&lt;/i&gt; という&lt;sup id="fnref-13"&gt;&lt;a class="footnote-ref" href="#fn-13"&gt;13&lt;/a&gt;&lt;/sup&gt;. 
すべての合成数には, 多くの &lt;i&gt;witness&lt;/i&gt; である &lt;span class="math"&gt;\(a\)&lt;/span&gt; が存在することが知られているが,
そのような &lt;span class="math"&gt;\(a\)&lt;/span&gt; を生成する簡単な方法はまだ知られていない&lt;sup id="fnref-14"&gt;&lt;a class="footnote-ref" href="#fn-14"&gt;14&lt;/a&gt;&lt;/sup&gt;ため, 
この &lt;span class="math"&gt;\(a\)&lt;/span&gt; は, いま例で述べたように \(^\forall a\in \mathbb{Z}^{\ast}_{n}\) または
\(^\forall a\in \left(\mathbb{Z}^{\ast}_{n}\setminus \left\{1 \right\}\right)\)
からランダムに取って, 何度かの試行を行うこととなる. 
しかし &lt;span class="math"&gt;\(n\)&lt;/span&gt; が小さい場合, 特定のいくつかの &lt;i&gt;witness&lt;/i&gt;
によるテストで十分であることが知られており&lt;sup id="fnref-15"&gt;&lt;a class="footnote-ref" href="#fn-15"&gt;15&lt;/a&gt;&lt;/sup&gt;,
その場合, すべての &lt;span class="math"&gt;\(a&amp;lt;2\left(\ln n\right)^2\)&lt;/span&gt;&amp;nbsp;を試みる必要はない.&lt;/p&gt;
&lt;p&gt;以下にミラーラビン法を用いた素数生成の実装例を示す.
今述べたように, 特定のいくつかの &lt;i&gt;witness&lt;/i&gt; マジックナンバーを利用することで,&amp;nbsp;演算の高速化を図っている.&lt;/p&gt;
&lt;p&gt;なおミラーラビン法の試行回数に関してであるが, 
下記の実装では, &lt;span class="math"&gt;\(t\)&lt;/span&gt; を試行回数, &lt;span class="math"&gt;\(|p|\)&lt;/span&gt; を得たい素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt;
のビット長としたとき, &lt;span class="math"&gt;\(|p|\geq 3072\)&lt;/span&gt; で &lt;span class="math"&gt;\(t=64\)&lt;/span&gt;, &lt;span class="math"&gt;\(3071\geq |p|\geq2048\)&lt;/span&gt; で &lt;span class="math"&gt;\(t=56\)&lt;/span&gt;, 
それ以外を &lt;span class="math"&gt;\(t=40\)&lt;/span&gt; とした&lt;sup id="fnref-16"&gt;&lt;a class="footnote-ref" href="#fn-16"&gt;16&lt;/a&gt;&lt;/sup&gt;.
ただし, &lt;span class="math"&gt;\(n\)&lt;/span&gt; の値がマジックナンバーに当てはまる値であった場合,
いま設定した試行回数を無視して,&amp;nbsp;より少ない回数で試行を実行することとしている.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- miller.hs&lt;/span&gt;
&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Tuple.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Bool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Bits&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.|.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Fix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;randomRs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;newStdGen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;randomRIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.IO.Unsafe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unsafePerformIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Environment&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;BitSize&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;

&lt;span class="cm"&gt;{-# INLINE witnesses #-}&lt;/span&gt;
&lt;span class="nf"&gt;witnesses&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Enum&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;witnesses&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; 
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2047&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1373653&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9080191&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;25326001&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3215031751&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4759123141&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1122004669633&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1662803&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2152302898747&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3474749660383&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;341550071728321&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3825123056546413051&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18446744073709551616&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;318665857834031151167461&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3317044064679887385961981&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;randomRs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;newStdGen&lt;/span&gt;

&lt;span class="cm"&gt;{-# INLINE millerRabin&amp;#39; #-}&lt;/span&gt;
&lt;span class="nf"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unsafePerformIO&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;millerRabin&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="nf"&gt;millerRabin&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;millerRabin&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="nf"&gt;millerRabin&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="nf"&gt;millerRabin&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; 
        &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;witnesses&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; 
            &lt;span class="n"&gt;takeWhile&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;iterate&lt;/span&gt; &lt;span class="p"&gt;((`&lt;/span&gt;&lt;span class="n"&gt;quotRem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="cm"&gt;{-# INLINE genRndPrime #-}&lt;/span&gt;
&lt;span class="nf"&gt;genRndPrime&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;BitSize&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;
&lt;span class="nf"&gt;genRndPrime&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3071&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2047&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;millerRabinV&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.|.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;randomRIO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;genRndPrime&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;getArgs&lt;/span&gt; &lt;span class="c1"&gt;-- NOTE: Simplefied implementation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;禁断の&lt;code&gt;unsafePerformIO&lt;/code&gt;を使っているが, Haskell によるミラーラビン法の実装をいくつか見たところ, 乱択部分を除いてしまうか, &lt;code&gt;unsafePerformIO&lt;/code&gt;でむりやり剥がすかのどちらかであるものが多かったため, 今回は&lt;code&gt;unsafePerformIO&lt;/code&gt;を使った. 
取り敢えず, &lt;span class="math"&gt;\(512\)&lt;/span&gt; ビットの素数(厳密には, ミラーラビン法をパスした整数値)を &lt;span class="math"&gt;\(500\)&lt;/span&gt; 個生成して, &lt;span class="math"&gt;\(1\)&lt;/span&gt; 個毎の平均タイムを取ってみる(Intel Core i5 2.3&amp;nbsp;GHz).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ghc -O2 miller.hs
$ &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i&amp;lt;c&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; &lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/s//&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$t&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt; ./miller &lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;.15404000000000001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いて, &lt;span class="math"&gt;\(128, 256, 512, 1024, 2048, 4096\)&lt;/span&gt;&amp;nbsp;ビットの素数(厳密には(略))を出力してみる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Prelude&amp;gt; :l miller.hs
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Compiling Main             &lt;span class="o"&gt;(&lt;/span&gt; miller.hs, interpreted &lt;span class="o"&gt;)&lt;/span&gt;
Ok, one module loaded.
*Main&amp;gt; :m +Control.Monad
*Main Control.Monad&amp;gt; mapM_ &lt;span class="o"&gt;(&lt;/span&gt;print &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt; genRndPrime&lt;span class="o"&gt;)&lt;/span&gt; $ takeWhile &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; $ iterate &lt;span class="o"&gt;(&lt;/span&gt;*2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;
&lt;span class="m"&gt;30152684759236306360759189014885017501&lt;/span&gt;
&lt;span class="m"&gt;17615060719467184202036409862717012145510462718555435021180440677751843010823&lt;/span&gt;
&lt;span class="m"&gt;4961148527316039571648091952671338492606036840037640470424610573222347642611462698736307409917945445030462370397146417013342380935544024541068881582286519&lt;/span&gt;
&lt;span class="m"&gt;25584768656119199916533897521508744971267476837365238305752308490292510217984396186262212951588772839265133033518832638176737141863211711861885101826309901436466476910363387059212888058245199487348290889532831748995252985064885609741672898559944700898752387615008473235044774735893904621136647403330417312059&lt;/span&gt;
&lt;span class="m"&gt;9697176354766878597400959392092693913441120648813644414460016213663985294414931715402479614583881054693029546415327047217815927381224240226473707682349775659198547518238881984785480308932024810985466973637700641819036921605772405440708981576721445103440573178324949184257202763509431134454852179958292647936221069441068206326565638462179605127956309699241768323894074914089121556488610751882542364864592334186293707224875665902283108012729170475600277359162025423140429916611481557282284452570764357791923438513047955145544164761084918980627342758315952165604438369806429356467080379549163687769931548537357143263137&lt;/span&gt;
&lt;span class="m"&gtlt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というわけで, 任意のビット数の素数(厳(略))が得られるようになった. 
ところで, これは完全に蛇足なのだが, 同様の実装を C++ で行えば,
これより少し早くなるのではないかと思い, 
Boost.Multiprecision 等を使って, この実装を C++ に移植しようと考えた. 
ただ, ミラーラビン法で素数を得る機能は, 既に同ライブラリ内で実装済みであったので,
一旦それを用いてタイムを計測して,&amp;nbsp;お茶を濁すこととした. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// miller.cpp&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/multiprecision/miller_rabin.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/random/mersenne_twister.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/random/uniform_int_distribution.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;boost/random/random_device.hpp&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;check_times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3072&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multiprecision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;lexical_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;uniform_int_distribution&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cpp_int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cpp_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cpp_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;random_device&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mt19937&lt;/span&gt; &lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cpp_int&lt;/span&gt; &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;miller_rabin_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check_times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若干ではあるが,&amp;nbsp;やはり少しは早くなったようだ.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ g++-8 -std&lt;span class="o"&gt;=&lt;/span&gt;c++1z -lboost_random miller.cpp -I/usr/local/include -march&lt;span class="o"&gt;=&lt;/span&gt;native -O3 -Ofast
$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt; ./a.out &lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;.13506000000000004
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;さらに早さを求める場合, 実用途として利用でき, かつお手頃なもので良い選択になるものを考えると, 
やはり libgmp が思い浮かぶ&lt;sup id="fnref-17"&gt;&lt;a class="footnote-ref" href="#fn-17"&gt;17&lt;/a&gt;&lt;/sup&gt;. 
ただ, 本エントリの内容のメインは素数生成に関してではないので,&amp;nbsp;一旦ここまでとしておく.&lt;/p&gt;
&lt;h4&gt;原始根の生成&lt;/h4&gt;
&lt;p&gt;次に必要となるのは原始根 &lt;span class="math"&gt;\(g\)&lt;/span&gt; であるが, この生成を簡単にするためには, 
安全素数という素数を素数生成の段階で生成しておかなければならない&lt;sup id="fnref2-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;.&amp;nbsp;安全素数は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;安全素数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  &amp;#92;(q=2p+1\ \left(p\ is\ prime\right)&amp;#92;) があって, このとき素数となる &amp;#92;(q&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をいう&lt;sup id="fnref-18"&gt;&lt;a class="footnote-ref" href="#fn-18"&gt;18&lt;/a&gt;&lt;/sup&gt;.&amp;nbsp;また, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;ソフィー・ジェルマン素数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
  安全素数 &amp;#92;(q=2p+1&amp;#92;) の &amp;#92;(p=(q-1)\div 2&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をソフィー・ジェルマン素数という. 例えば, &lt;span class="math"&gt;\(p=11\)&lt;/span&gt; としたとき
&lt;span class="math"&gt;\(2\cdot 11+1=23\)&lt;/span&gt; は素数であるから, &lt;span class="math"&gt;\(q=23\)&lt;/span&gt; を安全素数, 
また &lt;span class="math"&gt;\(p=11\)&lt;/span&gt; をソフィー・ジェルマン素数という.
素数生成の段階でこの安全素数を要するのは, 
原始根 &lt;span class="math"&gt;\(g\)&lt;/span&gt; を求める単純な一般式が知られておらず&lt;sup id="fnref3-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;, 安全素数でない素数に対する原始根
&lt;span class="math"&gt;\(g\)&lt;/span&gt; の確定的な結果を要する場合, &lt;a href="#thiscode"&gt;先に求めた&lt;/a&gt;ように
\(g\not\equiv 1,\cdots,g^{p-2}\not\equiv 1\pmod{p}\) といった判定が必要となるからである.
&lt;span class="math"&gt;\(q\)&lt;/span&gt; が安全素数であれば, &lt;span class="math"&gt;\(q-1=2p\)&lt;/span&gt;&lt;sup id="fnref-19"&gt;&lt;a class="footnote-ref" href="#fn-19"&gt;19&lt;/a&gt;&lt;/sup&gt; より &lt;span class="math"&gt;\(q-1\)&lt;/span&gt; の素因数は &lt;span class="math"&gt;\(2\)&lt;/span&gt; と &lt;span class="math"&gt;\(p=(q-1)\div 2\)&lt;/span&gt;
しかなく, 圧倒的に計算量を減らすことができる.
さて, 安全素数は, &lt;span class="math"&gt;\(p\)&lt;/span&gt; と &lt;span class="math"&gt;\(q\)&lt;/span&gt; がともに素数であれば良いので, 
このどちらにもミラーラビン法を実行してしまうのが一番簡単である&lt;sup id="fnref-20"&gt;&lt;a class="footnote-ref" href="#fn-20"&gt;20&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- (略)&lt;/span&gt;

&lt;span class="cm"&gt;{-# INLINE genRndSafePrime #-}&lt;/span&gt;
&lt;span class="nf"&gt;genRndSafePrime&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;BitSize&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;
&lt;span class="nf"&gt;genRndSafePrime&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3071&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2047&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; 
            &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;shiftR&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
                &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.|.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;randomRIO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで, 任意のビット数の安全素数が得られるようになった.
あとは, この安全素数を利用して, &lt;a href="#primitive_root"&gt;原始根の定義, 性質&lt;/a&gt;に従い,
\(g^{q-1}\) で初めて \(g^{n}\equiv 1\pmod{q}\) となる &lt;span class="math"&gt;\(g\)&lt;/span&gt; を選べば良いわけであるが, 
その一連の手順としては, いま安全素数 &lt;span class="math"&gt;\(q\)&lt;/span&gt;&amp;nbsp;があって&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意の \(2\leq g\leq q-2\) を選ぶ(当然, &lt;span class="math"&gt;\(1\)&lt;/span&gt; と &lt;span class="math"&gt;\(p-1\)&lt;/span&gt; は\(g^2\equiv 1\pmod{q}\)&amp;nbsp;となるから).&lt;/li&gt;
&lt;li&gt;\(g^{(q-1)/2}\not\equiv 1\pmod{q}\) を満たすか判定する. これを満たせば &lt;span class="math"&gt;\(g\)&lt;/span&gt; は &lt;span class="math"&gt;\(q\)&lt;/span&gt; の原始根である. そうでなければ 1&amp;nbsp;へ戻る.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というように探索することができる.
このとき, 離散対数に対する耐性, すなわちセキュリティの強度に関して, 
この &lt;span class="math"&gt;\(g\)&lt;/span&gt; はとくに関与しないため, 通常小さい原始根から探し出せば良いことになる. 
すると, 次のようにして,&amp;nbsp;最小の原始根が得られる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;miller&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kt"&gt;Compiling&lt;/span&gt; &lt;span class="kt"&gt;Main&lt;/span&gt;             &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;miller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpreted&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="err"&gt;loaded.&lt;/span&gt;
&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootFromSafePrime&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Bits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;rootFromSafePrime&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;millerRabin&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;
&lt;span class="nf"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;鍵と暗号文の生成&lt;/h4&gt;
&lt;p&gt;上で述べた手順のまま実装できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;PublicKey&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;PrivateKey&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Keys&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PublicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;PrivateKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Cryptogram&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;genKeys&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Keys&lt;/span&gt;
&lt;span class="nf"&gt;genKeys&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;randomRIO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;encode&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;PublicKey&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Cryptogram&lt;/span&gt;
&lt;span class="nf"&gt;encode&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;plain&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; 
        &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;:[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInteger&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; 
            &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toInteger&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;randomRIO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxBound&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;plain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;暗号文の復号&lt;/h4&gt;
&lt;p&gt;復号に関しても, 上の手順のまま実装するだけであるが,&amp;nbsp;モジュラ逆数を得るために拡張ユークリッドの互除法を使うのでそれについて説明する.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(GF(p)\)&lt;/span&gt; は体の公理より乗法について可換群となっており,
逆元が存在するはずだから, &lt;span class="math"&gt;\(^\exists n\in GF(p)\)&lt;/span&gt; に対する逆元を &lt;span class="math"&gt;\(n^{-1}=x\in GF(p)\)&lt;/span&gt; とおける.
&lt;span class="math"&gt;\(GF(p)\)&lt;/span&gt; の単位元を考えれば, この \(n\) と \(x\) の関係は, 
\(nx\equiv 1\pmod{m}\) という式で表せる.
この式は勿論, 合同の定義からして, &lt;span class="math"&gt;\(k\)&lt;/span&gt; をある整数としたとき 
\(nx-1=mk\) と等価であることがいえる. これを都合の良い形に移行すると, 
\(nx-mk=1\). いま知りたいのは, 逆数である &lt;span class="math"&gt;\(x\)&lt;/span&gt; だ. ここで, 拡張ユークリッドの互除法を使う.&amp;nbsp;拡張ユークリッドの互除法は, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;拡張ユークリッドの互除法&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body" style="overflow:scroll"&gt;
&lt;a href="#euclidean"&gt;ユークリッドの互除法&lt;/a&gt;で求まる &amp;#92;(\gcd(a,b)&amp;#92;) に加え, &amp;#92;[
ax+by=\gcd(a,b)
&amp;#92;] (ベズーの等式) が成り立つ &amp;#92;(a,\ b&amp;#92;) のベズー係数 &amp;#92;(x,\ y&amp;#92;) をも同時に求める.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;アルゴリズムである. 
いまの問題をこの式に当てはめると, \(nx-mk=\gcd(n,m)\) となる.
&lt;a href="#genencanddec"&gt;暗号の生成と解読&lt;/a&gt;の内容のうち例として用いた値,
&lt;span class="math"&gt;\(n=10,\ m=97\)&lt;/span&gt; を入力として, まず一般解を導いてみる.
いま &lt;span class="math"&gt;\(n,\ m\)&lt;/span&gt; に対して&lt;a href="#euclidean"&gt;ユークリッドの互除法&lt;/a&gt;を行うと,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
97&amp;amp;=&amp;amp;10\cdot 9+7&amp;amp;\Leftrightarrow &amp;amp;7&amp;amp;=&amp;amp;97-10\cdot 9\label{eq:ex1}\tag{6}\\\
10&amp;amp;=&amp;amp;7+3&amp;amp;\Leftrightarrow &amp;amp;3&amp;amp;=&amp;amp;10-7\label{eq:ex2}\tag{7}\\\
7&amp;amp;=&amp;amp;3\cdot 2+1&amp;amp;\Leftrightarrow &amp;amp;1&amp;amp;=&amp;amp;7-3\cdot 2\label{eq:ex3}\tag{8}
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
より \[10x+97(-k)=1\] と表せる. こうして見るとわかるように, これは単なる &lt;span class="math"&gt;\(1\)&lt;/span&gt; 次不定方程式だ.
&lt;span class="math"&gt;\(1\)&lt;/span&gt; 次不定方程式は, \(\gcd(a,b)=d\) としたとき \(d=1\) ならば解がある.
また, \(d\gt 1,\ d\mid c\) でも解がある. 
なぜならば, \(d=\gcd(a,b)\) のときは&lt;a href="#euclidean"&gt;ユークリッドの互除法&lt;/a&gt;で解が構成できたし,
\(d\gt 1,\ d\mid c\) ならば &lt;span class="math"&gt;\(d\)&lt;/span&gt; 倍してやれば良いからだ.
逆に \(d\not\mid c\) ならば, その &lt;span class="math"&gt;\(1\)&lt;/span&gt; 次不定方程式は不能となる.
いま述べた例の場合,&amp;nbsp;解は存在して,&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lclclcl}
1&amp;amp;=&amp;amp;\eqref{eq:ex3}&amp;amp;=&amp;amp;7-3\cdot 2\\\
1&amp;amp;=&amp;amp;7-\eqref{eq:ex2}\cdot 2&amp;amp;=&amp;amp;7-(10-7)\cdot 2&amp;amp;=&amp;amp;7\cdot3 - 10\cdot 2\\\
1&amp;amp;=&amp;amp;\eqref{eq:ex1}\cdot 3-10\cdot 2&amp;amp;=&amp;amp;(97-10\cdot 9)\cdot 3-10\cdot 2&amp;amp;=&amp;amp;97\cdot 3-10\cdot 29 
\end{array}&lt;/div&gt;
&lt;p&gt;
よって, 特別解 \(x=-29,\ k=-3\) が求まった. 
次に, この一般解を求める. いま求めた \(x,\ k\) を代入すると &lt;span class="math"&gt;\(10(-29)+97(3)=1\)&lt;/span&gt;.&amp;nbsp;これを元の式から引くと,&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{rr}
&amp;amp; 10x &amp;amp;+ &amp;amp;97(-k) &amp;amp;= 1 \\\
-)&amp;amp;10(-29) &amp;amp;+ &amp;amp;97(3) &amp;amp;= 1
\\\hline
&amp;amp;10(x+29)&amp;amp;+&amp;amp;97(-k-3)&amp;amp;=0
\end{array}&lt;/div&gt;
&lt;p&gt;で, 変形すると &lt;span class="math"&gt;\(10(x+29)=-97(-k-3)\)&lt;/span&gt; と表せる. 
ここで, 先のユークリッドの互除法により &lt;span class="math"&gt;\(\gcd(10,97)=1\)&lt;/span&gt; であることがわかっているから, 
&lt;span class="math"&gt;\(x+29=97n\ (n\in\mathbb{Z})\)&lt;/span&gt; と表すことができることがわかる.
よって, &lt;span class="math"&gt;\(x=97n-29,\ k=10n-3\)&lt;/span&gt; である. 実際に &lt;span class="math"&gt;\(n=1\)&lt;/span&gt; とすると, &lt;span class="math"&gt;\(x=68\)&lt;/span&gt; となり, これは
先に示した復号化におけるモジュラ逆数の演算例,
&lt;span class="math"&gt;\(q\equiv \dfrac{1}{10}\equiv 68\pmod{97}\)&lt;/span&gt;&amp;nbsp;と整合であることがわかる.&lt;/p&gt;
&lt;p&gt;ここで, いまやった一連の作業を一般化しておく. この計算が &lt;span class="math"&gt;\((s+1)\)&lt;/span&gt;&amp;nbsp;回で終わったとする.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{eqnarray}
&amp;amp;r_1&amp;amp;=&amp;amp;a-bq_1\label{eq:nineth}\tag{9}\\\
&amp;amp;r_2&amp;amp;=&amp;amp;b-r_1q_2\label{eq:tenth}\tag{10}\\\
&amp;amp;r_3&amp;amp;=&amp;amp;r_1-r_2q_3\label{eq:eleventh}\tag{11}\\\
&amp;amp;\cdots &amp;amp; &amp;amp; \cdots \\\
&amp;amp;r_i&amp;amp;=&amp;amp;r_{i-2}-r_{i-1}q_i\label{eq:twelveth}\tag{i}\\\
&amp;amp;\cdots &amp;amp; &amp;amp; \cdots \\\
&amp;amp;r_{s-1}&amp;amp;=&amp;amp;r_{s-3}-r_{s-2}q_{s-1}\\\
&amp;amp;d&amp;amp;=&amp;amp;r_{s-2}-r_{s-1}q_s
\end{eqnarray}&lt;/div&gt;
&lt;p&gt;
よって \(r_i=x_ia+y_ib\) として \(x_s,\ y_s\) を求めればよいこととなる.
まず, \(r_i=a-bq_i\) から \(x_1=1,\ y_1=-q_1\) について, \(\eqref{eq:nineth}\)
を \(\eqref{eq:tenth}\) に代入し \[r_2=b-(a-bq_1)q_2=-aq_2+b(1+q_1q_2)\] とする.
ここで \(x_2=-q_2,\ y_2=1+q_1 q_2\) を初期条件とする.
一般に \(r_i\) が \(a,\ b\) で表せるとしたとき \(r_i=x_i a+y_i b\) と表せるから
\(x_i,\ y_i\)&amp;nbsp;の漸化式を次のようにおくことができる.&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lcl}
r_{i-2}&amp;amp;=&amp;amp;x_{i-2}a+y_{i-2}b \\\
r_{i-1}&amp;amp;=&amp;amp;x_{i-1}a+y_{i-1}b \\\
r_i&amp;amp;=&amp;amp;x_i a+y_i b
\end{array}&lt;/div&gt;
&lt;p&gt;これらを \(\eqref{eq:twelveth}\) に代入すると,
\[x_i a+y_i b=x_{i-2}a+y_{i-2}b-(x_{i-1}a+y_{i-1}b)q_i\]
両辺の \(a,\ b\)&amp;nbsp;の係数を比較すると,&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{lcl}
x_i&amp;amp;=&amp;amp;x_{i-2}-x_{i-1}q_i\ \left(i\geq 3\right) \\\
y_{i}&amp;amp;=&amp;amp;y_{i-2} - y_{i-1}q_i
\end{array}&lt;/div&gt;
&lt;p&gt;よって, いまのように順に \(x_3,\ x_4,\ \cdots,\ y_3,\ y_4,\cdots\) と計算していけば
&lt;span class="math"&gt;\(d\)&lt;/span&gt; の表示式である &lt;span class="math"&gt;\(d=xa+yb\)&lt;/span&gt; の &lt;span class="math"&gt;\(x\)&lt;/span&gt; と &lt;span class="math"&gt;\(y\)&lt;/span&gt; が求まる.
&lt;a href="#euclidean"&gt;ユークリッドの互除法&lt;/a&gt;の最後では, 
必ず \(r_n-1=r_n+q_{n+1} + 0 = r_n\) となるから, これを停止条件とし,&amp;nbsp;次のように実装できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integral&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;quotRem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この実装と同時に,&amp;nbsp;モジュラ逆数の計算関数を次のように実装できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modInv&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integral&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;modInv&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;gcdExt&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;modInv&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとは上の手順に従って,&amp;nbsp;次のように復号関数が実装できる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Keys&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Cryptogram&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;decode&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;decode&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;span class="nf"&gt;decode&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;modInv&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modExp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
     &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;実行&lt;/h4&gt;
&lt;p&gt;最後に, ここまでで作ったモジュールをロードして, 暗号化,&amp;nbsp;復号化を実行してみる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Lib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Environment&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Lib&lt;/span&gt; &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;genRndSafePrime&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Lib&lt;/span&gt; &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prikey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;genKeys&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;rootFromSafePrime&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Lib&lt;/span&gt; &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prikey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="n"&gt;pubkey&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="kt"&gt;Lib&lt;/span&gt; &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;roki&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;roki&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;うまくいっているようだ. なお,&amp;nbsp;すべての実装やテストコードは,&lt;/p&gt;
&lt;p style="text-align: center;"&gt;
&lt;i class="fab fa-github" style="font-size: large; margin-right: 5px;"&gt;&lt;/i&gt;
&lt;a href="https://github.com/falgon/ElgamalEncryptionHs" name="impl"&gt;falgon/ElgamalEncryptionHs - The rustic implementation of ElGamal encryption encoder and its&amp;nbsp;decoder.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;にて公開している.&lt;/p&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mathforum.org/library/drmath/view/60779.html"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Primitive Elements vs. Generators&amp;#8221;&lt;/a&gt; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;伊東利哉, 辻井 重男 (1989)「&lt;a href="https://ipsj.ixsq.nii.ac.jp/ej/index.php?active_action=repository_view_main_item_detail&amp;amp;page_id=13&amp;amp;block_id=8&amp;amp;item_id=32713"&gt;有限体における原始根の生成アルゴリズム&lt;/a&gt;」 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;von zur Gathen, Joachim; Shparlinski, Igor (1998), &lt;a class="disabled" name="ref1"&gt;&amp;#8220;Orders of Gauss periods in finite fields&amp;#8221;&lt;/a&gt;, Applicable Algebra in Engineering, Communication and&amp;nbsp;Computing&lt;/li&gt;
&lt;li&gt;Robbins, Neville (2006), &lt;a class="disabled" name="ref2"&gt;Beginning Number Theory&lt;/a&gt;, Jones &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Bartlett Learning, &lt;span class="caps"&gt;ISBN&lt;/span&gt;&amp;nbsp;978-0-7637-3768-9. &lt;/li&gt;
&lt;li&gt;「&lt;a name="ref4" href="https://mathtrain.jp/galoisfield"&gt;有限体（ガロア体）の基本的な話&lt;/a&gt;」 2018 年 6 月 29&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a name="ref5" href="https://mathtrain.jp/phi"&gt;オイラーのファイ関数のイメージと性質&lt;/a&gt;」 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;Andreas V. Meier (2005), &amp;#8220;&lt;a href="https://wwwmayr.in.tum.de/konferenzen/Jass05/courses/1/papers/meier_paper.pdf"&gt;The ElGamal Cryptosystem&lt;/a&gt;&amp;#8221; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref6" href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf"&gt;&lt;span class="caps"&gt;FIPS&lt;/span&gt; &lt;span class="caps"&gt;PUB&lt;/span&gt; 186-4 Digital Signature Standard (&lt;span class="caps"&gt;DSS&lt;/span&gt;)&amp;#8221;&lt;/a&gt; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref7" href="https://crypto.stackexchange.com/a/79"&gt;How can I generate large prime numbers for &lt;span class="caps"&gt;RSA&lt;/span&gt;?&lt;/a&gt;&amp;#8221; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref8" href="https://en.wikipedia.org/w/index.php?title=Miller%E2%80%93Rabin_primality_test&amp;oldid=832585246"&gt;Miller–Rabin primality test&lt;/a&gt;&amp;#8221; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;「&lt;a name="ref9" href="https://lupus.is.kochi-u.ac.jp/shiota/misc/field/FiniteField.html"&gt;有限体― 塩田研一覚書帳 ―」&lt;/a&gt;」2018 年 6 月 27&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;a name="ref10" href="http://joye.site88.net/papers/JP06pgen.pdf"&gt;Fast Generation of Prime Numbers on Portable Devices: An Update&lt;/a&gt;&amp;#8221; 2018 年 7 月 13&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;既約多項式を使うと &lt;span class="math"&gt;\(p\)&lt;/span&gt; が素数でなくても(&lt;span class="math"&gt;\(p\)&lt;/span&gt; が位数の素数のべき乗であれば)構成できるが, 本エントリの主題と大きく逸れてしまうため, とくに触れない.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;言葉の&lt;a href="#ref4"&gt;参照&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;これに関しては, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/09/arithmeticFunction/"&gt;数論的関数の用語と例&lt;/a&gt;で説明している.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="#ref5"&gt;参照&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;エルガマル暗号では素数を扱うこととなるので, 本エントリでは, フェルマーの小定理の一般形であるオイラーの定理(&lt;span class="math"&gt;\(a^{\phi(n)}\equiv 1\pmod{n}\ \left(\gcd(a, n) = 1, a,n \in \mathbb{Z}^{+}\right)\)&lt;/span&gt;)に関しては特に触れていないが, 後に&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/25/EulersAndCarmichelsTheorem/"&gt;別のエントリ&lt;/a&gt;として取り上げた.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;この「位数」という単語にはいくつか用例があるので注意. 「&lt;i&gt;群には、群の位数と、元の位数の２通りがあります。 群の位数は、体と同じく、要素の個数を表しますが、 元 &lt;span class="math"&gt;\(x\)&lt;/span&gt; の位数とは &lt;span class="math"&gt;\(x^n=単位元 e\)&lt;/span&gt; となる最小の自然数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; のことです。 元 &lt;span class="math"&gt;\(x\)&lt;/span&gt; の位数が &lt;span class="math"&gt;\(n\)&lt;/span&gt; ならば、&lt;span class="math"&gt;\(x\)&lt;/span&gt; の生成する巡回部分群 &lt;span class="math"&gt;\(&amp;lt; x &amp;gt; = { e, x, x2, ... }\)&lt;/span&gt; の群位数も &lt;span class="math"&gt;\(n\)&lt;/span&gt; になることから同じ用語を使っているようです。&lt;/i&gt;」&lt;a href="#ref9"&gt;有限体― 塩田研一覚書帳 ―&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="#thiscode"&gt;このコード&lt;/a&gt;では, 先頭から 100 個の素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; を位数とした &lt;span class="math"&gt;\(GF(p)\)&lt;/span&gt; の原始元を求めているが, やはり大きな素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; に対しては, とくに時間がかかる. このような &lt;span class="math"&gt;\(a\)&lt;/span&gt; を法とする原始元を計算する単純な一般式は知られていない(参照1: &lt;a href="#ref1"&gt;von zur Gathen &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Shparlinski 1998&lt;/a&gt;, pp. 15–24: &lt;i&gt;&amp;#8220;One of the most important unsolved problems in the theory of finite fields is designing a fast algorithm to construct primitive roots.&amp;#8221;&lt;/i&gt; 参照2: &lt;a href="#ref2"&gt;Robbins 2006, p. 159&lt;/a&gt;: &lt;i&gt;&amp;#8220;There is no convenient formula for computing [the least primitive root].&amp;#8221;&lt;/i&gt;)が, より高速に見つけ出す方法として確率的アルゴリズムがいくつか知られている.&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;図は python, matplotlib 等で&lt;a href="https://gist.github.com/falgon/97dc3c1a399422a3ab2818d01b70a14b"&gt;生成&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;しかしながら, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%206月/08/qft/"&gt;量子フーリエ変換を用いた探索&lt;/a&gt;は, この離散対数問題に対しても有効的な解決手段である.&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-10"&gt;
&lt;p&gt;&lt;a href="#ref7"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;How can I generate large prime numbers for &lt;span class="caps"&gt;RSA&lt;/span&gt;?&amp;#8221;&lt;/a&gt;, &lt;i&gt;&amp;#8220;The standard way to generate big prime numbers is to take a preselected random number of the desired length, apply a Fermat test (best with the base 2 as it can be optimized for speed) and then to apply a certain number of Miller-Rabin tests (depending on the length and the allowed error rate like &lt;span class="math"&gt;\(2^{−100}\)&lt;/span&gt;) to get a number which is very probably a prime number.&amp;#8221;&lt;/i&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-10" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-11"&gt;
&lt;p&gt;この「対偶」は, 全称命題への対偶であることに留意.&amp;#160;&lt;a class="footnote-backref" href="#fnref-11" title="Jump back to footnote 11 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-12"&gt;
&lt;p&gt;素朴な実装であることに注意. arithmoi パッケージの&lt;code&gt;isFermatPP&lt;/code&gt;を使うことも考えたが(これを使うと &lt;span class="math"&gt;\(20\)&lt;/span&gt; 秒ほどで &lt;span class="math"&gt;\(200\)&lt;/span&gt; 個の偽素数が得られた), 計算量を度外視すれば, これは単純に実装できるので書いてしまった. ベキ乗剰余の計算は, 取り敢えず繰り返し二乗法にした.&amp;#160;&lt;a class="footnote-backref" href="#fnref-12" title="Jump back to footnote 12 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-13"&gt;
&lt;p&gt;&lt;a href="#ref8"&gt;Miller–Rabin primality test&lt;/a&gt;, (snip) &lt;i&gt;then n is not prime. We call a a witness for the compositeness of n (sometimes misleadingly called a strong witness, although it is a certain proof of this fact). Otherwise a is called a strong liar, and n is a strong probable prime to base a.&lt;/i&gt; (snip) &lt;i&gt;Note that Miller-Rabin pseudoprimes are called strong pseudoprimes.&lt;/i&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-13" title="Jump back to footnote 13 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-14"&gt;
&lt;p&gt;&lt;a href="#ref8"&gt;Miller-Rabin primality test&lt;/a&gt;, (snip) &lt;i&gt;Every odd composite n has many witnesses a, however, no simple way of generating such an a is known. &lt;/i&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-14" title="Jump back to footnote 14 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-15"&gt;
&lt;p&gt;&lt;a href="#ref8"&gt;Miller-Rabin primality test&lt;/a&gt;, (snip) &lt;i&gt;When the number n to be tested is small, trying all \(a \lt 2\left(\ln n\right)^2\) is not necessary, as much smaller sets of potential witnesses are known to suffice&lt;/i&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-15" title="Jump back to footnote 15 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-16"&gt;
&lt;p&gt;この値は, &lt;a href="#ref6"&gt;&lt;span class="caps"&gt;FIPS&lt;/span&gt; &lt;span class="caps"&gt;PUB&lt;/span&gt; 186-4 &lt;span class="caps"&gt;DSS&lt;/span&gt;&lt;/a&gt;/&lt;span class="caps"&gt;APPENDIX&lt;/span&gt;/C.3 の &amp;#8220;Minimum number of Miller-Rabin iterations for &lt;span class="caps"&gt;DSA&lt;/span&gt;&amp;#8221; を参照. このテーブルに関する裏付けの参考として&lt;a href="https://stackoverflow.com/a/6330138/8345717"&gt;この回答&lt;/a&gt;を参照.&amp;#160;&lt;a class="footnote-backref" href="#fnref-16" title="Jump back to footnote 16 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-17"&gt;
&lt;p&gt;Haskell のライブラリ, Math.NumberTheory.Primes.Testing の&lt;code&gt;millerRabinV&lt;/code&gt;は, 内部で libgmp を呼び出しているようだ.&amp;#160;&lt;a class="footnote-backref" href="#fnref-17" title="Jump back to footnote 17 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-18"&gt;
&lt;p&gt;より一般的には, \(d\) 準安全素数というものもあり, その場合素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; に対して \(\left(p-1\right)\div 2^d\) が素数となる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-18" title="Jump back to footnote 18 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-19"&gt;
&lt;p&gt;この場合, &lt;span class="math"&gt;\(2p\)&lt;/span&gt; は準素数といえる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-19" title="Jump back to footnote 19 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-20"&gt;
&lt;p&gt;この方法よりも効率の良い方法として, &lt;a href="#ref10"&gt;参考文献&lt;/a&gt;の &amp;#8220;4.2 Generating safe and quasi-safe primes&amp;#8221; に言及がある. また, 既知の部分群の生成元を探す方法もある. &lt;span class="caps"&gt;DSA&lt;/span&gt; はこの方法を採用しているとのこと: &lt;a href="#ref6"&gt;4 The Digital Signature Algorithm (&lt;span class="caps"&gt;DSA&lt;/span&gt;)&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-20" title="Jump back to footnote 20 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Elementary number theory"></category><category term="Group theory"></category><category term="Haskell"></category><category term="Python"></category></entry><entry><title>数論的関数の用語と例</title><link href="https://falgon.github.io/roki.log/posts/2018/%207%E6%9C%88/09/arithmeticFunction/" rel="alternate"></link><published>2018-07-09T22:50:00+09:00</published><updated>2018-07-09T22:50:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-07-09:/roki.log/posts/2018/ 7月/09/arithmeticFunction/</id><summary type="html">&lt;p&gt;数論的関数の用語,&amp;nbsp;例のまとめ&lt;/p&gt;</summary><content type="html">&lt;p&gt;数論的関数の用語やその関連について整理したかったので書くことにした.&lt;/p&gt;
&lt;h3&gt;数論的関数&lt;/h3&gt;
&lt;p&gt;数論的関数は, 定義域が正整数 &lt;span class="math"&gt;\(\mathbb{Z}^{+}\)&lt;/span&gt; である複素数を値にもつ関数である.&amp;nbsp;すなわち&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;数論的関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(\mathbb{Z}^{+}&amp;#92;) から複素数 &amp;#92;(\mathbb{C}&amp;#92;) への関数
  &amp;#92;(\mathbb{Z}^{+}\to\mathbb{C}&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をいう.&lt;/p&gt;
&lt;h3&gt;加法的関数&lt;/h3&gt;
&lt;p&gt;加法的関数は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;加法的関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(m\in\mathbb{Z}^{+}, n\in\mathbb{Z}^{+}, \gcd(m,n)=1&amp;#92;) について
  &amp;#92;(f(mn)=f(m)+f(n)&amp;#92;) を満たす数論的関数 &amp;#92;(f(x)&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をいう.&lt;/p&gt;
&lt;p&gt;e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; の異なる素因数の総数 \(:= \omega (n)\). \(\omega(4)=1, \omega(20)=\omega(2^2\cdot 5)=2, \omega(2018)=\omega(2\cdot&amp;nbsp;1009)=2\)&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; の異なる素因数の和 \(:= \text{sopf}(n)\).&amp;nbsp;\(\text{sopf}(1)=0,\text{sopf}(4)=2,\text{sopf}(20)=2+5=7,\text{sopf}(2018)=1011\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;完全加法的関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(^\forall m\in\mathbb{Z}^{+}, ^\forall n\in\mathbb{Z}^{+}&amp;#92;) について
  &amp;#92;(f(mn)=f(m)+f(n)&amp;#92;) を満たす加法的関数 &amp;#92;(f(x)&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;を完全加法的関数という.&lt;/p&gt;
&lt;p&gt;e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; の重複も含めた素因数の総数 \(:= \Omega(n)\). \(\Omega(1)=0, \Omega(20)=\Omega(2\cdot 2\cdot 5)=3, \Omega(2018)=\Omega(2\cdot&amp;nbsp;1009)=2\)&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; の重複も含めた素因数の和 \(:= \text{sopfr}(n)\). \(\text{sopfr}(4)=2+2=4,\text{sopfr}(20)=\text{sopfr}(2^2\cdot 5)=2+2+5=9,\
\text{sopfr}(2018)=\text{sopfr}(2\cdot&amp;nbsp;1009)=2+1009=1011\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乗法的関数&lt;/h3&gt;
&lt;p&gt;乗法的関数は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;乗法的関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(m\in\mathbb{Z}^{+}, n\in\mathbb{Z}^{+}, \gcd(m,n)=1&amp;#92;) について
  &amp;#92;(f(mn)=f(m)f(n)&amp;#92;) を満たす数論的関数 &amp;#92;(f(x)&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;をいう. 乗法的関数は, 任意の加法的関数 &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt; を用いて簡単に構成することができる.
たとえば, 乗法的関数 &lt;span class="math"&gt;\(g(n)\)&lt;/span&gt; を指数法則より &lt;span class="math"&gt;\(g(n)=2^{f(n)}\)&lt;/span&gt; とおくことができる.
また, &lt;span class="math"&gt;\(2\)&lt;/span&gt; つの乗法的関数 &lt;span class="math"&gt;\(f(n)\)&lt;/span&gt; と &lt;span class="math"&gt;\(g(n)\)&lt;/span&gt; をつかって, &lt;span class="math"&gt;\(h(n)=f(n)g(n)\)&lt;/span&gt; という乗法的関数をおくことができる.&amp;nbsp;より一般化すると,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading prop"&gt;&lt;a class="disabled"&gt;命題1&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;(f(n)&amp;#92;) が乗法的関数, 和 &amp;#92;(\displaystyle\sum_{d\mid n}&amp;#92;) で &amp;#92;(d&amp;#92;) が &amp;#92;(n&amp;#92;) のすべての約数にわたるとき, &amp;#92;(\displaystyle g(n)=\sum_{d\mid n}f(d)&amp;#92;) は乗法的関数であるといえる. 
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;一応これを証明する.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;証明1&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;\(n=n_1n_2,\ \gcd(n_1,n_2)=1\) とすると,
&lt;span class="math"&gt;\(n\)&lt;/span&gt; の約数 &lt;span class="math"&gt;\(d\)&lt;/span&gt; は \(n_1\) の約数 \(d_1\) と, \(n_2\) の約数 \(d_2\)
との積で尽くされる.
すなわち \(\gcd(d_1, d_2)=1\)&amp;nbsp;だから
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}\displaystyle
g(n)&amp;amp;=\sum_{d\mid n}f(d)
\\&amp;amp;=\sum_{d_1\mid n_1,\ d_2\mid n_2}f(d_1,d_2)
\\&amp;amp;=\sum_{d_1\mid n_1,\ d_2\mid n_2}f(d_1)f(d_2)
\\&amp;amp;=\sum_{d_1\mid n_1}f(d_1)\sum_{d_2\mid n_2}f(d_2)
\\&amp;amp;=g(n_1)g(n_2)
\end{align}&lt;/div&gt;
&lt;p&gt; \(\square\)&lt;/p&gt;
&lt;p&gt;e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(f(n):=\gcd(n,k)\)&lt;/span&gt;. &lt;span class="math"&gt;\(k=2\)&lt;/span&gt; としたとき, &lt;span class="math"&gt;\(f(15)=f(3)f(5)=1,\&amp;nbsp;f(24)=f(3)f(8)=2\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;指数法則: &lt;span class="math"&gt;\(k\in\mathbb{Z}\)&lt;/span&gt; に対する &lt;span class="math"&gt;\(n^k\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;メビウス関数 \(:= \mu(n)\). \(\mu(18)=\mu(2\cdot 3^2)=0,\ \mu(6)=\mu(2\cdot 3)=1,&amp;nbsp;\mu(7)=-1\).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://falgon.github.io/roki.log/posts/2018/%207月/13/elgamalEncryption/#totientf"&gt;オイラーのトーシェント関数&lt;/a&gt; \(:= \phi(n)\). \(\phi(6)=\phi(3)\cdot\phi(2)=2,\&amp;nbsp;\phi(28)=\phi(4)\cdot\phi(7)=12\).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;完全乗法的関数&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
  &amp;#92;(^\forall m\in\mathbb{Z}^{+}, ^\forall n\in\mathbb{Z}^{+}&amp;#92;) について
  &amp;#92;(f(mn)=f(m)f(n)&amp;#92;) を満たす乗法的関数 &amp;#92;(f(x)&amp;#92;)
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;を完全乗法的関数という&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ディリクレ級数 &lt;span class="math"&gt;\(a(n)\)&lt;/span&gt; におけるディリクレの L 関数: \(\displaystyle L(s,a)=\sum_{n=1}^{\infty}\dfrac{a(n)}{n^s}=\prod_{p}\left(1-\dfrac{a(p)}{p^s}\right)^{-1},\).&amp;nbsp;自然数全体の総和が素数全体の積に等しい.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/w/index.php?title=Completely_multiplicative_function&amp;amp;oldid=825869650"&gt;Completely multiplicative function&lt;/a&gt; 2018 年 7 月 9&amp;nbsp;日アクセス.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;代数学的な定義でいえば, モノイド(&lt;span class="math"&gt;\(\mathbb{Z}^{+},\cdot\)&lt;/span&gt;)から他のモノイドまでの準同型写像である.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category></entry><entry><title>De Bruijn Sequence</title><link href="https://falgon.github.io/roki.log/posts/2018/%206%E6%9C%88/22/debruijnseq/" rel="alternate"></link><published>2018-06-22T22:35:00+09:00</published><updated>2018-06-22T22:35:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-06-22:/roki.log/posts/2018/ 6月/22/debruijnseq/</id><summary type="html">&lt;p&gt;De Bruijn Sequence&amp;nbsp;の概要とその発生について&lt;/p&gt;</summary><content type="html">&lt;p&gt;大学のレポート内で De Bruijn Sequence について書く機会があった.
これまた&lt;a href="https://falgon.github.io/roki.log/posts/2018/%206月/08/qft/"&gt;以前と同じく&lt;/a&gt;, 
折角なのでこちらのブログにも,&amp;nbsp;若干内容を変えつつ載せておくことにした.&lt;/p&gt;
&lt;p&gt;De Bruijn Sequence は, オランダ人の数学者 Nicolaas de Bruijn に因んで命名された系列で, 特定の長さのすべての組み合わせを含む系列である. 
次数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; の &lt;span class="math"&gt;\(k\)&lt;/span&gt; 種類に関する De Bruijn Sequence &lt;span class="math"&gt;\(B\left(k, n\right)\)&lt;/span&gt; は, 長さ &lt;span class="math"&gt;\(n\)&lt;/span&gt; で表現可能なすべての部分列によって構成される.
次元数 &lt;span class="math"&gt;\(2\)&lt;/span&gt; (すなわちバイナリ) の De Bruijn Sequence は &lt;span class="math"&gt;\(B\left(2, n\right)\)&lt;/span&gt; であり, &lt;span class="math"&gt;\(n\)&lt;/span&gt; ビットの固有な部分系列から成る &lt;span class="math"&gt;\(2^n\)&lt;/span&gt; ビット長の系列である.
例えば, &lt;span class="math"&gt;\(B\left(2, 3\right)\)&lt;/span&gt; は \(00011101_{(2)}\) であり &lt;span class="math"&gt;\(n\)&lt;/span&gt; に対する有向グラフが下図&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;のように示される.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;img src="../../../../../images/2018/June/deb_graph1.png"&gt;&lt;/div&gt;

&lt;p&gt;この系列から &lt;span class="math"&gt;\(3\)&lt;/span&gt; ビットずつ取る, または図 1 の有向グラフから &lt;span class="math"&gt;\(B(2, 3)\)&lt;/span&gt; を再構築していくと,&amp;nbsp;次の表で示す部分系列を構成することがわかる.&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table table-bordered table-hover"&gt;&lt;thead&gt;&lt;th&gt;&amp;#92;[B(2,3)&amp;#92;]&lt;/th&gt;&lt;th&gt;&amp;#92;[10\ {\rm進値}&amp;#92;]&lt;/th&gt;&lt;/thead&gt;
&lt;caption id="karnaugh1" style="caption-side: bottom"&gt;&amp;#92;(B(2,3)&amp;#92;) の部分系列&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[\overbrace{000}^{sub\ seq}11101_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[0_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[0\overbrace{001}^{sub\ seq}1101_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[1_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[00\overbrace{011}^{sub\ seq}101_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[3_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[000\overbrace{111}^{sub\ seq}01_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[7_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[0001\overbrace{110}^{sub\ seq}1_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[6_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[{00011\overbrace{101}^{sub\ seq}}_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[5_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[{000111\overbrace{01\underbrace{0}_{cir}}^{sub\ seq}}_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[2_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;#92;[{0001110\overbrace{1\underbrace{00}_{cir}}^{sub\ seq}}_{(2)}&amp;#92;]&lt;/td&gt;&lt;td&gt;&amp;#92;[4_{(10)}&amp;#92;]&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;最後の &lt;span class="math"&gt;\(2\)&lt;/span&gt; つの部分系列は \(00011101_{(2)}\) から &lt;span class="math"&gt;\(3\)&lt;/span&gt; ビットずつとって構成できないが, 系列の初めへ循環していると考えることで,&amp;nbsp;これが成り立つ.&lt;/p&gt;
&lt;p&gt;De Bruijn Sequence は, いくつかのコンピュータアルゴリズムで応用でき, 例えば Number of Training Zero を求める問題も, よく知られた応用例の 1 つである. これは ntz と呼ばれる.
以降, &lt;span class="math"&gt;\(m=n-1\)&lt;/span&gt;, &lt;span class="math"&gt;\(x\)&lt;/span&gt; を &lt;span class="math"&gt;\(8\)&lt;/span&gt; ビットの値, &lt;span class="math"&gt;\(x_i\ \ \left(\left\{i \in \mathbb{Z}\mid 0 &amp;lt; i &amp;lt; 9\right\}\right)\)&lt;/span&gt; を lsb 見た値
&lt;span class="math"&gt;\(x\)&lt;/span&gt; の &lt;span class="math"&gt;\(i\)&lt;/span&gt; 番目のビット値, Number of Training Zero を ntz&amp;nbsp;とする.&lt;/p&gt;
&lt;p&gt;例えば \(x=192_{(10)}\)&amp;nbsp;は&lt;/p&gt;
&lt;div class="math"&gt;$$x=1\overbrace{\overbrace{1}^{x_7}\underbrace{\overbrace{0}^{x_6}00000}_{m}}^{n}$$&lt;/div&gt;
&lt;p&gt;であり, &lt;span class="math"&gt;\(m=6\)&lt;/span&gt;&amp;nbsp;が解である.&lt;/p&gt;
&lt;p&gt;ntz をプログラムで解こうとしたとき,&amp;nbsp;例えば次のような実装がよく知られる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Bits&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Word&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Tuple.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Test.HUnit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;runTestText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;putTextToHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;TestList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~?=&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- | pop counting 8 bit&lt;/span&gt;
&lt;span class="nf"&gt;popcnt8&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;
&lt;span class="nf"&gt;popcnt8&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fol&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fol&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0f&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fol&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x33&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fol&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x55&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="c1"&gt;-- | ntz 8 bit version 1&lt;/span&gt;
&lt;span class="nf"&gt;ntz81&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;
&lt;span class="nf"&gt;ntz81&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;popcnt8&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;negate&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;runTestText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putTextToHandle&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;TestList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ntz81 192: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;~:&lt;/span&gt; &lt;span class="n"&gt;ntz81&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;192&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~?=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;popcnt8&lt;/code&gt;は, 各ビットそのものがその桁で立っているビット数と捉え, 畳み込んでいくことで最終的に立っている全体のビット数を得る関数である. 
&lt;code&gt;ntz81&lt;/code&gt; は, まず lsb から見て一番端で立っているビットを倒し, それまでのビット列を全て立てておく. これを&lt;code&gt;popcnt8&lt;/code&gt;に渡すことで ntz としての役割を果せる.
これはとても有名な方法で, よく最適化された手法であるといえるのだが, De Bruijn Sequence を利用すると, より少ない演算回数で ntz が解ける.
De Bruijn Sequence を利用して ntz を解く方法は, 随分前に&lt;a href="http://d.hatena.ne.jp/siokoshou/20090704#p1"&gt;このブログさん&lt;/a&gt;で丁寧に解説されているので, 
特別ここで改めて詳しく述べる必要はないとは思うが,&amp;nbsp;一応レポート内で書いた内容を載せておく.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(B(2, n)\)&lt;/span&gt; から成る部分系列を元とした集合 &lt;span class="math"&gt;\(X\)&lt;/span&gt; と, 「系列全体からみて, その部分系列を得るにいくつスライドしたか」を元とする集合 &lt;span class="math"&gt;\(Y\)&lt;/span&gt; の写像 &lt;span class="math"&gt;\(f\)&lt;/span&gt; を定める(例: &lt;span class="math"&gt;\(f(000_{(2)}) = 0, f(001_{(2)}) = 1, f(011_{(2)}) = 2, \cdots f(100_{(2)}) = 7\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x\)&lt;/span&gt; のうち一番右端に立っているビットのみを残し, 他を全て倒す(&lt;code&gt;x &amp;amp; -x&lt;/code&gt;). この値は必ず &lt;span class="math"&gt;\(2^i\)&lt;/span&gt; である. これを &lt;span class="math"&gt;\(y\)&lt;/span&gt;&amp;nbsp;とする.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(B(2, n)\)&lt;/span&gt; と &lt;span class="math"&gt;\(y\)&lt;/span&gt; の積を得る(&lt;span class="math"&gt;\(y = 2^i\)&lt;/span&gt; であるから, この演算は系列に対する &lt;span class="math"&gt;\(i\)&lt;/span&gt; ビットの左シフト演算である). これを &lt;span class="math"&gt;\(z_0\)&lt;/span&gt;&amp;nbsp;とする.&lt;/li&gt;
&lt;li&gt;いま, ここまでの演算を &lt;span class="math"&gt;\(s\ (\{s \in \mathbb{Z}\mid s &amp;gt; n, s は 2 の累乗数\})\)&lt;/span&gt; ビットの領域上で行なったとしたとき, &lt;span class="math"&gt;\(z_0\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(s-n\)&lt;/span&gt; ビット左にシフトする(&lt;span class="math"&gt;\(z_0\)&lt;/span&gt; を msb から数えて &lt;span class="math"&gt;\(n\)&lt;/span&gt; ビット分のみが必要であるから, それ以外を除去する). これを &lt;span class="math"&gt;\(z_1\)&lt;/span&gt;&amp;nbsp;とする.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(f(z_1)\)&lt;/span&gt; の値が ntz&amp;nbsp;の解である.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要するに, De Bruijn Sequence の特徴を生かして, ユニークなビット列に紐づく各値をマッピングしておき, 
積がシフト演算と同等となるように調節, いらない値を省いた後にテーブルを引くのである&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;listArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Tuple.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Bits&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Word&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Test.HUnit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;runTestText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;putTextToHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;TestList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~?=&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- | ntz 8 bit version 2&lt;/span&gt;
&lt;span class="nf"&gt;ntz82&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;
&lt;span class="nf"&gt;ntz82&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tb&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;shiftR&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mh"&gt;0x1d&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&amp;amp;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;negate&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;tb&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;runTestText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putTextToHandle&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;TestList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192 ntz: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;~:&lt;/span&gt; &lt;span class="n"&gt;ntz82&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;192&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Word8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~?=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここまでは &lt;span class="math"&gt;\(x\)&lt;/span&gt; が &lt;span class="math"&gt;\(8\)&lt;/span&gt; ビットである前提を置いて述べてきたが, 任意の &lt;span class="math"&gt;\(B(2, n)\)&lt;/span&gt; が求まれば, どのようなビット長のデータに対しても同様にして計算できることがわかる.
これをどのように得るかであるが, ここでは Prefer One algorithm&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt; という比較的単純なアルゴリズムを用いて &lt;span class="math"&gt;\(B(2, n)\)&lt;/span&gt; を得ることとする. 
このアルゴリズムに関する詳細と証明は原文を読んでほしいが, その大雑把な概要だけをここでは述べる. 任意の正整数 &lt;span class="math"&gt;\(n\geq 1\)&lt;/span&gt; について, まず &lt;span class="math"&gt;\(n\)&lt;/span&gt; 個の &lt;span class="math"&gt;\(0\)&lt;/span&gt; を置く.
次に, 最後の &lt;span class="math"&gt;\(n\)&lt;/span&gt; ビットによって形成された部分系列が以前に系列内で生成されていなかった場合, その次のビットに対して &lt;span class="math"&gt;\(1\)&lt;/span&gt; を,
そうでない場合 &lt;span class="math"&gt;\(0\)&lt;/span&gt; を置く. &lt;span class="math"&gt;\(0\)&lt;/span&gt; または &lt;span class="math"&gt;\(1\)&lt;/span&gt; のどちらを置いても, 以前に生成していた部分系列と一致するならば停止する.
下記に示す同アルゴリズムの実装例は, &lt;span class="math"&gt;\(2^3\)&lt;/span&gt; から &lt;span class="math"&gt;\(2^6\)&lt;/span&gt; に対応する De Bruijn Sequence&amp;nbsp;を得ている.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;listArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Tuple.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dupe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapM_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Numeric&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;showHex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;preferOne&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;preferOne&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;yet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;yet&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; 
            &lt;span class="n"&gt;cycle&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;fromEnum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;elems&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;

&lt;span class="nf"&gt;bin2dec&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;bin2dec&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;takeWhile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;iterate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtract&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dupe&lt;/span&gt;

&lt;span class="nf"&gt;somebases&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;somebases&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preferOne&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin2dec&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showHex&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin2dec&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;somebases&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各 &lt;span class="math"&gt;\(B(2, n)\)&lt;/span&gt;&amp;nbsp;が次のように得られる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,1,1,1,0,1&lt;span class="o"&gt;]&lt;/span&gt;,29,1d&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0,1,1,1,1,0,1,1,0,0,1,0,1&lt;span class="o"&gt;]&lt;/span&gt;,3941,f65&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1&lt;span class="o"&gt;]&lt;/span&gt;,131913257,7dcd629&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1&lt;span class="o"&gt;]&lt;/span&gt;,285870213051386505,3f79d71b4cb0a89&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Python, networkx, pyplot で&lt;a href="https://gist.github.com/falgon/a3da8e0fd013f41de62e0d7a0288a66d"&gt;生成&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;本エントリでは Haskell による実装を示しているが, だいぶ以前に C++ で同様の &lt;a href="https://github.com/falgon/SrookCppLibraries/blob/acfad043881d5559f921d547331ba9d5ec1b1d9f/srook/bit/algorithm/ntz.hpp"&gt;ntz を実装した&lt;/a&gt;のであった. この実装は, &lt;a href="https://qiita.com/kazatsuyu/items/38203287c19890a2b7c6"&gt;この Qiita 投稿&lt;/a&gt; の内容と殆ど同じ. C++ では, 簡単なテンプレートメタプログラミングにより, ビット長ごとに必要となるビットマスクや演算を, 同じ関数呼び出しから型ごとに適切に分岐するよう実装できる(Haskell でも, 似たようなことはできる).&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Abbas Alhakim, &amp;#8220;A &lt;span class="caps"&gt;SIMPLE&lt;/span&gt; &lt;span class="caps"&gt;COMBINATORIAL&lt;/span&gt; &lt;span class="caps"&gt;ALGORITHM&lt;/span&gt; &lt;span class="caps"&gt;FOR&lt;/span&gt; &lt;span class="caps"&gt;DE&lt;/span&gt; &lt;span class="caps"&gt;BRUIJN&lt;/span&gt; &lt;span class="caps"&gt;SEQUENCES&lt;/span&gt;&amp;#8221; &lt;a href="https://www.mimuw.edu.pl/~rytter/TEACHING/TEKSTY/PreferOpposite.pdf"&gt;https://www.mimuw.edu.pl/~rytter/&lt;span class="caps"&gt;TEACHING&lt;/span&gt;/&lt;span class="caps"&gt;TEKSTY&lt;/span&gt;/PreferOpposite.pdf&lt;/a&gt; 2018-06-21 アクセス.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Haskell"></category><category term="Python"></category></entry><entry><title>フィボナッチ数列の一般項の導出</title><link href="https://falgon.github.io/roki.log/posts/2018/%205%E6%9C%88/18/fibGeneralTerm/" rel="alternate"></link><published>2018-05-18T19:42:00+09:00</published><updated>2018-05-06T18:28:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-05-18:/roki.log/posts/2018/ 5月/18/fibGeneralTerm/</id><summary type="html">&lt;p&gt;フィボナッチ数列の一般項の導出メモ&lt;/p&gt;</summary><content type="html">&lt;p&gt;フィボナッチ数列の漸化式を次のように置く. \[f_{n+2} = f_{n+1} + f_n\ (n\geq 0)\] ここで, 初項と第二項をそれぞれ \(a_1=1, a_2=1\) とする. 各項を \(f_{n+2}\rightarrow c^2、f_{n+1}\rightarrow c、f_n\rightarrow 1\) と置き換えると \[c^2=c+1\tag{1}\] が得られる. この解は \(c=\dfrac{1\pm{\sqrt{5}}}{2}\) となる. ここで, \(\psi = \dfrac{1-\sqrt{5}}{2}, \phi = \dfrac{1+\sqrt{5}}{2}\) と置く.
フィボナッチ数列の漸化式の特性方程式の解は \((1)\) の解より \(\psi, \phi\)&amp;nbsp;であるから &lt;/p&gt;
&lt;div class="math"&gt;$$f_{n+2}=f_{n+1}+f_{n}\Leftrightarrow\begin{cases}f_{n+2}-\psi f_{n+1}=\phi(f_{n+1}-\psi f_n) \\f_{n+2}-\phi f_{n+1}=\psi(f_{n+1}-\phi f_n)\end{cases}$$&lt;/div&gt;
&lt;p&gt;
と変形できる. いま \(b_n=f_{n+1}-\psi f_n, c_n=f_{n+1}-\phi f_n\)&amp;nbsp;と置くと次の漸化式が得られる.
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{cases}b_{n+1}=\phi b_n\\c_{n+1}=\psi c_n\end{cases}$$&lt;/div&gt;
&lt;p&gt; 
また \(f_1=1, f_2=1\)&amp;nbsp;より &lt;/p&gt;
&lt;div class="math"&gt;$$\begin{cases}b_1=f_2-\psi f_1=1-\psi\\ c_1=f_2-\phi f_1=1-\phi\end{cases}$$&lt;/div&gt;
&lt;p&gt; として, 数列 \(\{b_n\}\) と数列 \(\{c_n\}\) の初項が求まる. 
故に, 数列 \(\{b_n\}\) は初項 \(1-\psi\), 公比 \(\phi\) の等比数列であるから, \(b_n = (1-\psi)\phi^{n-1}\), 数列 \(\{c_n\}\) は初項 \(1-\phi\), 公比 \(\psi\) の等比数列であるから, \(c_n = (1-\phi)\psi^{n-1}\) といえる. さらに \(b_n, c_n\)&amp;nbsp;を上記の定義より代入すると, &lt;/p&gt;
&lt;div class="math"&gt;$$\begin{cases} \phi^n=b_n=f_{n+1}-\psi f_n\\\psi^n=c_n=f_{n+1}-\phi f_n\end{cases}$$&lt;/div&gt;
&lt;p&gt; が得られる. 上の式から下の式を引くと \(\phi^n-\psi^n=-\psi f_n+\phi f_n=(\phi-\psi)f_n\) であるから, 一般項 \(f_n\) は \[f_n=\dfrac{1}{\phi-\psi}\left( \phi^n-\psi^n\right)\]
\(\therefore\) \(\psi, \phi\)&amp;nbsp;を上記の定義より代入すると, &lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;フィボナッチ数列の一般項&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;[f_n=\dfrac{1}{\sqrt{5}}\left\{\left(\dfrac{1+\sqrt{5}}{2}\right)^{n}-\left(\dfrac{1-\sqrt{5}}{2}\right)^{n} \right\}&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;となり,&amp;nbsp;フィボナッチ数列の一般項が求まった.&lt;/p&gt;
&lt;p&gt;確認.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getStdRandom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;randomR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Test.HUnit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;TestList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~?=&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;runTestText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;putTextToHandle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;fibGeneralTerm&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;
&lt;span class="nf"&gt;fibGeneralTerm&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phi&lt;/span&gt; &lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;mkTestList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Test&lt;/span&gt;
&lt;span class="nf"&gt;mkTestList&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TestList&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; 
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; 
                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getStdRandom&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;randomR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fib test: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, value: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;~:&lt;/span&gt; &lt;span class="n"&gt;fibGeneralTerm&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;~?=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mkTestList&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runTestText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putTextToHandle&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="n"&gt;Tried&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="n"&gt;Errors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;Failures&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上で導出した式の第二項の最大値は \(\displaystyle \dfrac{1}{\sqrt{5}} \approx 0.447\) が最大であることから, 正確な整数値を求めるのには第二項を略してしまって \(0.5\) を加え, 
床関数を作用させれば十分である&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&amp;nbsp;上のコードでもそれを利用している. &lt;/p&gt;
&lt;div class="math"&gt;$$f_n=\left\lfloor \dfrac{\phi^{n}}{\sqrt{5}}+\dfrac{1}{2} \right\rfloor$$&lt;/div&gt;
&lt;p&gt;ただし, 計算処理内で浮動小数点数による加算を用いていることから, 大きな値になればなるほど絶対誤差が生じていくことになる. 今回の実行結果も, たまたまその誤差が埋もれただけであって&lt;code&gt;fibGeneralTerm&lt;/code&gt;の実行結果に対する厳密な信憑性はない.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;参考: &lt;a href="https://ja.wikipedia.org/w/index.php?title=%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0&amp;amp;oldid=68278253#.E4.B8.80.E8.88.AC.E9.A0.85"&gt;ウィキペディア - フィボナッチ数&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Haskell"></category></entry><entry><title>ベジェ曲線</title><link href="https://falgon.github.io/roki.log/posts/2018/%204%E6%9C%88/20/Bezier-curve/" rel="alternate"></link><published>2018-04-20T16:50:00+09:00</published><updated>2018-04-20T16:50:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-04-20:/roki.log/posts/2018/ 4月/20/Bezier-curve/</id><summary type="html">&lt;p&gt;ベジェ曲線の学習メモ&lt;/p&gt;</summary><content type="html">&lt;p&gt;典型的なパラメトリック曲線の一種である, ベジェ曲線(Bézier curve)についての学習メモ. パラメトリック曲線とその一種であるエルミート曲線に関しては, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%204月/15/hermite-curve/"&gt;前回の記事&lt;/a&gt;を参照.&lt;/p&gt;
&lt;p&gt;ベジェ曲線は, パラメータ \(t\ (0 \leq t \leq 1)\) と複数の制御点 &lt;span class="math"&gt;\(P_i\)&lt;/span&gt; から構成されるパラメトリック曲線の一種である&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
始点と終点の線分から成る, 次数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; のベジェ曲線は &lt;span class="math"&gt;\(n+1\)&lt;/span&gt; の制御点をもち(&lt;span class="math"&gt;\(= P_0, P_1, \cdots, P_n\)&lt;/span&gt; の制御点があるベジェ曲線を &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; 次ベジェ曲線という),
この内分点を繰り返し取ることによって, 曲線を得ることができる. この始点と終点の線分を, セグメントといい, これが得られる曲線そのものになる&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. 
&lt;br&gt;
まず, ここでは 2 次ベジェ曲線を描くとして, そのイメージをつけるために, 図&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;を用いてその概要を見る.&lt;br&gt; 
なお, 2 次ベジェ曲線は true type&amp;nbsp;フォントなどで使われている.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2 次ベジェ曲線を描画する途中経過" src="../../../../../images/2018/Apr/20/bezierstatic.svg" title="2 次ベジェ曲線描画の途中経過"&gt;&lt;/p&gt;
&lt;p&gt;図で示されている各変数について取り上げる.
上図 &lt;span class="math"&gt;\(P_0, P_1, P_2\)&lt;/span&gt; は平面 &lt;span class="math"&gt;\(\mathbb{R}^2\)&lt;/span&gt; 上に取った 3 点である.
&lt;span class="math"&gt;\(t\)&lt;/span&gt; は &lt;span class="math"&gt;\(0 \leq t \leq 1, t \in \mathbb{R}\)&lt;/span&gt; であり, &lt;span class="math"&gt;\(P_0\)&lt;/span&gt; から &lt;span class="math"&gt;\(P_1\)&lt;/span&gt;, また &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; から &lt;span class="math"&gt;\(P_2\)&lt;/span&gt; の間で &lt;span class="math"&gt;\(0\)&lt;/span&gt; から &lt;span class="math"&gt;\(1\)&lt;/span&gt; に増加する. 
このとき, &lt;span class="math"&gt;\(t\)&lt;/span&gt; に対して変化する &lt;span class="math"&gt;\(P_0\)&lt;/span&gt; と &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; の線分上の一点を &lt;span class="math"&gt;\(Q_0\)&lt;/span&gt;, &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; と &lt;span class="math"&gt;\(P_2\)&lt;/span&gt; の線分上の一点を &lt;span class="math"&gt;\(Q_1\)&lt;/span&gt; とする.
上図では, &lt;span class="math"&gt;\(t=0.25\)&lt;/span&gt; であるから &lt;span class="math"&gt;\(Q_0\)&lt;/span&gt; は &lt;span class="math"&gt;\(P_0\)&lt;/span&gt; と &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; の線分上の &lt;span class="math"&gt;\(\displaystyle\dfrac{1}{4}\)&lt;/span&gt; の地点にあることがいえる.
このとき &lt;span class="math"&gt;\(Q_1\)&lt;/span&gt; は, &lt;u&gt;&lt;span class="math"&gt;\(P_2\)&lt;/span&gt; から見て&lt;/u&gt; &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; と &lt;span class="math"&gt;\(P_2\)&lt;/span&gt; の線分上の &lt;span class="math"&gt;\(\displaystyle\dfrac{3}{4}\)&lt;/span&gt; の地点にあることがいえる.
これは, &lt;span class="math"&gt;\(Q_0 : Q_1 = t : 1 - t\)&lt;/span&gt; という対比で表すことができる(つまり, &lt;span class="math"&gt;\(Q_0 = (1-t)P_0 + tP_1, Q_1 = (1-t)P_1 + tP_2\)&lt;/span&gt;).
そして, &lt;span class="math"&gt;\(Q_0\)&lt;/span&gt; と &lt;span class="math"&gt;\(Q_1\)&lt;/span&gt; の線分上を &lt;span class="math"&gt;\(t : 1-t\)&lt;/span&gt; の比率となる 1 点をとり, これを &lt;span class="math"&gt;\(B\)&lt;/span&gt; とする(つまり, &lt;span class="math"&gt;\(B=(1-t)Q_0+tQ_1\)&lt;/span&gt;).
これが, 2 次ベジェ曲線の 1 点となるのである. &lt;span class="math"&gt;\(t\)&lt;/span&gt; の増加によって, &lt;span class="math"&gt;\(t : 1-t\)&lt;/span&gt; の比率が変化していくから, それを繰り返し取ることで放物線(曲線)が得られるのである.&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;span class="math"&gt;\(Q_0, Q_1\)&lt;/span&gt; を &lt;span class="math"&gt;\(B\)&lt;/span&gt; に代入すると, &lt;span class="math"&gt;\(B\)&lt;/span&gt;&amp;nbsp;は,&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;&amp;#92;(2&amp;#92;) 次ベジェ曲線&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;[B = \left(1-t\right)^2 P_0 + 2t(1-t)P_1+t^2 P_2&amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;という 2 次式となる. &lt;span class="math"&gt;\(P_0, P_1, P_2\)&lt;/span&gt; の各係数に着目すると, 結果的に 2 次バーンスタイン基底関数が得られたことがわかる&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.
以下に, 2 次ベジェ曲線を描画していく様子を示す&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;. 「動かす」をクリックすると, 二次ベジェ曲線を描くアニメーションが描画される.
各制御点をドラッグして操作できる. やめるをクリックすると,&amp;nbsp;描画を隠す.&lt;/p&gt;
&lt;div style="text-align: center;"&gt;&lt;input id="bezierButton" class="btn btn-primary" type="button" value="動かす" onclick="drawBezier()" /&gt;&lt;/div&gt;

&lt;div id="vis"&gt;&lt;/div&gt;

&lt;p&gt;この放物線の構成法を一般化したものが,&amp;nbsp;ド・カステリョのアルゴリズムである.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;ド・カステリョのアルゴリズム&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
平面 &amp;#92;(\mathbb{R}^2&amp;#92;) の &amp;#92;(n+1&amp;#92;) 個の点 &amp;#92;(P_0, P_1, \cdots, P_n&amp;#92;) と実数 &amp;#92;(t\in\mathbb{R}&amp;#92;) に対し 
&amp;#92;(\displaystyle P^0_i(t) = P_i&amp;#92;) としたとき,&amp;#92;[
P^r_i(t) = (1-t)P^{r-1}\_i(t)+ tP^{r-1}_{i+1}(t), (r=1, \cdots, n; i = 0, 1, \cdots, n - r)
&amp;#92;]
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ここで, 特にこれを再度書く意味は全くないが, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%204月/15/hermite-curve/"&gt;前回の記事&lt;/a&gt;では曲線描画に関して Haskell で書いたので,&amp;nbsp;こちらもなんとなく載せて置く.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- | A function that generates a coordinate list of quadratic Bezier curves according to &lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- the three control points, them density and the range of @t@ (@bt &amp;lt;= t &amp;lt;= et@).&lt;/span&gt;
&lt;span class="nf"&gt;quadraticBezier&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;quadraticBezier&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspaceWithDensity&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;b20&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;b21&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="n"&gt;b22&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b20&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b21&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b22&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;
        &lt;span class="n"&gt;bx&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;quadraticBezier (-1.0, -1.66) (1.10, -1.88) (0.04, 0.86) 0.001 0 1&lt;/code&gt; とし, &lt;a href="https://falgon.github.io/roki.log/posts/2018/%204月/15/hermite-curve/"&gt;前回の記事&lt;/a&gt;のように &lt;span class="caps"&gt;GLUT&lt;/span&gt; を使って出力すると,&amp;nbsp;次のような曲線が得られる.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../../images/2018/Apr/20/bezier1.png" width="400px" alt="2 次バーンスタイン基底関数によるベジェ曲線の描画"/&gt;&lt;/p&gt;
&lt;p&gt;また, 3 次ベジェ曲線は, 冒頭で述べた通り, 次数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(+1\)&lt;/span&gt; した制御点を持つので, &lt;span class="math"&gt;\(4\)&lt;/span&gt; つの制御点を持つ&lt;sup id="fnref2-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="3 次ベジェ曲線を描画する途中経過" src="../../../../../images/2018/Apr/20/triplebezier.svg" title="3 次ベジェ曲線描画の途中経過"&gt;&lt;/p&gt;
&lt;p&gt;考え方は 2 次ベジェ曲線のときと同様で, 最終的に 3 次ベジェ曲線における &lt;span class="math"&gt;\(B\)&lt;/span&gt;&amp;nbsp;は&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;&amp;#92;(3&amp;#92;) 次ベジェ曲線&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
&amp;#92;[B = \left(1-t\right)^3 P_0 + 3\left(1-t\right)^2 P_1 + 3\left(1-t\right)t^2 P_2 + t^3 P_3 &amp;#92;]
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;という 3 次式になる. なお, 3 次ベジェ曲線は,&amp;nbsp;アドビ社のポストスクリプトフォントや画像編集ソフトなどで使用されている.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- | A function that generates a coordinate list of cubic bezier curves according to &lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- the four control points, them density and the range of @t@ (@bt &amp;lt;= t &amp;lt;= et@).&lt;/span&gt;
&lt;span class="nf"&gt;cubicBezier&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;cubicBezier&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspaceWithDensity&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;b30&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;b31&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="n"&gt;b32&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;b33&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b30&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b31&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b32&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b33&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt;
        &lt;span class="n"&gt;bx&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bezier&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同様に&lt;code&gt;cubicBezier (1, 0) (1, 1) (-1, 1) (-1, 0) 0.001 0 1&lt;/code&gt;とすると,&amp;nbsp;次のような曲線が得られる.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../../images/2018/Apr/20/cubicBezier.png" width="400px" alt="3 次バーンスタイン基底関数によるベジェ曲線の描画" /&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;ベジェ曲線はフランスの自動車メーカーシトロエン社のド・カステリョ (de Casteljau) とルノー社のベジェ (Bézier) によって独立に考案されたものの, 企業秘密として 1960 年代の後半になるまで公表されなかった. ド・カステリョによる研究はベジェよりも先んじていたが, その論文が公知とならなかったために, これらの理論にはベジェの名前がついているとのこと. 参照: 鳥谷 浩志; 千代倉 弘明 (1991). 3次元CADの基礎と応用. 共立出版. &lt;span class="caps"&gt;ISBN&lt;/span&gt; 9784320025394.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;用語に関する参照: &lt;a href="http://tomari.org/main/java/kyokusen/bezier.html"&gt;曲線・図形の書き方(ベジェ曲線)&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;図は Wikipedia Commmons (パブリックドメイン) から.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;参考: ド・カステリョのアルゴリズム.&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;2 次バーンスタイン基底関数によるベジェ曲線は, 一様 2 次 B スプライン曲線と全く同じ. ここでいう「一様」とは, パラメータ &lt;span class="math"&gt;\(t(\{t_0, t_1, t_2, \cdots\})\)&lt;/span&gt; を等間隔にとることをいう.&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;このアニメーションは, d3.js を使って&lt;a href="https://github.com/falgon/roki.log/blob/gh-pages/js/quadraticBezier.js"&gt;実装した&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Haskell"></category></entry><entry><title>エルミート曲線</title><link href="https://falgon.github.io/roki.log/posts/2018/%204%E6%9C%88/15/hermite-curve/" rel="alternate"></link><published>2018-04-15T16:50:00+09:00</published><updated>2018-04-15T16:50:00+09:00</updated><author><name>roki</name></author><id>tag:falgon.github.io,2018-04-15:/roki.log/posts/2018/ 4月/15/hermite-curve/</id><summary type="html">&lt;p&gt;エルミート曲線の学習メモ&lt;/p&gt;</summary><content type="html">&lt;p&gt;典型的なパラメトリック曲線の一種である,&amp;nbsp;エルミート曲線についてのメモ.&lt;/p&gt;
&lt;h3&gt;パラメトリック曲線&lt;/h3&gt;
&lt;p&gt;そもそもパラメトリック曲線とは, 任意のパラメータから各々の座標を陽関数形式で表現できる曲線のことをいう. 
このとき定義できる関数 \(f\) がパラメータ \(t\)&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; の多項式である場合, それを多項式曲線といい,
有理式である場合, それを有理曲線という. 例えば, 直線の方程式 \(y = m(x-a)+b\)&amp;nbsp;は,&lt;/p&gt;
&lt;div class="math"&gt;\begin{cases}
x=t \\
y=m(t-a)+b
\end{cases}&lt;/div&gt;
&lt;p&gt;
とパラメタライズできる. この方程式では, パラメタライズせずとも, \(x\) に 1 つの実数を代入すれば, 必ず \(y\) が求まる(逆も言える)ことは明らかである.
次に, 3 次曲線 \(y^{2} = x^{3} + x^{2} \) について考える. \(x\) に 1 つの実数を代入すると, \(y\)&amp;nbsp;は,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(x^{3} + x^{2} \gt 0\) のとき \(\pm{\sqrt{x^{3} +&amp;nbsp;x^{2}}}\), &lt;/li&gt;
&lt;li&gt;\(x^{3} + x^{2} = 0\) のとき&amp;nbsp;\(0\),&lt;/li&gt;
&lt;li&gt;\(x^{3} + x^{2} \lt 0\)&amp;nbsp;のとき複素数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となり, \(x\) の値によっては, グラフが存在しない.&amp;nbsp;これを &lt;/p&gt;
&lt;div class="math"&gt;\begin{cases}
x=t^{2}-1 \\
y=t^{3}-t
\end{cases}&lt;/div&gt;
&lt;p&gt;
とパラメタライズすることで, 任意の実数 \(t\) に対するグラフ上の一点を定めることができる&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../../images/2018/Apr/15/curves0.png" alt="パラメトリック曲線との視覚的差異" width="650px"/&gt;&lt;/p&gt;
&lt;h3&gt;エルミート曲線&lt;/h3&gt;
&lt;p&gt;エルミート曲線は, 始点\((x_{0}, y_{0})\)とその速度ベクトル\((v_{0}, w_{0})\), 終点\((x_{1}, y_{1})\)とその速度ベクトル\((v_{1}, w_{1})\) を与えたときに,
始点と終点の間をつなぐ 3 次パラメトリック曲線である. 3 次パラメトリック曲線と言うからには, これを一般の 3 次多項式で表現できるはずである.\[ f(t) = At^{3} + Bt^{2} + Ct + D \]
パラメトリック曲線は \(x\) と \(y\) をそれぞれ別々に扱えるので, まず \(x\) について考える. \[x(t) = At^{3} + Bt^{2} + Ct + D \tag{1}\]
4 つの係数, \(A, B, C, D\) が得られれば, 任意の \(t\) に対するエルミート曲線の \(x\) が得られるはずである.
まず, 始点の座標を求める. \(t = 0\) のときを始点, \(t = 1\) のときを終点としたとき, \(t = 0\) のときに始点の座標, \(t = 1\) のときに終点の座標が得られることは明らかなので, 
\(t\) に \(0\), および \(t\) に \(1\) を代入して次の二式が得られる.\[x(0) = D = x_{0} \tag{2}\] \[x(1) = A + B + C + D = x_{1} \tag{3}\]
ここで, ある地点 \(t\) での曲線の傾きを求めるために, 一階微分した次の式を得る. \[\displaystyle
\dfrac{d}{dt}x(t)=3At^{2} + 2Bt + C \tag{4}\] 始点(\(0\))と終点(\(1\))をそれぞれ式 \((4)\) の \(t\) に代入し, 始点における曲線の傾きと, 終点における曲線の傾きが得られる.
\[\displaystyle \dfrac{dx}{dt}(0) = C = v_{0} \tag{5}\] \[\displaystyle \dfrac{dx}{dt}(1) = 3A + 2B + C = v_{1} \tag{6}\] 
式 \((3)\) に式 \((2)\), \((5)\) を, 式 \((6)\) に式 \((5)\) を代入すると, 次の二式が得られる.
\[A+B+v_{0}+x_{0} = x_{1} \tag{7}\] 
\[3A + 2B + v_{0} = v_{1} \tag{8}\]
式 \((7)\), \((8)\) の連立方程式を解くと,
\[A = 2x_{0} - 2x_{1} + v_{0} + v_{1} \tag{9} \] \[B = -3x_{0}+3x_{1} - 2v_{0} - v_{1} \tag{10} \]
となる. 式 \((2), (5), (9), (10)\) を式 \((1)\) に代入すると\[
x(t) = (2x_{0} - 2x_{1} + v_{0} + v_{1})t^{3} + (-3x_{0} + 3x_{1} - 2v_{0} - v_{1})t^{2} + v_{0}t + x_{0} \tag{11}
\]
であるから, 式 \((11)\) から \(t\) に対するエルミート曲線の \(x\) が取れることがわかった. \(y\) についても, \(x\) を \(y\) に, \(v\) を \(w\) にすると,&amp;nbsp;同様にして得られるから
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
\begin{cases}
x(t) &amp;amp;= (2x_{0} - 2x_{1} + v_{0} + v_{1})t^{3} + (-3x_{0} + 3x_{1} - 2v_{0} - v_{1})t^{2} + v_{0}t + x_{0} \\
y(t) &amp;amp;= (2y_{0} - 2y_{1} + w_{0} + w_{1})t^{3} + (-3y_{0} + 3y_{1} - 2w_{0} - w_{1})t^{2} + w_{0}t + y_{0}
\end{cases}
\end{align}&lt;/div&gt;
&lt;p&gt;
がいえる. &lt;/p&gt;
&lt;p&gt;さらに, \(x(t)\) から \(x_{0}, x_{1}, v_{0}, v_{1}\)(\(y_{0}, y_{1}, w_{0}, w_{1}\) についても同様) の係数にそれぞれ着目して,&amp;nbsp;次のように定義する.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(x_{0}\) の係数に着目し, \(2t^3-3t^2+1=(2t+1)(1-t)^2 \),  これを \(H^3_{0}(t)\)&amp;nbsp;とする&lt;/li&gt;
&lt;li&gt;\(v_{0}\) の係数に着目し, \(t^3-2t^2+t=t(1-t)^2\), これを \(H^3_{1}(t)\)&amp;nbsp;とする&lt;/li&gt;
&lt;li&gt;\(v_{1}\) の係数に着目し, \(t^3-t^2=-t^2(1-t)\), これを \(H^3_{2}(t)\)&amp;nbsp;とする&lt;/li&gt;
&lt;li&gt;\(x_{1}\) の係数に着目し, \(3t^2-2t^3=t^2(3-2t)\), これを \(H^3_{3}(t)\)&amp;nbsp;とする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すると, 先ほど導出した\(x(t), y(t)\)&amp;nbsp;の式は次のように定義できる.&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading def"&gt;&lt;a class="disabled"&gt;エルミート曲線&lt;/a&gt;&lt;/div&gt;
  &lt;div class="panel-body"&gt;
\begin{align}
\begin{cases}
x(t) &amp;= x_{0}H^3_{0}(t) + v_{0}H^3_{1} + v_{1}H^3_{2}(t) + x_{1}H^3_{3}(t) &amp;#92;\
y(t) &amp;= y_{0}H^3_{0}(t) + w_{0}H^3_{1} + w_{1}H^3_{2}(t) + y_{1}H^3_{3}(t) 
\end{cases}
\end{align}
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これは, 3&amp;nbsp;次エルミート多項式によるエルミート曲線の定義と同義である.&lt;/p&gt;
&lt;h3&gt;実際に描く&lt;/h3&gt;
&lt;p&gt;始点 \((1, 0)\) での速度ベクトルを \((0, 1)\), 終点 \((-1, 0)\) での速度ベクトルを \((0, -1)\) として,
上記に導いたエルミート曲線に従い, 点を打ってみた&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-# OPTIONS_GHC -Wall #-}&lt;/span&gt;

&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Graphics.Rendering.OpenGL&lt;/span&gt; 
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Graphics.UI.GLUT&lt;/span&gt; 
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forM_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Arrow&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;GLfloat&lt;/span&gt;

&lt;span class="nf"&gt;linspaceWithDensity&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;linspaceWithDensity&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;realToFrac&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; 
    &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;iterate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;realToFrac&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- | The function that generates a coordinate list of Hermite curve according to&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- the start point, the velocity vector of the start point, the end point, the velocity vector of the end point,&lt;/span&gt;
&lt;span class="c1"&gt;-- the density of the points and the range of @t@ (@bt &amp;lt;= t &amp;lt;= et@).&lt;/span&gt;
&lt;span class="nf"&gt;hermite&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;hermite&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="n"&gt;stVec&lt;/span&gt; &lt;span class="n"&gt;ed&lt;/span&gt; &lt;span class="n"&gt;edVec&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;herX&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;herY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspaceWithDensity&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;h30&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;h31&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;h32&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h33&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hermite&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h30&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h31&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h32&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h33&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt;
        &lt;span class="n"&gt;herX&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hermite&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;stVec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;edVec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;ed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;herY&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hermite&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;stVec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;edVec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;ed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;resize&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Size&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;resize&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;viewport&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Position&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loadIdentity&lt;/span&gt;
    &lt;span class="n"&gt;ortho&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;w&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;h&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;w&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realToFrac&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;200.0&lt;/span&gt;
        &lt;span class="n"&gt;h&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realToFrac&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;200.0&lt;/span&gt;

&lt;span class="nf"&gt;disp&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;disp&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;clear&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;ColorBuffer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Color3&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Color3&lt;/span&gt; &lt;span class="kt"&gt;GLdouble&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pointSize&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;renderPrimitive&lt;/span&gt; &lt;span class="kt"&gt;Points&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;forM_&lt;/span&gt; &lt;span class="n"&gt;hcurve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="kt"&gt;Vertex2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;flush&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;hcurve&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hermite&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getArgsAndInitialize&lt;/span&gt;
    &lt;span class="n"&gt;initialDisplayMode&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;RGBAMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;createWindow&lt;/span&gt; &lt;span class="n"&gt;progname&lt;/span&gt;
    &lt;span class="n"&gt;clearColor&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="kt"&gt;Color4&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;windowTitle&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hermite curve&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;displayCallback&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="n"&gt;disp&lt;/span&gt;
    &lt;span class="n"&gt;reshapeCallback&lt;/span&gt; &lt;span class="o"&gt;$=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt;
    &lt;span class="n"&gt;mainLoop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次のような曲線を得た.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../../images/2018/Apr/15/hshermiteCurve.png" width="350px"&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;\(t\) は time からくる.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;グラフ描画の&lt;a href="https://gist.github.com/falgon/84614f9f8be752f8ada1f7d4379d00b1"&gt;ソースコード&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;浮動小数点数の絶対誤差が気になる演算だが, そのような観点において上記コードでは手抜きをした.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js','color.js','enclose.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: false," +
        "    messageStyle: 'None'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="Python"></category><category term="Haskell"></category></entry></feed>